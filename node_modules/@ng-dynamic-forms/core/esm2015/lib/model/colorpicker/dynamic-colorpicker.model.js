/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormValueControlModel } from "../dynamic-form-value-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isString } from "../../utils/core.utils";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = "COLORPICKER";
/**
 * @record
 */
export function DynamicColorPickerModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicColorPickerModelConfig.prototype.format;
    /** @type {?|undefined} */
    DynamicColorPickerModelConfig.prototype.inline;
}
export class DynamicColorPickerModel extends DynamicFormValueControlModel {
    /**
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;
        this.format = isString(config.format) ? config.format : null;
        this.inline = isBoolean(config.inline) ? config.inline : false;
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicColorPickerModel.prototype, "format", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicColorPickerModel.prototype, "inline", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicColorPickerModel.prototype, "type", void 0);
if (false) {
    /** @type {?} */
    DynamicColorPickerModel.prototype.format;
    /** @type {?} */
    DynamicColorPickerModel.prototype.inline;
    /** @type {?} */
    DynamicColorPickerModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb2xvcnBpY2tlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvY29sb3JwaWNrZXIvZHluYW1pYy1jb2xvcnBpY2tlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBc0MsNEJBQTRCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUV2SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFN0QsTUFBTSxPQUFPLHFDQUFxQyxHQUFHLGFBQWE7Ozs7QUFFbEUsbURBSUM7OztJQUZHLCtDQUFnQjs7SUFDaEIsK0NBQWlCOztBQUdyQixNQUFNLE9BQU8sdUJBQXdCLFNBQVEsNEJBQTZDOzs7OztJQU90RixZQUFZLE1BQXFDLEVBQUUsTUFBaUM7UUFFaEYsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUpELFNBQUksR0FBVyxxQ0FBcUMsQ0FBQztRQU0xRSxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3RCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNuRSxDQUFDO0NBQ0o7QUFabUI7SUFBZixZQUFZLEVBQUU7O3VEQUF1QjtBQUN0QjtJQUFmLFlBQVksRUFBRTs7dURBQWlCO0FBRWhCO0lBQWYsWUFBWSxFQUFFOztxREFBK0Q7OztJQUg5RSx5Q0FBc0M7O0lBQ3RDLHlDQUFnQzs7SUFFaEMsdUNBQThFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZywgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9keW5hbWljLWZvcm0tdmFsdWUtY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0IH0gZnJvbSBcIi4uL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUgfSBmcm9tIFwiLi4vLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGlzQm9vbGVhbiwgaXNTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9DT0xPUlBJQ0tFUiA9IFwiQ09MT1JQSUNLRVJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljQ29sb3JQaWNrZXJNb2RlbENvbmZpZyBleHRlbmRzIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWxDb25maWc8c3RyaW5nIHwgb2JqZWN0PiB7XG5cbiAgICBmb3JtYXQ/OiBzdHJpbmc7XG4gICAgaW5saW5lPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb2xvclBpY2tlck1vZGVsIGV4dGVuZHMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxzdHJpbmcgfCBvYmplY3Q+IHtcblxuICAgIEBzZXJpYWxpemFibGUoKSBmb3JtYXQ6IHN0cmluZyB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGlubGluZTogYm9vbGVhbjtcblxuICAgIEBzZXJpYWxpemFibGUoKSByZWFkb25seSB0eXBlOiBzdHJpbmcgPSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0NPTE9SUElDS0VSO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEeW5hbWljQ29sb3JQaWNrZXJNb2RlbENvbmZpZywgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIHRoaXMuZm9ybWF0ID0gaXNTdHJpbmcoY29uZmlnLmZvcm1hdCkgPyBjb25maWcuZm9ybWF0IDogbnVsbDtcbiAgICAgICAgdGhpcy5pbmxpbmUgPSBpc0Jvb2xlYW4oY29uZmlnLmlubGluZSkgPyBjb25maWcuaW5saW5lIDogZmFsc2U7XG4gICAgfVxufSJdfQ==
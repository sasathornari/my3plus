/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicDateControlModel } from "../dynamic-date-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isString } from "../../utils/core.utils";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = "DATEPICKER";
/**
 * @record
 */
export function DynamicDatePickerModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.autoFocus;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.focusedDate;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.inline;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.prefix;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.readOnly;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.suffix;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.toggleIcon;
    /** @type {?|undefined} */
    DynamicDatePickerModelConfig.prototype.toggleLabel;
}
export class DynamicDatePickerModel extends DynamicDateControlModel {
    /**
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;
        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        this.focusedDate = config.focusedDate || null;
        this.inline = isBoolean(config.inline) ? config.inline : false;
        this.prefix = config.prefix || null;
        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;
        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;
        this.suffix = config.suffix || null;
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicDatePickerModel.prototype, "autoFocus", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicDatePickerModel.prototype, "focusedDate", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicDatePickerModel.prototype, "inline", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicDatePickerModel.prototype, "prefix", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicDatePickerModel.prototype, "readOnly", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicDatePickerModel.prototype, "suffix", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicDatePickerModel.prototype, "toggleIcon", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicDatePickerModel.prototype, "toggleLabel", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicDatePickerModel.prototype, "type", void 0);
if (false) {
    /** @type {?} */
    DynamicDatePickerModel.prototype.autoFocus;
    /** @type {?} */
    DynamicDatePickerModel.prototype.focusedDate;
    /** @type {?} */
    DynamicDatePickerModel.prototype.inline;
    /** @type {?} */
    DynamicDatePickerModel.prototype.prefix;
    /** @type {?} */
    DynamicDatePickerModel.prototype.readOnly;
    /** @type {?} */
    DynamicDatePickerModel.prototype.suffix;
    /** @type {?} */
    DynamicDatePickerModel.prototype.toggleIcon;
    /** @type {?} */
    DynamicDatePickerModel.prototype.toggleLabel;
    /** @type {?} */
    DynamicDatePickerModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1kYXRlcGlja2VyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9kYXRlcGlja2VyL2R5bmFtaWMtZGF0ZXBpY2tlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFHMUIsTUFBTSwrQkFBK0IsQ0FBQztBQUV2QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFN0QsTUFBTSxPQUFPLG9DQUFvQyxHQUFHLFlBQVk7Ozs7QUFFaEUsa0RBVUM7OztJQVJHLGlEQUFvQjs7SUFDcEIsbURBQXNDOztJQUN0Qyw4Q0FBaUI7O0lBQ2pCLDhDQUFnQjs7SUFDaEIsZ0RBQW1COztJQUNuQiw4Q0FBZ0I7O0lBQ2hCLGtEQUFvQjs7SUFDcEIsbURBQXFCOztBQUd6QixNQUFNLE9BQU8sc0JBQXVCLFNBQVEsdUJBQXVCOzs7OztJQWEvRCxZQUFZLE1BQW9DLEVBQUUsTUFBaUM7UUFFL0UsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUpELFNBQUksR0FBVyxvQ0FBb0MsQ0FBQztRQU16RSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN4RSxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDckUsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDNUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztJQUN4QyxDQUFDO0NBQ0o7QUF4Qm1CO0lBQWYsWUFBWSxFQUFFOzt5REFBb0I7QUFDbkI7SUFBZixZQUFZLEVBQUU7OzJEQUE2QztBQUM1QztJQUFmLFlBQVksRUFBRTs7c0RBQWlCO0FBQ2hCO0lBQWYsWUFBWSxFQUFFOztzREFBdUI7QUFDdEI7SUFBZixZQUFZLEVBQUU7O3dEQUFtQjtBQUNsQjtJQUFmLFlBQVksRUFBRTs7c0RBQXVCO0FBQ3RCO0lBQWYsWUFBWSxFQUFFOzswREFBMkI7QUFDMUI7SUFBZixZQUFZLEVBQUU7OzJEQUE0QjtBQUUzQjtJQUFmLFlBQVksRUFBRTs7b0RBQThEOzs7SUFUN0UsMkNBQW1DOztJQUNuQyw2Q0FBNEQ7O0lBQzVELHdDQUFnQzs7SUFDaEMsd0NBQXNDOztJQUN0QywwQ0FBa0M7O0lBQ2xDLHdDQUFzQzs7SUFDdEMsNENBQTBDOztJQUMxQyw2Q0FBMkM7O0lBRTNDLHNDQUE2RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRHluYW1pY0RhdGVDb250cm9sTW9kZWwsXG4gICAgRHluYW1pY0RhdGVDb250cm9sTW9kZWxDb25maWcsXG4gICAgRHluYW1pY0RhdGVDb250cm9sVmFsdWVcbn0gZnJvbSBcIi4uL2R5bmFtaWMtZGF0ZS1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1sYXlvdXQubW9kZWxcIjtcbmltcG9ydCB7IHNlcmlhbGl6YWJsZSB9IGZyb20gXCIuLi8uLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNCb29sZWFuLCBpc1N0cmluZyB9IGZyb20gXCIuLi8uLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0RBVEVQSUNLRVIgPSBcIkRBVEVQSUNLRVJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljRGF0ZVBpY2tlck1vZGVsQ29uZmlnIGV4dGVuZHMgRHluYW1pY0RhdGVDb250cm9sTW9kZWxDb25maWcge1xuXG4gICAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcbiAgICBmb2N1c2VkRGF0ZT86IER5bmFtaWNEYXRlQ29udHJvbFZhbHVlO1xuICAgIGlubGluZT86IGJvb2xlYW47XG4gICAgcHJlZml4Pzogc3RyaW5nO1xuICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcbiAgICBzdWZmaXg/OiBzdHJpbmc7XG4gICAgdG9nZ2xlSWNvbj86IHN0cmluZztcbiAgICB0b2dnbGVMYWJlbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIER5bmFtaWNEYXRlUGlja2VyTW9kZWwgZXh0ZW5kcyBEeW5hbWljRGF0ZUNvbnRyb2xNb2RlbCB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgYXV0b0ZvY3VzOiBib29sZWFuO1xuICAgIEBzZXJpYWxpemFibGUoKSBmb2N1c2VkRGF0ZTogRHluYW1pY0RhdGVDb250cm9sVmFsdWUgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBpbmxpbmU6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHByZWZpeDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgcmVhZE9ubHk6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHN1ZmZpeDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgdG9nZ2xlSWNvbjogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgdG9nZ2xlTGFiZWw6IHN0cmluZyB8IG51bGw7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9EQVRFUElDS0VSO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEeW5hbWljRGF0ZVBpY2tlck1vZGVsQ29uZmlnLCBsYXlvdXQ/OiBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQpIHtcblxuICAgICAgICBzdXBlcihjb25maWcsIGxheW91dCk7XG5cbiAgICAgICAgdGhpcy5hdXRvRm9jdXMgPSBpc0Jvb2xlYW4oY29uZmlnLmF1dG9Gb2N1cykgPyBjb25maWcuYXV0b0ZvY3VzIDogZmFsc2U7XG4gICAgICAgIHRoaXMuZm9jdXNlZERhdGUgPSBjb25maWcuZm9jdXNlZERhdGUgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5pbmxpbmUgPSBpc0Jvb2xlYW4oY29uZmlnLmlubGluZSkgPyBjb25maWcuaW5saW5lIDogZmFsc2U7XG4gICAgICAgIHRoaXMucHJlZml4ID0gY29uZmlnLnByZWZpeCB8fCBudWxsO1xuICAgICAgICB0aGlzLnJlYWRPbmx5ID0gaXNCb29sZWFuKGNvbmZpZy5yZWFkT25seSkgPyBjb25maWcucmVhZE9ubHkgOiBmYWxzZTtcbiAgICAgICAgdGhpcy50b2dnbGVJY29uID0gaXNTdHJpbmcoY29uZmlnLnRvZ2dsZUljb24pID8gY29uZmlnLnRvZ2dsZUljb24gOiBudWxsO1xuICAgICAgICB0aGlzLnRvZ2dsZUxhYmVsID0gaXNTdHJpbmcoY29uZmlnLnRvZ2dsZUxhYmVsKSA/IGNvbmZpZy50b2dnbGVMYWJlbCA6IG51bGw7XG4gICAgICAgIHRoaXMuc3VmZml4ID0gY29uZmlnLnN1ZmZpeCB8fCBudWxsO1xuICAgIH1cbn0iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isString } from "../utils/core.utils";
/**
 * @abstract
 */
export class DynamicFormControlComponent {
    /**
     * @protected
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(layoutService, validationService) {
        this.layoutService = layoutService;
        this.validationService = validationService;
        this._hasFocus = false;
    }
    /**
     * @return {?}
     */
    get control() {
        /** @type {?} */
        const control = this.group.get(this.model.id);
        if (control === null) {
            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);
        }
        return (/** @type {?} */ (control));
    }
    /**
     * @return {?}
     */
    get elementId() {
        return this.layoutService.getElementId(this.model);
    }
    /**
     * @return {?}
     */
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    /**
     * @return {?}
     */
    get hasFocus() {
        return this._hasFocus;
    }
    /**
     * @return {?}
     */
    get isInvalid() {
        return this.control.invalid;
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.control.valid;
    }
    /**
     * @return {?}
     */
    get showErrorMessages() {
        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
    }
    /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    getClass(context, place, model = this.model) {
        /** @type {?} */
        let controlLayout = this.layoutService.findByModel(model, this.layout) || (/** @type {?} */ (model.layout));
        return this.layoutService.getClass(controlLayout, context, place);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = false;
        this.blur.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onChange($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this.change.emit($event);
    }
    /**
     * @param {?} $event
     * @param {?} model
     * @return {?}
     */
    onEmbeddedCheckboxChange($event, model) {
        this.onChange($event);
        model.value = ((/** @type {?} */ ($event.target))).checked;
    }
    /**
     * @param {?} $event
     * @param {?=} type
     * @param {?=} bypass
     * @return {?}
     */
    onCustomEvent($event, type = null, bypass = false) {
        /** @type {?} */
        let emitter = (/** @type {?} */ (this.customEvent));
        if (bypass) {
            emitter.emit($event);
        }
        else if (isString(type)) {
            emitter.emit({ customEvent: $event, customEventType: type });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = true;
        this.focus.emit($event);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormControlComponent.prototype._hasFocus;
    /** @type {?} */
    DynamicFormControlComponent.prototype.group;
    /** @type {?} */
    DynamicFormControlComponent.prototype.layout;
    /** @type {?} */
    DynamicFormControlComponent.prototype.model;
    /** @type {?} */
    DynamicFormControlComponent.prototype.templates;
    /** @type {?} */
    DynamicFormControlComponent.prototype.blur;
    /** @type {?} */
    DynamicFormControlComponent.prototype.change;
    /** @type {?} */
    DynamicFormControlComponent.prototype.customEvent;
    /** @type {?} */
    DynamicFormControlComponent.prototype.focus;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlComponent.prototype.validationService;
}
//# sourceMappingURL=data:application/json;base64,
{"version":3,"file":"core.js","sources":["ng://@ng-dynamic-forms/core/lib/utils/core.utils.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-array.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.event.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-component.ts","ng://@ng-dynamic-forms/core/lib/decorator/serializable.decorator.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-value-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-array/dynamic-form-array.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-check-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox.model.ts","ng://@ng-dynamic-forms/core/lib/utils/autofill.utils.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-input-control.model.ts","ng://@ng-dynamic-forms/core/lib/utils/json.utils.ts","ng://@ng-dynamic-forms/core/lib/model/input/dynamic-input.model.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control-container.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-templateable-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-id.directive.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-list.directive.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-template.directive.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-date-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-file-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-option-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-group/dynamic-form-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/colorpicker/dynamic-colorpicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/datepicker/dynamic-datepicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/editor/dynamic-editor.model.ts","ng://@ng-dynamic-forms/core/lib/model/file-upload/dynamic-file-upload.model.ts","ng://@ng-dynamic-forms/core/lib/model/radio/dynamic-radio-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/rating/dynamic-rating.model.ts","ng://@ng-dynamic-forms/core/lib/model/select/dynamic-select.model.ts","ng://@ng-dynamic-forms/core/lib/model/slider/dynamic-slider.model.ts","ng://@ng-dynamic-forms/core/lib/model/switch/dynamic-switch.model.ts","ng://@ng-dynamic-forms/core/lib/model/textarea/dynamic-textarea.model.ts","ng://@ng-dynamic-forms/core/lib/model/timepicker/dynamic-timepicker.model.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.validators.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-validation.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-component.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-layout.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.matchers.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.service.ts","ng://@ng-dynamic-forms/core/lib/core.module.ts"],"sourcesContent":["export function isBoolean(value: any): value is boolean {\n    return typeof value === \"boolean\";\n}\n\nexport function isFunction(value: any): value is Function {\n    return typeof value === \"function\";\n}\n\nexport function isNumber(value: any): value is number {\n    return typeof value === \"number\";\n}\n\nexport function isObject(value: any): value is object {\n    return typeof value === \"object\" && value !== null;\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\";\n}\n","import { EventEmitter } from \"@angular/core\";\nimport { AbstractControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicFormControlCustomEvent } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport {\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormControlTemplates\n} from \"../service/dynamic-form-layout.service\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicFormControlComponent implements DynamicFormControl {\n\n    private _hasFocus: boolean = false;\n\n    group: FormGroup;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n    templates: DynamicFormControlTemplates;\n\n    blur: EventEmitter<any>;\n    change: EventEmitter<any>;\n    customEvent: EventEmitter<DynamicFormControlCustomEvent> | undefined;\n    focus: EventEmitter<any>;\n\n    protected constructor(protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) {}\n\n    get control(): AbstractControl | never {\n\n        const control = this.group.get(this.model.id);\n\n        if (control === null) {\n            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);\n        }\n\n        return control as AbstractControl;\n    }\n\n    get elementId(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasFocus(): boolean {\n        return this._hasFocus;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.layout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onBlur($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = false;\n        this.blur.emit($event);\n    }\n\n    onChange($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this.change.emit($event);\n    }\n\n    onEmbeddedCheckboxChange($event: Event, model: DynamicCheckboxModel) {\n\n        this.onChange($event);\n\n        model.value = ($event.target as HTMLInputElement).checked;\n    }\n\n    onCustomEvent($event: any, type: string | null = null, bypass: boolean = false) {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlCustomEvent>;\n\n        if (bypass) {\n\n            emitter.emit($event);\n\n        } else if (isString(type)) {\n\n            emitter.emit({customEvent: $event, customEventType: type});\n        }\n    }\n\n    onFocus($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = true;\n        this.focus.emit($event);\n    }\n}\n","import { QueryList } from \"@angular/core\";\nimport { FormArray } from \"@angular/forms\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormArrayModel } from \"../model/form-array/dynamic-form-array.model\";\n\nexport abstract class DynamicFormArrayComponent extends DynamicFormControlComponent {\n\n    model: DynamicFormArrayModel;\n    templates: QueryList<DynamicTemplateDirective> | undefined;\n\n    get array(): FormArray {\n        return this.control as FormArray;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getStartTemplate(this.model, this.templates);\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getEndTemplate(this.model, this.templates);\n    }\n}\n","import { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport enum DynamicFormControlEventType {Blur = \"blur\", Change = \"change\", Custom = \"custom\", Focus = \"focus\"}\n\nexport interface DynamicFormControlEvent {\n\n    $event: Event | FocusEvent | DynamicFormControlEvent | any;\n    context: DynamicFormArrayGroupModel | null;\n    control: FormControl;\n    group: FormGroup;\n    model: DynamicFormControlModel;\n    type: string;\n}\n\nexport interface DynamicFormControlCustomEvent {\n\n    customEvent: any;\n    customEventType: string;\n}\n\nexport function isDynamicFormControlEvent($event: any): $event is DynamicFormControlEvent {\n    return isObject($event) && $event.hasOwnProperty(\"$event\");\n}","import { EventEmitter, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\nimport { DynamicFormControlEvent, DynamicFormControlEventType } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../model/dynamic-form.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"../service/dynamic-form.service\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\n\nexport abstract class DynamicFormComponent {\n\n    formGroup: FormGroup;\n    formModel: DynamicFormModel;\n    formLayout: DynamicFormLayout;\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    templates: QueryList<DynamicTemplateDirective>;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    focus: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent>;\n\n    protected constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {}\n\n    trackByFn(_index: number, model: DynamicFormControlModel): string {\n        return model.id;\n    }\n\n    getClass(model: DynamicFormControlModel, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.formLayout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onEvent($event: DynamicFormControlEvent, type: string) {\n\n        switch (type) {\n\n            case DynamicFormControlEventType.Blur:\n                this.blur.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Change:\n                this.change.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Focus:\n                this.focus.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Custom:\n                this.customEvent.emit($event);\n                break;\n        }\n    }\n}\n","import \"reflect-metadata\";\n\ndeclare let Reflect: any;\n\nexport const METADATA_KEY_SERIALIZABLE = \"SERIALIZABLE\";\n\nexport interface SerializableProperty {\n\n    key: string;\n    name: string;\n}\n\nexport function serializable(name?: string): (target: any, key: string) => void {\n\n    return function (target, key) {\n        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, {key: key, name: name || key}, target, key);\n    };\n}\n\nexport function getSerializables(target: any): SerializableProperty[] {\n\n    let serializables = [];\n\n    for (let key in target) {\n\n        let metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);\n\n        if (metadata) {\n            serializables.push(metadata);\n        }\n    }\n\n    return serializables;\n}\n\nexport function serialize(target: any, prototype?: any): Object {\n\n    return getSerializables(prototype || target).reduce((prev: any, prop: SerializableProperty) => {\n\n        prev[prop.name] = target[prop.key];\n\n        return prev;\n\n    }, {});\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"./misc/dynamic-form-control-path.model\";\nimport { DynamicFormControlRelation } from \"./misc/dynamic-form-control-relation.model\";\nimport { DynamicValidatorsConfig } from \"./misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject, isString } from \"../utils/core.utils\";\n\nexport type FormHooks = 'change' | 'blur' | 'submit';\n\nexport interface DynamicFormControlModelConfig {\n\n    asyncValidators?: DynamicValidatorsConfig;\n    disabled?: boolean;\n    errorMessages?: DynamicValidatorsConfig;\n    hidden?: boolean;\n    id: string;\n    label?: string;\n    labelTooltip?: string;\n    controlTooltip?: string;\n    name?: string;\n    relations?: DynamicFormControlRelation[];\n    updateOn?: FormHooks;\n    validators?: DynamicValidatorsConfig;\n}\n\nexport abstract class DynamicFormControlModel implements DynamicPathable {\n\n    @serializable() asyncValidators: DynamicValidatorsConfig | null;\n    @serializable(\"disabled\") _disabled: boolean;\n    @serializable() errorMessages: DynamicValidatorsConfig | null;\n    @serializable() hidden: boolean;\n    @serializable() id: string;\n    @serializable() label: string | null;\n    @serializable() labelTooltip: string | null;\n    @serializable() controlTooltip: string | null;\n    @serializable() layout: DynamicFormControlLayout | null;\n    @serializable() name: string;\n    parent: DynamicPathable | null = null;\n    @serializable() relations: DynamicFormControlRelation[];\n    @serializable() updateOn: FormHooks | null;\n    @serializable() validators: DynamicValidatorsConfig | null;\n\n    private readonly disabled$: BehaviorSubject<boolean>;\n\n    readonly disabledChanges: Observable<boolean>;\n\n    abstract readonly type: string;\n\n    protected constructor(config: DynamicFormControlModelConfig, layout: DynamicFormControlLayout | null = null) {\n\n        this.asyncValidators = config.asyncValidators || null;\n        this.errorMessages = config.errorMessages || null;\n        this.hidden = isBoolean(config.hidden) ? config.hidden : false;\n        this.id = config.id;\n        this.label = config.label || null;\n        this.labelTooltip = config.labelTooltip || null;\n        this.controlTooltip = config.controlTooltip || null;\n        this.layout = layout;\n        this.name = config.name || config.id;\n        this.relations = Array.isArray(config.relations) ? config.relations : [];\n        this.updateOn = isString(config.updateOn) ? config.updateOn : null;\n        this.validators = config.validators || null;\n\n        this.disabled$ = new BehaviorSubject(isBoolean(config.disabled) ? config.disabled : false);\n        this.disabled$.subscribe(disabled => this._disabled = disabled);\n        this.disabledChanges = this.disabled$.asObservable();\n    }\n\n    get disabled(): boolean {\n        return this.disabled$.getValue();\n    }\n\n    set disabled(disabled: boolean) {\n        this.disabled$.next(disabled);\n    }\n\n    get hasErrorMessages(): boolean {\n        return isObject(this.errorMessages);\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { DynamicFormControlModel, DynamicFormControlModelConfig } from \"./dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject } from \"../utils/core.utils\";\n\nexport interface DynamicFormValueControlModelConfig<T> extends DynamicFormControlModelConfig {\n\n    additional?: { [key: string]: any };\n    hint?: string;\n    required?: boolean;\n    tabIndex?: number;\n    value?: T;\n}\n\nexport abstract class DynamicFormValueControlModel<T> extends DynamicFormControlModel {\n\n    @serializable() additional: { [key: string]: any } | null;\n    @serializable() hint: string | null;\n    @serializable() required: boolean;\n    @serializable() tabIndex: number | null;\n    @serializable(\"value\") private _value: T | null;\n\n    private readonly value$: BehaviorSubject<T>;\n\n    readonly valueChanges: Observable<T>;\n\n    protected constructor(config: DynamicFormValueControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.additional = isObject(config.additional) ? config.additional : null;\n        this.hint = config.hint || null;\n        this.required = isBoolean(config.required) ? config.required : false;\n        this.tabIndex = config.tabIndex || null;\n\n        this.value$ = new BehaviorSubject(config.value !== null && config.value !== undefined ? config.value : null);\n        this.value$.subscribe(value => this._value = value);\n        this.valueChanges = this.value$.asObservable();\n    }\n\n    get value(): T | null {\n        return this.value$.getValue();\n    }\n\n    set value(value: T | null) {\n        this.value$.next(value);\n    }\n\n    getAdditional(key: string, defaultValue: any | null | undefined = undefined): any {\n        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;\n    }\n}\n","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"../misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\nimport { isFunction, isNumber } from \"../../utils/core.utils\";\n\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\n\n    $implicit: DynamicFormArrayGroupModel;\n    context: DynamicFormArrayModel;\n    @serializable() group: DynamicFormModel;\n    @serializable() index: number;\n\n    constructor(context: DynamicFormArrayModel, group: DynamicFormModel = [], index: number = -1) {\n\n        this.$implicit = this;\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    get parent(): DynamicFormArrayModel {\n        return this.context;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    groupAsyncValidators?: DynamicValidatorsConfig;\n    groupFactory?: () => DynamicFormModel;\n    groupValidators?: DynamicValidatorsConfig;\n    groups?: DynamicFormArrayGroupModel[] | null;\n    initialCount?: number;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() groupAsyncValidators: DynamicValidatorsConfig | null;\n    groupFactory: () => DynamicFormModel;\n    @serializable() groupValidators: DynamicValidatorsConfig | null;\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\n    @serializable() initialCount: number;\n\n    @serializable() readonly groupPrototype: DynamicFormModel; // only to recreate model from JSON\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        if (isFunction(config.groupFactory)) {\n            this.groupFactory = config.groupFactory;\n        } else {\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.groupAsyncValidators = config.groupAsyncValidators || null;\n        this.groupPrototype = this.groupFactory();\n        this.groupValidators = config.groupValidators || null;\n        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\n            });\n\n        } else {\n\n            for (let index = 0; index < this.initialCount; index++) {\n                this.addGroup();\n            }\n        }\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    moveGroup(index: number, step: number): void {\n\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\n        this.updateGroupIndex();\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n\n    clear(): void {\n        this.groups.splice(0);\n        this.updateGroupIndex();\n    }\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicCheckControlModelConfig extends DynamicFormValueControlModelConfig<boolean> {\n\n    labelPosition?: string;\n}\n\nexport abstract class DynamicCheckControlModel extends DynamicFormValueControlModel<boolean> {\n\n    @serializable() labelPosition: string | null;\n\n    protected constructor(config: DynamicCheckControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.labelPosition = config.labelPosition || null;\n        this.checked = isBoolean(this.value) ? this.value : false;\n    }\n\n    get checked(): boolean {\n        return this.value;\n    }\n\n    set checked(checked: boolean) {\n        this.value = checked;\n    }\n\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n}\n","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = \"CHECKBOX\";\n\nexport interface DynamicCheckboxModelConfig extends DynamicCheckControlModelConfig {\n\n    indeterminate?: boolean;\n}\n\nexport class DynamicCheckboxModel extends DynamicCheckControlModel {\n\n    @serializable() indeterminate: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n\n    constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;\n    }\n}","export const AUTOCOMPLETE_OFF = \"off\";\nexport const AUTOCOMPLETE_ON = \"on\";\n\nexport const AUTOFILL_TOKEN_BILLING = \"billing\";\nexport const AUTOFILL_TOKEN_SHIPPING = \"shipping\";\n\nexport const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];\n\nexport const AUTOFILL_TOKEN_HOME = \"home\";\nexport const AUTOFILL_TOKEN_WORK = \"work\";\nexport const AUTOFILL_TOKEN_MOBILE = \"mobile\";\nexport const AUTOFILL_TOKEN_FAX = \"fax\";\nexport const AUTOFILL_TOKEN_PAGER = \"pager\";\n\nexport const AUTOFILL_TOKENS_CONTACT = [\n    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK\n];\n\nexport const AUTOFILL_FIELD_STREET_ADDRESS = \"street-address\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_1 = \"address-line1\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_2 = \"address-line2\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_3 = \"address-line3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = \"address-level4\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = \"address-level3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = \"address-level2\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = \"address-level1\";\n\nexport const AUTOFILL_FIELD_NAME = \"name\";\nexport const AUTOFILL_FIELD_HONORIFIC_PREFIX = \"honorific-prefix\";\nexport const AUTOFILL_FIELD_GIVEN_NAME = \"given-name\";\nexport const AUTOFILL_FIELD_ADDITIONAL_NAME = \"additional-name\";\nexport const AUTOFILL_FIELD_FAMILY_NAME = \"family-name\";\nexport const AUTOFILL_FIELD_HONORIFIC_SUFFIX = \"honorific-suffix\";\nexport const AUTOFILL_FIELD_NICKNAME = \"nickname\";\nexport const AUTOFILL_FIELD_USERNAME = \"username\";\n\nexport const AUTOFILL_FIELD_NEW_PASSWORD = \"new-password\";\nexport const AUTOFILL_FIELD_CURRENT_PASSWORD = \"current-password\";\n\nexport const AUTOFILL_FIELD_ORGANIZATION_TITLE = \"organization-title\";\nexport const AUTOFILL_FIELD_ORGANIZATION = \"organization\";\n\nexport const AUTOFILL_FIELD_COUNTRY = \"country\";\nexport const AUTOFILL_FIELD_COUNTRY_NAME = \"country-name\";\nexport const AUTOFILL_FIELD_POSTAL_CODE = \"postal-code\";\n\nexport const AUTOFILL_FIELD_CC_NAME = \"cc-name\";\nexport const AUTOFILL_FIELD_CC_GIVEN_NAME = \"cc-given-name\";\nexport const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = \"cc-additional-name\";\nexport const AUTOFILL_FIELD_CC_FAMILY_NAME = \"cc-family-name\";\nexport const AUTOFILL_FIELD_CC_NUMBER = \"cc-number\";\nexport const AUTOFILL_FIELD_CC_EXP = \"cc-exp\";\nexport const AUTOFILL_FIELD_CC_EXP_MONTH = \"cc-exp-month\";\nexport const AUTOFILL_FIELD_CC_EXP_YEAR = \"cc-exp-year\";\nexport const AUTOFILL_FIELD_CC_CSC = \"cc-csc\";\nexport const AUTOFILL_FIELD_CC_TYPE = \"cc-type\";\n\nexport const AUTOFILL_FIELD_TRANSACTION_CURRENCY = \"transaction-currency\";\nexport const AUTOFILL_FIELD_TRANSACTION_AMOUNT = \"transaction-amount\";\n\nexport const AUTOFILL_FIELD_LANGUAGE = \"language\";\n\nexport const AUTOFILL_FIELD_BDAY = \"bday\";\nexport const AUTOFILL_FIELD_BDAY_DAY = \"bday-day\";\nexport const AUTOFILL_FIELD_BDAY_MONTH = \"bday-month\";\nexport const AUTOFILL_FIELD_BDAY_YEAR = \"bday-year\";\n\nexport const AUTOFILL_FIELD_SEX = \"sex\";\n\nexport const AUTOFILL_FIELD_URL = \"url\";\n\nexport const AUTOFILL_FIELD_PHOTO = \"photo\";\n\nexport const AUTOFILL_FIELDS = [\n\n    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,\n    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,\n    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,\n    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,\n    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,\n    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,\n    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,\n    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,\n    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,\n    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO\n];\n\nexport const AUTOFILL_FIELD_TEL = \"tel\";\nexport const AUTOFILL_FIELD_TEL_COUNTRY_CODE = \"tel-country-code\";\nexport const AUTOFILL_FIELD_TEL_NATIONAL = \"tel-national\";\nexport const AUTOFILL_FIELD_TEL_AREA_CODE = \"tel-area-code\";\nexport const AUTOFILL_FIELD_TEL_LOCAL = \"tel-local\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = \"tel-local-prefix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = \"tel-local-suffix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = \"tel-extension\";\nexport const AUTOFILL_FIELD_EMAIL = \"email\";\nexport const AUTOFILL_FIELD_IMPP = \"impp\";\n\nexport const AUTOFILL_FIELDS_CONTACT = [\n\n    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,\n    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,\n    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP\n];\n\nexport function isAddressToken(token: string): boolean {\n    return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;\n}\n\nexport function isContactField(token: string): boolean {\n    return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isContactToken(token: string): boolean {\n    return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isField(token: string): boolean {\n    return AUTOFILL_FIELDS.indexOf(token) > -1;\n}\n\nexport function isSectionToken(token: string): boolean {\n    return token.startsWith(\"section-\");\n}\n\nexport function validate(tokens: string): boolean {\n\n    let toExpression = (total: string, currentValue: string) => `${total}|${currentValue}`,\n        tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression),\n        tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression),\n        fields = AUTOFILL_FIELDS.reduce(toExpression),\n        fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression),\n        regex = new RegExp(`^(section-\\\\w+\\\\s{1})?((${tokensAddress}){1}\\\\s)?((${fields}){1}|((${tokensContact}){1}\\\\s{1}(${fieldsContact})))$`);\n\n    return regex.test(tokens);\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { AUTOCOMPLETE_ON } from \"../utils/autofill.utils\";\nimport { isBoolean, isNumber } from \"../utils/core.utils\";\n\nexport interface DynamicInputControlModelConfig<T> extends DynamicFormValueControlModelConfig<T> {\n\n    autoComplete?: string;\n    autoFocus?: boolean;\n    maxLength?: number;\n    minLength?: number;\n    placeholder?: string;\n    prefix?: string;\n    readOnly?: boolean;\n    spellCheck?: boolean;\n    suffix?: string;\n}\n\nexport abstract class DynamicInputControlModel<T> extends DynamicFormValueControlModel<T> {\n\n    @serializable() autoComplete: string;\n    @serializable() autoFocus: boolean;\n    @serializable() maxLength: number | null;\n    @serializable() minLength: number | null;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() spellCheck: boolean;\n    @serializable() suffix: string | null;\n\n    protected constructor(config: DynamicInputControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;\n        this.minLength = isNumber(config.minLength) ? config.minLength : null;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;\n        this.suffix = config.suffix || null;\n    }\n}","import { isString } from \"./core.utils\";\n\nexport function maskToString(mask: string | RegExp | (string | RegExp)[]): string | string[] | null {\n\n    if (isString(mask)) {\n\n        return mask as string;\n\n    } else if (mask instanceof RegExp) {\n\n        return mask.toString();\n\n    } else if (Array.isArray(mask)) {\n\n        return mask.map(value => maskToString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function maskFromString(mask: string | string[]): string | RegExp | (string | RegExp)[] | null {\n\n    if (isString(mask)) {\n\n        let isRegExp = (mask as string).startsWith(\"/\") && (mask as string).endsWith(\"/\");\n\n        return isRegExp ? new RegExp((mask as string).slice(1, mask.length - 1)) : mask;\n\n    } else if (Array.isArray(mask)) {\n\n        return (mask as string[]).map(value => maskFromString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function parseReviver(_key: string, value: any): any {\n\n    let regexDateISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|([+\\-])([\\d|:]*))?$/;\n\n    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { maskToString } from \"../../utils/json.utils\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\nimport { Observable, isObservable, of } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_INPUT = \"INPUT\";\n\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = \"color\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = \"date\";\n//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = \"datetime\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = \"datetime-local\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = \"email\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = \"file\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = \"month\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = \"number\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = \"password\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = \"range\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = \"search\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = \"tel\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = \"text\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = \"time\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = \"url\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = \"week\";\n\nexport interface DynamicInputModelConfig extends DynamicInputControlModelConfig<string | number | Date | string[]> {\n\n    accept?: string;\n    inputType?: string;\n    list?: any[] | Observable<any[]>;\n    mask?: string | RegExp | Function | (string | RegExp)[];\n    max?: number | string | Date;\n    min?: number | string | Date;\n    multiple?: boolean;\n    pattern?: string;\n    step?: number;\n}\n\nexport class DynamicInputModel extends DynamicInputControlModel<string | number | Date | string[]> {\n\n    @serializable() accept: string | null;\n    @serializable() inputType: string;\n    files: FileList | null = null;\n    list$: Observable<any[]> | null = null;\n    @serializable() mask: string | RegExp | Function | (string | RegExp)[] | null;\n    @serializable() max: number | string | Date | null;\n    @serializable() min: number | string | Date | null;\n    @serializable() multiple: boolean | null;\n    @serializable() pattern: string | null;\n    @serializable() step: number | null;\n\n    @serializable(\"list\") private _list: any[] | null = null;\n    private readonly _listId: string | null = null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_INPUT;\n\n    constructor(config: DynamicInputModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = config.accept || null;\n        this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;\n        this.mask = config.mask || null;\n        this.max = config.max !== undefined ? config.max : null;\n        this.min = config.min !== undefined ? config.min : null;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : null;\n        this.pattern = config.pattern || null;\n        this.step = isNumber(config.step) ? config.step : null;\n\n        if (config.list !== undefined) {\n\n            this.list = config.list;\n            this._listId = `${this.id}List`;\n        }\n    }\n\n    get listId(): string | null {\n        return this._listId;\n    }\n\n    get hasList(): boolean {\n        return isObservable(this.list$);\n    }\n\n    set list(list: any[] | Observable<any[]> | null) {\n\n        if (Array.isArray(list)) {\n\n            this._list = list;\n            this.list$ = of(this._list);\n\n        } else if (isObservable(list)) {\n\n            this.list$ = (list as Observable<any[]>).pipe(tap(list => this._list = list));\n\n        } else {\n\n            this._list = null;\n            this.list$ = null;\n        }\n    }\n\n    toJSON() {\n\n        let json: any = super.toJSON();\n\n        if (this.mask !== null) { \n            if (this.mask instanceof Function) {\n                json.mask = this.mask;\n            } else {\n                json.mask = maskToString(this.mask);\n            }\n        }\n\n        return json;\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n    QueryList,\n    SimpleChange,\n    SimpleChanges,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    DynamicFormControlCustomEvent,\n    DynamicFormControlEvent,\n    DynamicFormControlEventType,\n    isDynamicFormControlEvent\n} from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DynamicInputModel\n} from \"../model/input/dynamic-input.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"../service/dynamic-form-component.service\";\nimport { isString } from \"../utils/core.utils\";\nimport { DynamicFormRelationService } from \"../service/dynamic-form-relation.service\";\n\nexport abstract class DynamicFormControlContainerComponent implements OnChanges, OnDestroy {\n\n    context: DynamicFormArrayGroupModel | null = null;\n    control: FormControl;\n    group: FormGroup;\n    hasFocus: boolean;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n\n    contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n    inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent> | undefined;\n    focus: EventEmitter<DynamicFormControlEvent>;\n\n    componentViewContainerRef: ViewContainerRef;\n\n    protected componentRef: ComponentRef<DynamicFormControl>;\n    protected componentSubscriptions: Subscription[] = [];\n    protected subscriptions: Subscription[] = [];\n\n    protected constructor(protected componentFactoryResolver: ComponentFactoryResolver,\n                          protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService,\n                          protected componentService: DynamicFormComponentService,\n                          protected relationService: DynamicFormRelationService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        const groupChange = changes[\"group\"] as SimpleChange,\n              modelChange = changes[\"model\"] as SimpleChange;\n\n        if (modelChange) {\n\n            this.destroyFormControlComponent();\n            this.createFormControlComponent();\n        }\n\n        if (groupChange || modelChange) {\n\n            if (this.model) {\n\n                this.unsubscribe();\n\n                if (this.group) {\n\n                    this.control = this.group.get(this.model.id) as FormControl;\n                    this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));\n                }\n\n                this.subscriptions.push(this.model.disabledChanges.subscribe(value => this.onModelDisabledUpdates(value)));\n\n                if (this.model instanceof DynamicFormValueControlModel) {\n\n                    const model = this.model as DynamicFormValueControlModel<any>;\n\n                    this.subscriptions.push(model.valueChanges.subscribe(value => this.onModelValueUpdates(value)));\n                }\n\n                if (this.model.relations.length > 0) {\n\n                    this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));\n                }\n            }\n        }\n    }\n\n    ngOnDestroy() {\n\n        this.destroyFormControlComponent();\n        this.unsubscribe();\n    }\n\n    abstract get componentType(): Type<DynamicFormControl> | null;\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasHint(): boolean {\n        return isString((this.model as DynamicFormValueControlModel<any>).hint);\n    }\n\n    get hint(): string | null {\n        return (this.model as DynamicFormValueControlModel<any>).hint || null;\n    }\n\n    get hasLabel(): boolean {\n        return isString(this.model.label);\n    }\n\n    get isCheckbox(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n    }\n\n    get elementId(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    get templates(): QueryList<DynamicTemplateDirective> | undefined {\n        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.layout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    protected createFormControlComponent(): void {\n\n        let componentType = this.componentType;\n\n        if (componentType !== null) {\n\n            let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n            this.componentViewContainerRef.clear();\n            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);\n\n            let instance = this.componentRef.instance;\n\n            instance.group = this.group;\n            instance.layout = this.layout;\n            instance.model = this.model as any;\n\n            if (this.templates) {\n                instance.templates = this.templates;\n            }\n\n            this.componentSubscriptions.push(instance.blur.subscribe(($event: any) => this.onBlur($event)));\n            this.componentSubscriptions.push(instance.change.subscribe(($event: any) => this.onChange($event)));\n            this.componentSubscriptions.push(instance.focus.subscribe(($event: any) => this.onFocus($event)));\n\n            if (instance.customEvent !== undefined) {\n                this.componentSubscriptions.push(\n                    instance.customEvent.subscribe(($event: any) => this.onCustomEvent($event)));\n            }\n\n            this.registerComponentRef(this.componentRef);\n        }\n    }\n\n    protected destroyFormControlComponent(): void {\n\n        if (this.componentRef) {\n\n            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\n            this.componentSubscriptions = [];\n\n            this.unregisterComponentRef();\n            this.componentRef.destroy();\n        }\n    }\n\n    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent {\n        return {$event, context: this.context, control: this.control, group: this.group, model: this.model, type};\n    }\n\n    unsubscribe(): void {\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    onControlValueChanges(value: any): void {\n\n        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {\n            this.model.value = value;\n        }\n    }\n\n    onModelValueUpdates(value: any): void {\n\n        if (this.control.value !== value) {\n            this.control.setValue(value);\n        }\n    }\n\n    onModelDisabledUpdates(disabled: boolean): void {\n        disabled ? this.control.disable() : this.control.enable();\n    }\n\n    onChange($event: Event | DynamicFormControlEvent | any): void {\n\n        if ($event instanceof Event) { // native HTML5 change event\n\n            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\n\n                let model = this.model as DynamicInputModel;\n\n                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\n\n                    let inputElement: any = $event.target || $event.srcElement;\n\n                    model.files = inputElement.files as FileList;\n                }\n            }\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n\n        } else if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.change.emit($event);\n\n        } else { // custom library value change event\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n        }\n    }\n\n    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.blur.emit($event);\n\n        } else { // native HTML 5 or UI library blur event\n\n            this.hasFocus = false;\n            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));\n        }\n    }\n\n    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.focus.emit($event);\n\n        } else { // native HTML 5 or UI library focus event\n\n            this.hasFocus = true;\n            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));\n        }\n    }\n\n    onCustomEvent($event: DynamicFormControlEvent | DynamicFormControlCustomEvent): void {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlEvent>;\n\n        if (isDynamicFormControlEvent($event)) { // child event bypass\n\n            emitter.emit($event);\n\n        } else { // native UI library custom event\n\n            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));\n        }\n    }\n\n    private registerComponentRef(instanceRef: ComponentRef<DynamicFormControl>): void {\n\n        let index;\n\n        if (this.context instanceof DynamicFormArrayGroupModel) {\n            index = this.context.index;\n        }\n\n        this.componentService.registerFormControlRef(this.model, instanceRef, index);\n    }\n\n    private unregisterComponentRef(): void {\n\n        let index;\n\n        if (this.context instanceof DynamicFormArrayGroupModel) {\n            index = this.context.index;\n        }\n\n        this.componentService.unregisterFormControlRef(this.model.id, index);\n    }\n}\n","import { AfterViewInit, QueryList, TemplateRef } from \"@angular/core\";\nimport { DynamicTemplateableFormControl } from \"./dynamic-templateable-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicTemplateableFormControlComponent extends DynamicFormControlComponent implements DynamicTemplateableFormControl, AfterViewInit {\n\n    readonly templateDirectives: Map<string, string>;\n\n    templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n    ngAfterViewInit() {\n\n        this.layoutService\n            .filterTemplatesByModel(this.model, this.templates)\n            .forEach(template => this.bindTemplate(template));\n    }\n\n    abstract get viewChild(): any;\n\n    abstract mapTemplate(template: DynamicTemplateDirective): DynamicTemplateDirective | TemplateRef<any>;\n\n    bindTemplate(template: DynamicTemplateDirective) {\n\n        if (isString(template.as) && this.templateDirectives.has(template.as)) {\n\n            let property = this.templateDirectives.get(template.as) as string;\n\n            this.viewChild[property] = this.mapTemplate(template);\n        }\n    }\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\n\n@Directive({\n    selector: \"[dynamicId]\"\n})\nexport class DynamicIdDirective implements AfterViewInit {\n\n    @Input() dynamicId: string | boolean;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (this.dynamicId) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"id\", this.dynamicId as string);\n        }\n    }\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\nimport { isString } from \"../utils/core.utils\";\n\n@Directive({\n    selector: \"[dynamicList]\"\n})\nexport class DynamicListDirective implements AfterViewInit {\n\n    @Input(\"dynamicList\") listId: string | null;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (isString(this.listId)) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"list\", this.listId as string);\n        }\n    }\n}","import { Directive, Input, TemplateRef } from \"@angular/core\";\n\nexport enum DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT { Start = \"START\", End = \"END\"}\n\n@Directive({\n    selector: \"ng-template[modelId],ng-template[modelType]\"\n})\nexport class DynamicTemplateDirective {\n\n    @Input() align: string = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;\n    @Input() as: string | null = null;\n    @Input() index: number | undefined;\n    @Input() modelId: string;\n    @Input() modelType: string;\n\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport type DynamicDateControlValue = string | object | Date;\n\nexport interface DynamicDateControlModelConfig extends DynamicFormValueControlModelConfig<DynamicDateControlValue> {\n\n    format?: string;\n    max?: DynamicDateControlValue;\n    min?: DynamicDateControlValue;\n    placeholder?: string;\n}\n\nexport abstract class DynamicDateControlModel extends DynamicFormValueControlModel<DynamicDateControlValue> {\n\n    @serializable() format: string | null;\n    @serializable() max: DynamicDateControlValue | null;\n    @serializable() min: DynamicDateControlValue | null;\n    @serializable() placeholder: string | null;\n\n    protected constructor(config: DynamicDateControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = config.format || null;\n        this.max = config.max || null;\n        this.min = config.min || null;\n        this.placeholder = config.placeholder || null;\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFileControlModelConfig extends DynamicFormValueControlModelConfig<File | File[]> {\n\n    multiple?: boolean;\n}\n\nexport abstract class DynamicFileControlModel extends DynamicFormValueControlModel<File | File[]> {\n\n    @serializable() multiple: boolean;\n\n    protected constructor(config: DynamicFileControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n    }\n}","import { Observable, isObservable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFormOptionConfig<T> {\n\n    disabled?: boolean;\n    label?: string;\n    value: T;\n}\n\nexport class DynamicFormOption<T> {\n\n    @serializable() disabled: boolean;\n    @serializable() label: string | null;\n    @serializable() value: T;\n\n    constructor(config: DynamicFormOptionConfig<T>) {\n\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\n        this.label = config.label || null;\n        this.value = config.value;\n    }\n\n    get text() {\n        return this.label;\n    }\n\n    set text(text: string | null) {\n        this.label = text;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport interface DynamicOptionControlModelConfig<T> extends DynamicFormValueControlModelConfig<T | T[]> {\n\n    options?: DynamicFormOptionConfig<T>[] | Observable<DynamicFormOptionConfig<T>[]>;\n}\n\nexport abstract class DynamicOptionControlModel<T> extends DynamicFormValueControlModel<T | T[]> {\n\n    @serializable(\"options\") private _options: DynamicFormOption<T>[] = [];\n    options$: Observable<DynamicFormOption<T>[]>;\n\n    protected constructor(config: DynamicOptionControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.options = config.options;\n    }\n\n    private updateOptions$(): void {\n        this.options$ = of(this.options);\n    }\n\n    set options(options: any) {\n\n        if (Array.isArray(options)) {\n\n            this._options = (options as DynamicFormOptionConfig<T>[]).map(optionConfig => {\n                return new DynamicFormOption<T>(optionConfig);\n            });\n\n            this.updateOptions$();\n\n        } else if (isObservable(options)) {\n\n            this.options$ = (options as Observable<DynamicFormOptionConfig<T>[]>).pipe(\n                map(optionsConfig => {\n\n                    let options = optionsConfig.map(optionConfig => new DynamicFormOption<T>(optionConfig));\n\n                    this._options = options;\n\n                    return options;\n                }));\n\n        } else {\n\n            this.updateOptions$();\n        }\n    }\n\n    get options(): any {\n        return this._options;\n    }\n\n    add(optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n        return this.insert(this.options.length, optionConfig);\n    }\n\n    get(index: number): DynamicFormOption<T> {\n        return this.options[index];\n    }\n\n    insert(index: number, optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n\n        let option = new DynamicFormOption(optionConfig);\n\n        this.options.splice(index, 0, option);\n        this.updateOptions$();\n\n        return option;\n    }\n\n    remove(...indices: number[]): void {\n\n        indices.forEach(index => this.options.splice(index, 1));\n        this.updateOptions$();\n    }\n\n    abstract select(...indices: number[]): void;\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_GROUP = \"GROUP\";\n\nexport interface DynamicFormGroupModelConfig extends DynamicFormControlModelConfig {\n\n    group?: DynamicFormModel;\n    legend?: string;\n}\n\nexport class DynamicFormGroupModel extends DynamicFormControlModel {\n\n    @serializable() group: DynamicFormModel = [];\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.group = Array.isArray(config.group) ? config.group : [];\n        this.legend = config.legend || null;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    set(index: number, controlModel: DynamicFormControlModel,): void {\n        this.group[index] = controlModel;\n    }\n\n    add(controlModel: DynamicFormControlModel): void {\n        this.group.push(controlModel);\n    }\n\n    insert(index: number, controlModel: DynamicFormControlModel): void {\n        this.group.splice(index, 0, controlModel);\n    }\n\n    move(index: number, step: number): void {\n        this.group.splice(index + step, 0, ...this.group.splice(index, 1));\n    }\n\n    remove(index: number) {\n        this.group.splice(index, 1);\n    }\n\n    size(): number {\n        return this.group.length;\n    }\n}\n","import { DynamicFormGroupModel, DynamicFormGroupModelConfig } from \"../form-group/dynamic-form-group.model\";\nimport { DynamicCheckboxModel } from \"./dynamic-checkbox.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = \"CHECKBOX_GROUP\";\n\nexport class DynamicCheckboxGroupModel extends DynamicFormGroupModel {\n\n    @serializable() group: DynamicCheckboxModel[];\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n        super(config, layout);\n    }\n\n    check(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = true);\n    }\n\n    uncheck(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = false);\n    }\n\n    checkAll(): void {\n        this.group.forEach(model => model.checked = true);\n    }\n\n    uncheckAll(): void {\n        this.group.forEach(model => model.checked = false);\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = \"COLORPICKER\";\n\nexport interface DynamicColorPickerModelConfig extends DynamicFormValueControlModelConfig<string | object> {\n\n    format?: string;\n    inline?: boolean;\n}\n\nexport class DynamicColorPickerModel extends DynamicFormValueControlModel<string | object> {\n\n    @serializable() format: string | null;\n    @serializable() inline: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;\n\n    constructor(config: DynamicColorPickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = isString(config.format) ? config.format : null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n    }\n}","import {\n    DynamicDateControlModel,\n    DynamicDateControlModelConfig,\n    DynamicDateControlValue\n} from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = \"DATEPICKER\";\n\nexport interface DynamicDatePickerModelConfig extends DynamicDateControlModelConfig {\n\n    autoFocus?: boolean;\n    focusedDate?: DynamicDateControlValue;\n    inline?: boolean;\n    prefix?: string;\n    readOnly?: boolean;\n    suffix?: string;\n    toggleIcon?: string;\n    toggleLabel?: string;\n}\n\nexport class DynamicDatePickerModel extends DynamicDateControlModel {\n\n    @serializable() autoFocus: boolean;\n    @serializable() focusedDate: DynamicDateControlValue | null;\n    @serializable() inline: boolean;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() suffix: string | null;\n    @serializable() toggleIcon: string | null;\n    @serializable() toggleLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;\n\n    constructor(config: DynamicDatePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.focusedDate = config.focusedDate || null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n        this.prefix = config.prefix || null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;\n        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;\n        this.suffix = config.suffix || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = \"EDITOR\";\n\nexport interface DynamicEditorModelConfig extends DynamicInputControlModelConfig<string> {\n}\n\nexport class DynamicEditorModel extends DynamicInputControlModel<string> {\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;\n\n    constructor(config: DynamicEditorModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n    }\n}","import { DynamicFileControlModelConfig, DynamicFileControlModel } from \"../dynamic-file-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = \"FILE_UPLOAD\";\n\nexport interface DynamicFileUploadModelConfig extends DynamicFileControlModelConfig {\n\n    accept?: string[];\n    autoUpload?: boolean;\n    maxSize?: number;\n    minSize?: number;\n    removeUrl?: string;\n    showFileList?: boolean;\n    url?: string;\n}\n\nexport class DynamicFileUploadModel extends DynamicFileControlModel {\n\n    @serializable() accept: string[] | null;\n    @serializable() autoUpload: boolean;\n    @serializable() maxSize: number | null;\n    @serializable() minSize: number | null;\n    @serializable() removeUrl: string | null;\n    @serializable() showFileList: boolean;\n    @serializable() url: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;\n\n    constructor(config: DynamicFileUploadModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = Array.isArray(config.accept) ? config.accept : null;\n        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;\n        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;\n        this.minSize = isNumber(config.minSize) ? config.minSize : null;\n        this.removeUrl = config.removeUrl || null;\n        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;\n        this.url = config.url || null;\n    }\n}","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = \"RADIO_GROUP\";\n\nexport interface DynamicRadioGroupModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    legend?: string;\n}\n\nexport class DynamicRadioGroupModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\n\n    constructor(config: DynamicRadioGroupModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.legend = config.legend || null;\n    }\n\n    select(index: number): void {\n        this.value = this.get(index).value;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RATING = \"RATING\";\n\nexport interface DynamicRatingModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n}\n\nexport class DynamicRatingModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RATING;\n\n    constructor(config: DynamicRatingModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n    }\n}","import { ÉµlooseIdentical as looseIdentical } from \"@angular/core\";\nimport { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isFunction } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\n\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    compareWithFn?: (o1: any, o2: any) => boolean;\n    filterable?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n    prefix?: string;\n    suffix?: string;\n}\n\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\n\n    compareWithFn: (value1: any, value2: any) => boolean;\n    @serializable() filterable: boolean;\n    @serializable() multiple: boolean;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() suffix: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\n\n    constructor(config: DynamicSelectModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;\n        this.filterable = isBoolean(config.filterable) ? config.filterable : false;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.suffix = config.suffix || null;\n    }\n\n    select(...indices: number[]): void {\n\n        const value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\n\n        this.value = value;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = \"SLIDER\";\n\nexport interface DynamicSliderModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n    min?: number;\n    step?: number;\n    vertical?: boolean;\n}\n\nexport class DynamicSliderModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n    @serializable() min: number | null;\n    @serializable() step: number | null;\n    @serializable() vertical: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;\n\n    constructor(config: DynamicSliderModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n        this.min = isNumber(config.min) ? config.min : 0;\n        this.step = isNumber(config.step) ? config.step : 1;\n        this.vertical = isBoolean(config.vertical) ? config.vertical : false;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = \"SWITCH\";\n\nexport interface DynamicSwitchModelConfig extends DynamicCheckControlModelConfig {\n\n    offLabel?: string;\n    onLabel?: string;\n}\n\nexport class DynamicSwitchModel extends DynamicCheckControlModel {\n\n    @serializable() offLabel: string | null;\n    @serializable() onLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\n\n    constructor(config: DynamicSwitchModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.offLabel = config.offLabel || null;\n        this.onLabel = config.onLabel || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = \"TEXTAREA\";\n\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = \"hard\";\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = \"soft\";\n\nexport interface DynamicTextAreaModelConfig extends DynamicInputControlModelConfig<string> {\n\n    cols?: number;\n    rows?: number;\n    wrap?: string;\n}\n\nexport class DynamicTextAreaModel extends DynamicInputControlModel<string> {\n\n    @serializable() cols: number;\n    @serializable() rows: number;\n    @serializable() wrap: string;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;\n\n    constructor(config: DynamicTextAreaModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.cols = isNumber(config.cols) ? config.cols : 20;\n        this.rows = isNumber(config.rows) ? config.rows : 2;\n        this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;\n    }\n}","import { DynamicDateControlModel, DynamicDateControlModelConfig } from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = \"TIMEPICKER\";\n\nexport interface DynamicTimePickerModelConfig extends DynamicDateControlModelConfig {\n\n    meridian?: boolean;\n    showSeconds?: boolean;\n}\n\nexport class DynamicTimePickerModel extends DynamicDateControlModel {\n\n    @serializable() meridian: boolean;\n    @serializable() showSeconds: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;\n\n    constructor(config: DynamicTimePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.meridian = isBoolean(config.meridian) ? config.meridian : false;\n        this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;\n    }\n}","import { InjectionToken } from \"@angular/core\";\nimport { AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\n\nexport type Validator = ValidatorFn | AsyncValidatorFn;\n\nexport type ValidatorFactory = (args: any) => Validator;\n\nexport type ValidatorsToken = Validator[];\n\nexport type ValidatorsMap = Map<string, Validator | ValidatorFactory>;\n\nexport const DYNAMIC_VALIDATORS = new InjectionToken<ValidatorsMap>(\"DYNAMIC_VALIDATORS\");\n","import { Injectable, Inject, Optional } from \"@angular/core\";\nimport {\n    AbstractControl,\n    AsyncValidatorFn,\n    ValidatorFn,\n    Validators,\n    NG_VALIDATORS,\n    NG_ASYNC_VALIDATORS\n} from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicValidatorDescriptor,\n    DynamicValidatorsConfig\n} from \"../model/misc/dynamic-form-control-validation.model\";\nimport { isObject, isString } from \"../utils/core.utils\";\nimport { DYNAMIC_VALIDATORS, Validator, ValidatorFactory, ValidatorsToken } from \"./dynamic-form.validators\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormValidationService {\n\n    constructor(@Optional() @Inject(NG_VALIDATORS) private NG_VALIDATORS: ValidatorFn[],\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private NG_ASYNC_VALIDATORS: AsyncValidatorFn[],\n                @Optional() @Inject(DYNAMIC_VALIDATORS) private DYNAMIC_VALIDATORS: Map<string, Validator | ValidatorFactory>) {}\n\n\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\n                           validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator | never {\n\n        let validatorFn: ValidatorFactory | Validator | undefined;\n\n        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators\n\n            validatorFn = (Validators as any)[validatorName];\n\n        } else { // Custom Validators\n\n            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {\n                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);\n\n            } else if (validatorsToken) {\n                validatorFn = validatorsToken.find(validatorFn => validatorFn.name === validatorName);\n            }\n        }\n\n        if (validatorFn === undefined) { // throw when no validator could be resolved\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);\n        }\n\n        if (validatorArgs !== null) {\n            return (validatorFn as ValidatorFactory)(validatorArgs);\n        }\n\n        return validatorFn as Validator;\n    }\n\n\n    private getValidatorFns(validatorsConfig: DynamicValidatorsConfig,\n                            validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator[] {\n\n        let validatorFns: Validator[] = [];\n\n        if (isObject(validatorsConfig)) {\n\n            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {\n\n                let validatorConfigValue = (validatorsConfig as DynamicValidatorsConfig)[validatorConfigKey];\n\n                if (this.isValidatorDescriptor(validatorConfigValue)) {\n\n                    let descriptor = validatorConfigValue as DynamicValidatorDescriptor;\n\n                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);\n                }\n\n                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);\n            });\n        }\n\n        return validatorFns;\n    }\n\n\n    private parseErrorMessageConfig(template: string, model: DynamicFormControlModel, error: any = null): string {\n\n        return template.replace(/{{\\s*(.+?)\\s*}}/mg, (_match: string, expression: string) => {\n\n            let propertySource: any = model,\n                propertyName: string = expression;\n\n            if (expression.indexOf(\"validator.\") >= 0 && error) {\n\n                propertySource = error;\n                propertyName = expression.replace(\"validator.\", \"\");\n            }\n\n            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?\n                propertySource[propertyName] : null;\n        });\n    }\n\n\n    getValidator(validatorName: string, validatorArgs: any = null): ValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\n    }\n\n\n    getAsyncValidator(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn;\n    }\n\n\n    getValidators(validatorsConfig: DynamicValidatorsConfig): ValidatorFn[] {\n        return this.getValidatorFns(validatorsConfig) as ValidatorFn[];\n    }\n\n\n    getAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig): AsyncValidatorFn[] {\n        return this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn[];\n    }\n\n\n    updateValidators(validatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                     model: DynamicFormControlModel): void {\n\n        model.validators = validatorsConfig;\n\n        if (validatorsConfig === null) {\n\n            control.clearValidators();\n\n        } else {\n            control.setValidators(this.getValidators(validatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n\n    updateAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                          model: DynamicFormControlModel): void {\n\n        model.asyncValidators = asyncValidatorsConfig;\n\n        if (asyncValidatorsConfig === null) {\n\n            control.clearAsyncValidators();\n\n        } else {\n            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n\n    createErrorMessages(control: AbstractControl, model: DynamicFormControlModel): string[] {\n\n        let messages: string[] = [];\n\n        if (model.hasErrorMessages) {\n\n            let messagesConfig = model.errorMessages as DynamicValidatorsConfig;\n\n            Object.keys(control.errors || {}).forEach(validationErrorKey => {\n\n                let messageKey = validationErrorKey;\n\n                if (validationErrorKey === \"minlength\" || validationErrorKey === \"maxlength\") {\n                    messageKey = messageKey.replace(\"length\", \"Length\");\n                }\n\n                if (messagesConfig.hasOwnProperty(messageKey)) {\n\n                    let validationError = control.getError(validationErrorKey),\n                        messageTemplate = messagesConfig[messageKey] as string;\n\n                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));\n                }\n            });\n        }\n\n        return messages;\n    }\n\n\n    isFormHook(value: any): boolean {\n        return isString(value) && [\"blur\", \"change\", \"submit\"].indexOf(value) !== -1;\n    }\n\n\n    isValidatorDescriptor(value: any): boolean {\n\n        if (isObject(value)) {\n            return value.hasOwnProperty(\"name\") && value.hasOwnProperty(\"args\");\n        }\n\n        return false;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { AbstractControl, FormArray, FormControl, FormGroup } from \"@angular/forms\";\nimport { AbstractControlOptions } from \"@angular/forms\";\nimport { DynamicFormControlModel, FormHooks } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DynamicFormArrayModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DynamicCheckboxGroupModel\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\n    DynamicColorPickerModel\n} from \"../model/colorpicker/dynamic-colorpicker.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DynamicDatePickerModel\n} from \"../model/datepicker/dynamic-datepicker.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DynamicEditorModel } from \"../model/editor/dynamic-editor.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD,\n    DynamicFileUploadModel\n} from \"../model/file-upload/dynamic-file-upload.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel } from \"../model/input/dynamic-input.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DynamicRadioGroupModel\n} from \"../model/radio/dynamic-radio-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_RATING, DynamicRatingModel } from \"../model/rating/dynamic-rating.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel } from \"../model/select/dynamic-select.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel } from \"../model/slider/dynamic-slider.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel } from \"../model/switch/dynamic-switch.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel } from \"../model/textarea/dynamic-textarea.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n    DynamicTimePickerModel\n} from \"../model/timepicker/dynamic-timepicker.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { DynamicFormModel, DynamicUnionFormModel } from \"../model/dynamic-form.model\";\nimport { DynamicPathable } from \"../model/misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\nimport { maskFromString, parseReviver } from \"../utils/json.utils\";\nimport { isString } from \"../utils/core.utils\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormService {\n\n    constructor(private validationService: DynamicFormValidationService) {}\n\n\n    private createAbstractControlOptions(validatorsConfig: DynamicValidatorsConfig | null = null,\n                                         asyncValidatorsConfig: DynamicValidatorsConfig | null = null,\n                                         updateOn: FormHooks | null = null): AbstractControlOptions {\n\n        return {\n\n            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,\n\n            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,\n\n            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : \"change\"\n        };\n    }\n\n\n    createFormArray(formArrayModel: DynamicFormArrayModel): FormArray {\n\n        let controls: AbstractControl[] = [],\n            options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators,\n                formArrayModel.updateOn);\n\n        for (let index = 0; index < formArrayModel.size; index++) {\n\n            let groupModel = formArrayModel.get(index),\n                groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators,\n                    formArrayModel.groupAsyncValidators, formArrayModel.updateOn);\n\n            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));\n        }\n\n        return new FormArray(controls, options);\n    }\n\n\n    createFormGroup(formModel: DynamicFormModel, options: AbstractControlOptions | null = null,\n                    parent: DynamicPathable | null = null): FormGroup {\n\n        let controls: { [controlId: string]: AbstractControl; } = {};\n\n        formModel.forEach(model => {\n\n            model.parent = parent;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n\n                    controls[model.id] = this.createFormArray(model as DynamicFormArrayModel);\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n\n                    let groupModel = model as DynamicFormGroupModel,\n                        groupOptions = this.createAbstractControlOptions(groupModel.validators,\n                            groupModel.asyncValidators, groupModel.updateOn);\n\n                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);\n                    break;\n\n                default:\n\n                    let controlModel = model as DynamicFormValueControlModel<any>,\n                        controlState = {value: controlModel.value, disabled: controlModel.disabled},\n                        controlOptions = this.createAbstractControlOptions(controlModel.validators,\n                            controlModel.asyncValidators, controlModel.updateOn);\n\n                    controls[model.id] = new FormControl(controlState, controlOptions);\n            }\n        });\n\n        return new FormGroup(controls, options);\n    }\n\n\n    getPathSegment(model: DynamicPathable): string {\n        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : (model as DynamicFormControlModel).id;\n    }\n\n\n    getPath(model: DynamicPathable, join: boolean = false): string[] | string {\n\n        let path = [this.getPathSegment(model)],\n            parent = model.parent;\n\n        while (parent) {\n\n            path.unshift(this.getPathSegment(parent));\n            parent = parent.parent;\n        }\n\n        return join ? path.join(\".\") : path;\n    }\n\n\n    addFormGroupControl(formGroup: FormGroup, formModel: DynamicUnionFormModel, ...models: DynamicFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormModel;\n            this.insertFormGroupControl(_formModel.length, formGroup, _formModel, ...models);\n        }\n    }\n\n\n    moveFormGroupControl(index: number, step: number, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formModel.move(index, step);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormModel;\n            _formModel.splice(index + step, 0, ..._formModel.splice(index, 1));\n        }\n    }\n\n\n    insertFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel,\n                           ...models: DynamicFormModel): void {\n\n        let parent = formModel instanceof DynamicFormGroupModel ? formModel : null,\n            controls = this.createFormGroup(models, null, parent).controls;\n\n        Object.keys(controls).forEach((controlName, idx) => {\n\n            let controlModel = models[idx];\n\n            if (formModel instanceof DynamicFormGroupModel) {\n                formModel.insert(index, controlModel);\n\n            } else {\n                (formModel as DynamicFormModel).splice(index, 0, controlModel);\n            }\n\n            formGroup.addControl(controlName, controls[controlName]);\n        });\n    }\n\n\n    removeFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formGroup.removeControl(formModel.get(index).id);\n            formModel.remove(index);\n\n        } else {\n\n            formGroup.removeControl(formModel[index].id);\n            (formModel as DynamicFormModel).splice(index, 1);\n        }\n    }\n\n\n    addFormArrayGroup(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.addGroup();\n\n        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    insertFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.insertGroup(index);\n\n        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    moveFormArrayGroup(index: number, step: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let newIndex = index + step,\n            moveUp = step >= 0;\n\n        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {\n\n            let movingGroups: AbstractControl[] = [];\n\n            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {\n                movingGroups.push(formArray.at(i));\n            }\n\n            movingGroups.forEach((formControl, idx) => {\n\n                let position;\n\n                if (moveUp) {\n                    position = idx === 0 ? newIndex : index + idx - 1;\n\n                } else {\n                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;\n                }\n\n                formArray.setControl(position, formControl);\n            });\n\n            formArrayModel.moveGroup(index, step);\n\n        } else {\n            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);\n        }\n    }\n\n\n    removeFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.removeAt(index);\n        formArrayModel.removeGroup(index);\n    }\n\n\n    clearFormArray(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.clear();\n        formArrayModel.clear();\n    }\n\n\n    findById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n\n        let result = null,\n            findByIdFn = (id: string, groupModel: DynamicFormModel): void => {\n\n                for (let controlModel of groupModel) {\n\n                    if (controlModel.id === id) {\n                        result = controlModel;\n                        break;\n                    }\n\n                    if (controlModel instanceof DynamicFormGroupModel) {\n                        findByIdFn(id, (controlModel as DynamicFormGroupModel).group);\n                    }\n                }\n            };\n\n        findByIdFn(id, formModel);\n\n        return result;\n    }\n\n\n    findModelById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n        return this.findById(id, formModel);\n    }\n\n\n    findControlByModel(model: DynamicFormControlModel, group: FormGroup): AbstractControl | null {\n        return group.root.get(this.getPath(model, true));\n    }\n\n\n    fromJSON(json: string | object[]): DynamicFormModel | never {\n\n        let formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json,\n            formModel: DynamicFormModel = [];\n\n        formModelJSON.forEach((model: any) => {\n\n            let layout = model.layout || null;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                    let formArrayModel = model as DynamicFormArrayModel;\n\n                    if (Array.isArray(formArrayModel.groups)) {\n\n                        formArrayModel.groups.forEach((groupModel: DynamicFormArrayGroupModel) => {\n                            groupModel.group = this.fromJSON(groupModel.group) as DynamicFormModel;\n                        });\n                    }\n\n                    formArrayModel.groupFactory = () => {\n                        return this.fromJSON(formArrayModel.groupPrototype);\n                    };\n\n                    formModel.push(new DynamicFormArrayModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                    formModel.push(new DynamicCheckboxModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n                    model.group = this.fromJSON(model.group) as DynamicCheckboxModel[];\n                    formModel.push(new DynamicCheckboxGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\n                    formModel.push(new DynamicColorPickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n                    formModel.push(new DynamicDatePickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\n                    formModel.push(new DynamicEditorModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:\n                    model.value = null;\n                    formModel.push(new DynamicFileUploadModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                    model.group = this.fromJSON(model.group);\n                    formModel.push(new DynamicFormGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                    let inputModel = model as DynamicInputModel;\n\n                    if (inputModel.mask !== null) {\n                        if (!(inputModel.mask instanceof Function)) {\n                            inputModel.mask = maskFromString(inputModel.mask as string);\n                        }\n                    }\n\n                    formModel.push(new DynamicInputModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                    formModel.push(new DynamicRadioGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n                    formModel.push(new DynamicRatingModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                    formModel.push(new DynamicSelectModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                    formModel.push(new DynamicSliderModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                    formModel.push(new DynamicSwitchModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                    formModel.push(new DynamicTextAreaModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n                    formModel.push(new DynamicTimePickerModel(model, layout));\n                    break;\n\n                default:\n                    throw new Error(`unknown form control model type defined on JSON object with id \"${model.id}\"`);\n            }\n        });\n\n        return formModel;\n    }\n}\n","import { ComponentRef, Inject, Injectable, InjectionToken, Optional, Type } from \"@angular/core\";\nimport { DynamicFormControl } from \"../component/dynamic-form-control.interface\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { isFunction, isNumber } from \"../utils/core.utils\";\n\nexport type DynamicFormControlRef = ComponentRef<DynamicFormControl>;\n\nexport type DynamicFormControlMapFn = (model: DynamicFormControlModel) => Type<DynamicFormControl> | null;\n\nexport const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken<DynamicFormControlMapFn>(\"DYNAMIC_FORM_CONTROL_MAP_FN\");\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormComponentService {\n\n    private componentRefs: { [key: string]: DynamicFormControlRef | DynamicFormControlRef[] } = {};\n\n    constructor(@Inject(DYNAMIC_FORM_CONTROL_MAP_FN) @Optional() private readonly DYNAMIC_FORM_CONTROL_MAP_FN: any) {\n        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN as DynamicFormControlMapFn;\n    }\n\n    getFormControlRef(modelId: string, index?: number): DynamicFormControlRef | undefined {\n\n        const ref: DynamicFormControlRef | DynamicFormControlRef[] = this.componentRefs[modelId];\n\n        if (isNumber(index)) {\n\n            return Array.isArray(ref) ? ref[index] : undefined;\n\n        } else {\n            return ref as DynamicFormControlRef;\n        }\n    }\n\n    registerFormControlRef(model: DynamicFormControlModel, instance: DynamicFormControlRef, index?: number): void {\n\n        if (isNumber(index)) {\n\n            const arrayRef: DynamicFormControlRef[] = this.componentRefs[model.id] as DynamicFormControlRef[] || [];\n\n            if (Array.isArray(arrayRef)) {\n\n                arrayRef.splice(index, 0, instance);\n                this.componentRefs[model.id] = arrayRef;\n\n            } else {\n                console.warn(`registerFormControlRef is called with index for a non-array form control: ${model.id}`);\n            }\n\n        } else {\n            this.componentRefs[model.id] = instance;\n        }\n\n    }\n\n    unregisterFormControlRef(modelId: string, index?: number): void {\n\n        const componentRef = this.componentRefs[modelId];\n\n        if (isNumber(index)) {\n\n            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {\n                componentRef.splice(index, 1);\n            }\n\n        } else if (componentRef !== undefined) {\n            delete this.componentRefs[modelId];\n        }\n    }\n\n    getCustomComponentType(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;\n    }\n}\n","import { Injectable, QueryList } from \"@angular/core\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutConfig,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport {\n    DynamicTemplateDirective,\n    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT\n} from \"../directive/dynamic-template.directive\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport type DynamicFormLayout = { [id: string]: DynamicFormControlLayout };\n\nexport type DynamicFormControlTemplates = QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormLayoutService {\n\n    findById(id: string, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        if (isObject(formLayout)) {\n\n            for (let key of Object.keys(formLayout)) {\n\n                if (key === id) {\n                    return formLayout[key];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    findByModel(model: DynamicFormControlModel, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        let controlLayout: DynamicFormControlLayout = null;\n\n        if (isObject(formLayout)) {\n\n            for (let key of Object.keys(formLayout)) {\n\n                key.split(\",\").forEach(substring => {\n\n                    const selector = substring.trim();\n\n                    if (selector === model.id || selector === model.type) {\n                        controlLayout = formLayout[key];\n                    }\n                });\n            }\n        }\n\n        return controlLayout;\n    }\n\n    filterTemplatesByModel(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] {\n\n        const filterCallback: (template: DynamicTemplateDirective) => boolean = (template: DynamicTemplateDirective) => {\n            return template.modelId === model.id || template.modelType === model.type;\n        };\n\n        if (templates instanceof QueryList) {\n            return templates.filter(filterCallback);\n\n        } else if (Array.isArray(templates)) {\n            return templates.filter(filterCallback);\n        }\n\n        return [];\n    }\n\n    getAlignedTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates, alignment: DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT): DynamicTemplateDirective | undefined {\n\n        return this.filterTemplatesByModel(model, templates)\n            .find(template => template.as === null && template.align === alignment);\n    }\n\n    /*\n    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {\n        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);\n    }\n    */\n    getStartTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);\n    }\n\n    getEndTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);\n    }\n\n    getClass(layout: DynamicFormControlLayout | null, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        if (layout !== null && layout.hasOwnProperty(context)) {\n\n            let config = layout[context] as DynamicFormControlLayoutConfig;\n\n            if (config.hasOwnProperty(place)) {\n                return config[place] as string;\n            }\n        }\n\n        return \"\";\n    }\n\n    getElementId(model: DynamicFormControlModel): string {\n\n        let id = model.id, parent = model.parent;\n\n        while (parent !== null) {\n\n            if (parent instanceof DynamicFormArrayGroupModel) {\n\n                id = `${parent.context.id}-${parent.index}-${model.id}`;\n                break;\n            }\n\n            parent = parent.parent;\n        }\n\n        return id;\n    }\n}\n","import { InjectionToken, Injector, ValueProvider } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport const MATCH_DISABLED = \"DISABLED\";\nexport const MATCH_ENABLED = \"ENABLED\";\nexport const MATCH_HIDDEN = \"HIDDEN\";\nexport const MATCH_OPTIONAL = \"OPTIONAL\";\nexport const MATCH_REQUIRED = \"REQUIRED\";\nexport const MATCH_VISIBLE = \"VISIBLE\";\n\nexport const AND_OPERATOR = \"AND\";\nexport const OR_OPERATOR = \"OR\";\n\nexport interface DynamicFormControlMatcher {\n\n    match: string;\n    opposingMatch: string | null;\n\n    onChange(hasMatch: boolean, model: DynamicFormControlModel, control: FormControl, injector: Injector): void;\n}\n\nexport const DYNAMIC_MATCHERS = new InjectionToken<DynamicFormControlMatcher>(\"DYNAMIC_MATCHERS\");\n\nexport const DisabledMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_DISABLED,\n    opposingMatch: MATCH_ENABLED,\n    onChange(hasMatch, model) {\n        model.disabled = hasMatch;\n    }\n};\n\nexport const HiddenMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_HIDDEN,\n    opposingMatch: MATCH_VISIBLE,\n    onChange(hasMatch, model) {\n        model.hidden = hasMatch;\n    }\n};\n\nexport const RequiredMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_REQUIRED,\n    opposingMatch: MATCH_OPTIONAL,\n    onChange(hasMatch, model, control, injector) {\n\n        let validatorsConfig = null;\n\n        if (hasMatch) {\n\n            validatorsConfig = isObject(model.validators) ? {...model.validators, required: null} : {required: null};\n\n        } else {\n\n            if (isObject(model.validators)) {\n\n                delete model.validators[\"required\"];\n                validatorsConfig = {...model.validators};\n            }\n        }\n\n        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);\n    }\n};\n\nexport const DISABLED_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: DisabledMatcher,\n    multi: true\n};\n\nexport const HIDDEN_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: HiddenMatcher,\n    multi: true\n};\n\nexport const REQUIRED_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: RequiredMatcher,\n    multi: true\n};\n\nexport const DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER, HIDDEN_MATCHER, REQUIRED_MATCHER];\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    AND_OPERATOR,\n    DYNAMIC_MATCHERS,\n    DynamicFormControlMatcher,\n    OR_OPERATOR\n} from \"./dynamic-form-relation.matchers\";\nimport { DynamicFormControlRelation, } from \"../model/misc/dynamic-form-control-relation.model\";\nimport { startWith } from \"rxjs/operators\";\nimport { merge, Subscription } from \"rxjs\";\n\nexport type DynamicRelatedFormControls = { [key: string]: FormControl };\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormRelationService {\n\n    constructor(@Optional() @Inject(DYNAMIC_MATCHERS) private DYNAMIC_MATCHERS: DynamicFormControlMatcher[],\n                private injector: Injector) {}\n\n    getRelatedFormControls(model: DynamicFormControlModel, group: FormGroup): DynamicRelatedFormControls {\n\n        const conditionReducer = (controls, condition) => {\n\n            const path = condition.rootPath || condition.id;\n\n            if (!controls.hasOwnProperty(path)) {\n\n                const control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);\n\n                control instanceof FormControl ? controls[path] = control : console.warn(`No related form control with id ${condition.id} could be found`);\n            }\n\n            return controls;\n        };\n\n        const relationReducer = (controls, relation) => relation.when.reduce(conditionReducer, controls);\n\n        return model.relations.reduce(relationReducer, {});\n    }\n\n    findRelationByMatcher(relations: DynamicFormControlRelation[], matcher: DynamicFormControlMatcher): DynamicFormControlRelation | undefined {\n        return relations.find(relation => [matcher.match, matcher.opposingMatch].includes(relation.match));\n    }\n\n    matchesCondition(relation: DynamicFormControlRelation, relatedFormControls: DynamicRelatedFormControls, matcher: DynamicFormControlMatcher): boolean {\n\n        const operator = relation.operator || OR_OPERATOR;\n\n        return relation.when.reduce((hasAlreadyMatched, condition, index) => {\n\n            const path = condition.rootPath || condition.id;\n\n            let relatedFormControl;\n\n            for (let [key, control] of Object.entries(relatedFormControls)) {\n                if (key === path) {\n                    relatedFormControl = control;\n                    break;\n                }\n            }\n\n            if (relatedFormControl && relation.match === matcher.match) {\n\n                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;\n            }\n\n            if (relatedFormControl && relation.match === matcher.opposingMatch) {\n\n                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);\n            }\n\n            return false;\n\n        }, false);\n    }\n\n    subscribeRelations(model: DynamicFormControlModel, group: FormGroup, control: FormControl): Subscription[] {\n\n        const relatedFormControls = this.getRelatedFormControls(model, group), subscriptions: Subscription[] = [];\n\n        Object.values(relatedFormControls).forEach(relatedControl => {\n\n            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));\n            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));\n\n            subscriptions.push(merge(valueChanges, statusChanges).subscribe(() => {\n\n                this.DYNAMIC_MATCHERS.forEach(matcher => {\n\n                    const relation = this.findRelationByMatcher(model.relations, matcher);\n\n                    if (relation !== undefined) {\n\n                        const hasMatch = this.matchesCondition(relation, relatedFormControls, matcher);\n                        matcher.onChange(hasMatch, model, control, this.injector);\n                    }\n                });\n            }));\n        });\n\n        return subscriptions;\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { DynamicIdDirective } from \"./directive/dynamic-id.directive\";\nimport { DynamicListDirective } from \"./directive/dynamic-list.directive\";\nimport { DynamicTemplateDirective } from \"./directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"./service/dynamic-form.service\";\nimport { DynamicFormLayoutService } from \"./service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"./service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"./service/dynamic-form-component.service\";\nimport { DynamicFormRelationService } from \"./service/dynamic-form-relation.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        DynamicIdDirective,\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ],\n    exports: [\n        DynamicIdDirective,\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ]\n})\nexport class DynamicFormsCoreModule {\n\n    /*@deprecated*/\n    static forRoot(): ModuleWithProviders {\n\n        return {\n            ngModule: DynamicFormsCoreModule,\n            providers: [\n                DynamicFormService,\n                DynamicFormLayoutService,\n                DynamicFormValidationService,\n                DynamicFormComponentService,\n                DynamicFormRelationService\n            ]\n        };\n    }\n}\n"],"names":["tslib_1.__extends","tslib_1.__decorate","looseIdentical","tslib_1.__values"],"mappings":"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"}
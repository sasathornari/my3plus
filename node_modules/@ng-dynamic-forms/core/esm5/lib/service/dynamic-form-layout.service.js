/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, QueryList } from "@angular/core";
import { DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT } from "../directive/dynamic-template.directive";
import { isObject } from "../utils/core.utils";
import * as i0 from "@angular/core";
var DynamicFormLayoutService = /** @class */ (function () {
    function DynamicFormLayoutService() {
    }
    /**
     * @param {?} id
     * @param {?} formLayout
     * @return {?}
     */
    DynamicFormLayoutService.prototype.findById = /**
     * @param {?} id
     * @param {?} formLayout
     * @return {?}
     */
    function (id, formLayout) {
        var e_1, _a;
        if (isObject(formLayout)) {
            try {
                for (var _b = tslib_1.__values(Object.keys(formLayout)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    if (key === id) {
                        return formLayout[key];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return null;
    };
    /**
     * @param {?} model
     * @param {?} formLayout
     * @return {?}
     */
    DynamicFormLayoutService.prototype.findByModel = /**
     * @param {?} model
     * @param {?} formLayout
     * @return {?}
     */
    function (model, formLayout) {
        var e_2, _a;
        /** @type {?} */
        var controlLayout = null;
        if (isObject(formLayout)) {
            var _loop_1 = function (key) {
                key.split(",").forEach((/**
                 * @param {?} substring
                 * @return {?}
                 */
                function (substring) {
                    /** @type {?} */
                    var selector = substring.trim();
                    if (selector === model.id || selector === model.type) {
                        controlLayout = formLayout[key];
                    }
                }));
            };
            try {
                for (var _b = tslib_1.__values(Object.keys(formLayout)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _loop_1(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return controlLayout;
    };
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    DynamicFormLayoutService.prototype.filterTemplatesByModel = /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    function (model, templates) {
        /** @type {?} */
        var filterCallback = (/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            return template.modelId === model.id || template.modelType === model.type;
        });
        if (templates instanceof QueryList) {
            return templates.filter(filterCallback);
        }
        else if (Array.isArray(templates)) {
            return templates.filter(filterCallback);
        }
        return [];
    };
    /**
     * @param {?} model
     * @param {?} templates
     * @param {?} alignment
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getAlignedTemplate = /**
     * @param {?} model
     * @param {?} templates
     * @param {?} alignment
     * @return {?}
     */
    function (model, templates, alignment) {
        return this.filterTemplatesByModel(model, templates)
            .find((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template.as === null && template.align === alignment; }));
    };
    /*
    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
    }
    */
    /*
        getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
            return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
        }
        */
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getStartTemplate = /*
        getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
            return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
        }
        */
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    function (model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);
    };
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getEndTemplate = /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    function (model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);
    };
    /**
     * @param {?} layout
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getClass = /**
     * @param {?} layout
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    function (layout, context, place) {
        if (layout !== null && layout.hasOwnProperty(context)) {
            /** @type {?} */
            var config = (/** @type {?} */ (layout[context]));
            if (config.hasOwnProperty(place)) {
                return (/** @type {?} */ (config[place]));
            }
        }
        return "";
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getElementId = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var id = model.id;
        /** @type {?} */
        var parent = model.parent;
        while (parent !== null) {
            if (parent instanceof DynamicFormArrayGroupModel) {
                id = parent.context.id + "-" + parent.index + "-" + model.id;
                break;
            }
            parent = parent.parent;
        }
        return id;
    };
    DynamicFormLayoutService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */ DynamicFormLayoutService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormLayoutService_Factory() { return new DynamicFormLayoutService(); }, token: DynamicFormLayoutService, providedIn: "root" });
    return DynamicFormLayoutService;
}());
export { DynamicFormLayoutService };
//# sourceMappingURL=data:application/json;base64,
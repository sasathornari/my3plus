/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject } from "rxjs";
import { DynamicFormControlModel } from "./dynamic-form-control.model";
import { serializable } from "../decorator/serializable.decorator";
import { isBoolean, isObject } from "../utils/core.utils";
/**
 * @record
 * @template T
 */
export function DynamicFormValueControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicFormValueControlModelConfig.prototype.additional;
    /** @type {?|undefined} */
    DynamicFormValueControlModelConfig.prototype.hint;
    /** @type {?|undefined} */
    DynamicFormValueControlModelConfig.prototype.required;
    /** @type {?|undefined} */
    DynamicFormValueControlModelConfig.prototype.tabIndex;
    /** @type {?|undefined} */
    DynamicFormValueControlModelConfig.prototype.value;
}
/**
 * @abstract
 * @template T
 */
export class DynamicFormValueControlModel extends DynamicFormControlModel {
    /**
     * @protected
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.additional = isObject(config.additional) ? config.additional : null;
        this.hint = config.hint || null;
        this.required = isBoolean(config.required) ? config.required : false;
        this.tabIndex = config.tabIndex || null;
        this.value$ = new BehaviorSubject(config.value !== null && config.value !== undefined ? config.value : null);
        this.value$.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => this._value = value));
        this.valueChanges = this.value$.asObservable();
    }
    /**
     * @return {?}
     */
    get value() {
        return this.value$.getValue();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.value$.next(value);
    }
    /**
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    getAdditional(key, defaultValue = undefined) {
        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicFormValueControlModel.prototype, "additional", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicFormValueControlModel.prototype, "hint", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicFormValueControlModel.prototype, "required", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Number)
], DynamicFormValueControlModel.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    serializable("value"),
    tslib_1.__metadata("design:type", Object)
], DynamicFormValueControlModel.prototype, "_value", void 0);
if (false) {
    /** @type {?} */
    DynamicFormValueControlModel.prototype.additional;
    /** @type {?} */
    DynamicFormValueControlModel.prototype.hint;
    /** @type {?} */
    DynamicFormValueControlModel.prototype.required;
    /** @type {?} */
    DynamicFormValueControlModel.prototype.tabIndex;
    /**
     * @type {?}
     * @private
     */
    DynamicFormValueControlModel.prototype._value;
    /**
     * @type {?}
     * @private
     */
    DynamicFormValueControlModel.prototype.value$;
    /** @type {?} */
    DynamicFormValueControlModel.prototype.valueChanges;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXZhbHVlLWNvbnRyb2wubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctZHluYW1pYy1mb3Jtcy9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2R5bmFtaWMtZm9ybS12YWx1ZS1jb250cm9sLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsdUJBQXVCLEVBQWlDLE1BQU0sOEJBQThCLENBQUM7QUFFdEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBRTFELHdEQU9DOzs7SUFMRyx3REFBb0M7O0lBQ3BDLGtEQUFjOztJQUNkLHNEQUFtQjs7SUFDbkIsc0RBQWtCOztJQUNsQixtREFBVTs7Ozs7O0FBR2QsTUFBTSxPQUFnQiw0QkFBZ0MsU0FBUSx1QkFBdUI7Ozs7OztJQVlqRixZQUFzQixNQUE2QyxFQUFFLE1BQWlDO1FBRWxHLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyRSxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO1FBRXhDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELElBQUksS0FBSyxDQUFDLEtBQWU7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBRUQsYUFBYSxDQUFDLEdBQVcsRUFBRSxlQUF1QyxTQUFTO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUNqSCxDQUFDO0NBQ0o7QUFuQ21CO0lBQWYsWUFBWSxFQUFFOztnRUFBMkM7QUFDMUM7SUFBZixZQUFZLEVBQUU7OzBEQUFxQjtBQUNwQjtJQUFmLFlBQVksRUFBRTs7OERBQW1CO0FBQ2xCO0lBQWYsWUFBWSxFQUFFOzs4REFBeUI7QUFDakI7SUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7NERBQTBCOzs7SUFKaEQsa0RBQTBEOztJQUMxRCw0Q0FBb0M7O0lBQ3BDLGdEQUFrQzs7SUFDbEMsZ0RBQXdDOzs7OztJQUN4Qyw4Q0FBZ0Q7Ozs7O0lBRWhELDhDQUE0Qzs7SUFFNUMsb0RBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsLCBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbENvbmZpZyB9IGZyb20gXCIuL2R5bmFtaWMtZm9ybS1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgc2VyaWFsaXphYmxlIH0gZnJvbSBcIi4uL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yXCI7XG5pbXBvcnQgeyBpc0Jvb2xlYW4sIGlzT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsQ29uZmlnPFQ+IGV4dGVuZHMgRHluYW1pY0Zvcm1Db250cm9sTW9kZWxDb25maWcge1xuXG4gICAgYWRkaXRpb25hbD86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gICAgaGludD86IHN0cmluZztcbiAgICByZXF1aXJlZD86IGJvb2xlYW47XG4gICAgdGFiSW5kZXg/OiBudW1iZXI7XG4gICAgdmFsdWU/OiBUO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxUPiBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbE1vZGVsIHtcblxuICAgIEBzZXJpYWxpemFibGUoKSBhZGRpdGlvbmFsOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgaGludDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHRhYkluZGV4OiBudW1iZXIgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoXCJ2YWx1ZVwiKSBwcml2YXRlIF92YWx1ZTogVCB8IG51bGw7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlJDogQmVoYXZpb3JTdWJqZWN0PFQ+O1xuXG4gICAgcmVhZG9ubHkgdmFsdWVDaGFuZ2VzOiBPYnNlcnZhYmxlPFQ+O1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZzxUPiwgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbCA9IGlzT2JqZWN0KGNvbmZpZy5hZGRpdGlvbmFsKSA/IGNvbmZpZy5hZGRpdGlvbmFsIDogbnVsbDtcbiAgICAgICAgdGhpcy5oaW50ID0gY29uZmlnLmhpbnQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5yZXF1aXJlZCA9IGlzQm9vbGVhbihjb25maWcucmVxdWlyZWQpID8gY29uZmlnLnJlcXVpcmVkIDogZmFsc2U7XG4gICAgICAgIHRoaXMudGFiSW5kZXggPSBjb25maWcudGFiSW5kZXggfHwgbnVsbDtcblxuICAgICAgICB0aGlzLnZhbHVlJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoY29uZmlnLnZhbHVlICE9PSBudWxsICYmIGNvbmZpZy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gY29uZmlnLnZhbHVlIDogbnVsbCk7XG4gICAgICAgIHRoaXMudmFsdWUkLnN1YnNjcmliZSh2YWx1ZSA9PiB0aGlzLl92YWx1ZSA9IHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZXMgPSB0aGlzLnZhbHVlJC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKTogVCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSQuZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICBzZXQgdmFsdWUodmFsdWU6IFQgfCBudWxsKSB7XG4gICAgICAgIHRoaXMudmFsdWUkLm5leHQodmFsdWUpO1xuICAgIH1cblxuICAgIGdldEFkZGl0aW9uYWwoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogYW55IHwgbnVsbCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZGl0aW9uYWwgIT09IG51bGwgJiYgdGhpcy5hZGRpdGlvbmFsLmhhc093blByb3BlcnR5KGtleSkgPyB0aGlzLmFkZGl0aW9uYWxba2V5XSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG59XG4iXX0=
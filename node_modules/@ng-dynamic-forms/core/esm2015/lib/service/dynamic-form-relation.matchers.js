/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from "@angular/core";
import { DynamicFormValidationService } from "./dynamic-form-validation.service";
import { isObject } from "../utils/core.utils";
/** @type {?} */
export const MATCH_DISABLED = "DISABLED";
/** @type {?} */
export const MATCH_ENABLED = "ENABLED";
/** @type {?} */
export const MATCH_HIDDEN = "HIDDEN";
/** @type {?} */
export const MATCH_OPTIONAL = "OPTIONAL";
/** @type {?} */
export const MATCH_REQUIRED = "REQUIRED";
/** @type {?} */
export const MATCH_VISIBLE = "VISIBLE";
/** @type {?} */
export const AND_OPERATOR = "AND";
/** @type {?} */
export const OR_OPERATOR = "OR";
/**
 * @record
 */
export function DynamicFormControlMatcher() { }
if (false) {
    /** @type {?} */
    DynamicFormControlMatcher.prototype.match;
    /** @type {?} */
    DynamicFormControlMatcher.prototype.opposingMatch;
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    DynamicFormControlMatcher.prototype.onChange = function (hasMatch, model, control, injector) { };
}
/** @type {?} */
export const DYNAMIC_MATCHERS = new InjectionToken("DYNAMIC_MATCHERS");
/** @type {?} */
export const DisabledMatcher = {
    match: MATCH_DISABLED,
    opposingMatch: MATCH_ENABLED,
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    onChange(hasMatch, model) {
        model.disabled = hasMatch;
    }
};
/** @type {?} */
export const HiddenMatcher = {
    match: MATCH_HIDDEN,
    opposingMatch: MATCH_VISIBLE,
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    onChange(hasMatch, model) {
        model.hidden = hasMatch;
    }
};
/** @type {?} */
export const RequiredMatcher = {
    match: MATCH_REQUIRED,
    opposingMatch: MATCH_OPTIONAL,
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    onChange(hasMatch, model, control, injector) {
        /** @type {?} */
        let validatorsConfig = null;
        if (hasMatch) {
            validatorsConfig = isObject(model.validators) ? Object.assign({}, model.validators, { required: null }) : { required: null };
        }
        else {
            if (isObject(model.validators)) {
                delete model.validators["required"];
                validatorsConfig = Object.assign({}, model.validators);
            }
        }
        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);
    }
};
/** @type {?} */
export const DISABLED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: DisabledMatcher,
    multi: true
};
/** @type {?} */
export const HIDDEN_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: HiddenMatcher,
    multi: true
};
/** @type {?} */
export const REQUIRED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: RequiredMatcher,
    multi: true
};
/** @type {?} */
export const DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER, HIDDEN_MATCHER, REQUIRED_MATCHER];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXJlbGF0aW9uLm1hdGNoZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1yZWxhdGlvbi5tYXRjaGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFHeEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUUvQyxNQUFNLE9BQU8sY0FBYyxHQUFHLFVBQVU7O0FBQ3hDLE1BQU0sT0FBTyxhQUFhLEdBQUcsU0FBUzs7QUFDdEMsTUFBTSxPQUFPLFlBQVksR0FBRyxRQUFROztBQUNwQyxNQUFNLE9BQU8sY0FBYyxHQUFHLFVBQVU7O0FBQ3hDLE1BQU0sT0FBTyxjQUFjLEdBQUcsVUFBVTs7QUFDeEMsTUFBTSxPQUFPLGFBQWEsR0FBRyxTQUFTOztBQUV0QyxNQUFNLE9BQU8sWUFBWSxHQUFHLEtBQUs7O0FBQ2pDLE1BQU0sT0FBTyxXQUFXLEdBQUcsSUFBSTs7OztBQUUvQiwrQ0FNQzs7O0lBSkcsMENBQWM7O0lBQ2Qsa0RBQTZCOzs7Ozs7OztJQUU3QixpR0FBNEc7OztBQUdoSCxNQUFNLE9BQU8sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQTRCLGtCQUFrQixDQUFDOztBQUVqRyxNQUFNLE9BQU8sZUFBZSxHQUE4QjtJQUV0RCxLQUFLLEVBQUUsY0FBYztJQUNyQixhQUFhLEVBQUUsYUFBYTs7Ozs7O0lBQzVCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsS0FBSztRQUNwQixLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM5QixDQUFDO0NBQ0o7O0FBRUQsTUFBTSxPQUFPLGFBQWEsR0FBOEI7SUFFcEQsS0FBSyxFQUFFLFlBQVk7SUFDbkIsYUFBYSxFQUFFLGFBQWE7Ozs7OztJQUM1QixRQUFRLENBQUMsUUFBUSxFQUFFLEtBQUs7UUFDcEIsS0FBSyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztDQUNKOztBQUVELE1BQU0sT0FBTyxlQUFlLEdBQThCO0lBRXRELEtBQUssRUFBRSxjQUFjO0lBQ3JCLGFBQWEsRUFBRSxjQUFjOzs7Ozs7OztJQUM3QixRQUFRLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUTs7WUFFbkMsZ0JBQWdCLEdBQUcsSUFBSTtRQUUzQixJQUFJLFFBQVEsRUFBRTtZQUVWLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxtQkFBSyxLQUFLLENBQUMsVUFBVSxJQUFFLFFBQVEsRUFBRSxJQUFJLElBQUUsQ0FBQyxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1NBRTVHO2FBQU07WUFFSCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBRTVCLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDcEMsZ0JBQWdCLHFCQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUM1QztTQUNKO1FBRUQsUUFBUSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRyxDQUFDO0NBQ0o7O0FBRUQsTUFBTSxPQUFPLGdCQUFnQixHQUFrQjtJQUMzQyxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLEtBQUssRUFBRSxJQUFJO0NBQ2Q7O0FBRUQsTUFBTSxPQUFPLGNBQWMsR0FBa0I7SUFDekMsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixRQUFRLEVBQUUsYUFBYTtJQUN2QixLQUFLLEVBQUUsSUFBSTtDQUNkOztBQUVELE1BQU0sT0FBTyxnQkFBZ0IsR0FBa0I7SUFDM0MsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixRQUFRLEVBQUUsZUFBZTtJQUN6QixLQUFLLEVBQUUsSUFBSTtDQUNkOztBQUVELE1BQU0sT0FBTyx5QkFBeUIsR0FBRyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBJbmplY3RvciwgVmFsdWVQcm92aWRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tdmFsaWRhdGlvbi5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBNQVRDSF9ESVNBQkxFRCA9IFwiRElTQUJMRURcIjtcbmV4cG9ydCBjb25zdCBNQVRDSF9FTkFCTEVEID0gXCJFTkFCTEVEXCI7XG5leHBvcnQgY29uc3QgTUFUQ0hfSElEREVOID0gXCJISURERU5cIjtcbmV4cG9ydCBjb25zdCBNQVRDSF9PUFRJT05BTCA9IFwiT1BUSU9OQUxcIjtcbmV4cG9ydCBjb25zdCBNQVRDSF9SRVFVSVJFRCA9IFwiUkVRVUlSRURcIjtcbmV4cG9ydCBjb25zdCBNQVRDSF9WSVNJQkxFID0gXCJWSVNJQkxFXCI7XG5cbmV4cG9ydCBjb25zdCBBTkRfT1BFUkFUT1IgPSBcIkFORFwiO1xuZXhwb3J0IGNvbnN0IE9SX09QRVJBVE9SID0gXCJPUlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNGb3JtQ29udHJvbE1hdGNoZXIge1xuXG4gICAgbWF0Y2g6IHN0cmluZztcbiAgICBvcHBvc2luZ01hdGNoOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgb25DaGFuZ2UoaGFzTWF0Y2g6IGJvb2xlYW4sIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCwgY29udHJvbDogRm9ybUNvbnRyb2wsIGluamVjdG9yOiBJbmplY3Rvcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX01BVENIRVJTID0gbmV3IEluamVjdGlvblRva2VuPER5bmFtaWNGb3JtQ29udHJvbE1hdGNoZXI+KFwiRFlOQU1JQ19NQVRDSEVSU1wiKTtcblxuZXhwb3J0IGNvbnN0IERpc2FibGVkTWF0Y2hlcjogRHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlciA9IHtcblxuICAgIG1hdGNoOiBNQVRDSF9ESVNBQkxFRCxcbiAgICBvcHBvc2luZ01hdGNoOiBNQVRDSF9FTkFCTEVELFxuICAgIG9uQ2hhbmdlKGhhc01hdGNoLCBtb2RlbCkge1xuICAgICAgICBtb2RlbC5kaXNhYmxlZCA9IGhhc01hdGNoO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBIaWRkZW5NYXRjaGVyOiBEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyID0ge1xuXG4gICAgbWF0Y2g6IE1BVENIX0hJRERFTixcbiAgICBvcHBvc2luZ01hdGNoOiBNQVRDSF9WSVNJQkxFLFxuICAgIG9uQ2hhbmdlKGhhc01hdGNoLCBtb2RlbCkge1xuICAgICAgICBtb2RlbC5oaWRkZW4gPSBoYXNNYXRjaDtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgUmVxdWlyZWRNYXRjaGVyOiBEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyID0ge1xuXG4gICAgbWF0Y2g6IE1BVENIX1JFUVVJUkVELFxuICAgIG9wcG9zaW5nTWF0Y2g6IE1BVENIX09QVElPTkFMLFxuICAgIG9uQ2hhbmdlKGhhc01hdGNoLCBtb2RlbCwgY29udHJvbCwgaW5qZWN0b3IpIHtcblxuICAgICAgICBsZXQgdmFsaWRhdG9yc0NvbmZpZyA9IG51bGw7XG5cbiAgICAgICAgaWYgKGhhc01hdGNoKSB7XG5cbiAgICAgICAgICAgIHZhbGlkYXRvcnNDb25maWcgPSBpc09iamVjdChtb2RlbC52YWxpZGF0b3JzKSA/IHsuLi5tb2RlbC52YWxpZGF0b3JzLCByZXF1aXJlZDogbnVsbH0gOiB7cmVxdWlyZWQ6IG51bGx9O1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpc09iamVjdChtb2RlbC52YWxpZGF0b3JzKSkge1xuXG4gICAgICAgICAgICAgICAgZGVsZXRlIG1vZGVsLnZhbGlkYXRvcnNbXCJyZXF1aXJlZFwiXTtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JzQ29uZmlnID0gey4uLm1vZGVsLnZhbGlkYXRvcnN9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaW5qZWN0b3IuZ2V0KER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UpLnVwZGF0ZVZhbGlkYXRvcnModmFsaWRhdG9yc0NvbmZpZywgY29udHJvbCwgbW9kZWwpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBESVNBQkxFRF9NQVRDSEVSOiBWYWx1ZVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IERZTkFNSUNfTUFUQ0hFUlMsXG4gICAgdXNlVmFsdWU6IERpc2FibGVkTWF0Y2hlcixcbiAgICBtdWx0aTogdHJ1ZVxufTtcblxuZXhwb3J0IGNvbnN0IEhJRERFTl9NQVRDSEVSOiBWYWx1ZVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IERZTkFNSUNfTUFUQ0hFUlMsXG4gICAgdXNlVmFsdWU6IEhpZGRlbk1hdGNoZXIsXG4gICAgbXVsdGk6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBSRVFVSVJFRF9NQVRDSEVSOiBWYWx1ZVByb3ZpZGVyID0ge1xuICAgIHByb3ZpZGU6IERZTkFNSUNfTUFUQ0hFUlMsXG4gICAgdXNlVmFsdWU6IFJlcXVpcmVkTWF0Y2hlcixcbiAgICBtdWx0aTogdHJ1ZVxufTtcblxuZXhwb3J0IGNvbnN0IERZTkFNSUNfTUFUQ0hFUl9QUk9WSURFUlMgPSBbRElTQUJMRURfTUFUQ0hFUiwgSElEREVOX01BVENIRVIsIFJFUVVJUkVEX01BVENIRVJdO1xuIl19
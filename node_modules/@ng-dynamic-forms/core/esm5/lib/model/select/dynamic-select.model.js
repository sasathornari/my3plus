/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ÉµlooseIdentical as looseIdentical } from "@angular/core";
import { DynamicOptionControlModel } from "../dynamic-option-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { isBoolean, isFunction } from "../../utils/core.utils";
/** @type {?} */
export var DYNAMIC_FORM_CONTROL_TYPE_SELECT = "SELECT";
/**
 * @record
 * @template T
 */
export function DynamicSelectModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.compareWithFn;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.filterable;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.multiple;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.placeholder;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.prefix;
    /** @type {?|undefined} */
    DynamicSelectModelConfig.prototype.suffix;
}
/**
 * @template T
 */
var DynamicSelectModel = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicSelectModel, _super);
    function DynamicSelectModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_SELECT;
        _this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;
        _this.filterable = isBoolean(config.filterable) ? config.filterable : false;
        _this.multiple = isBoolean(config.multiple) ? config.multiple : false;
        _this.placeholder = config.placeholder || "";
        _this.prefix = config.prefix || null;
        _this.suffix = config.suffix || null;
        return _this;
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    DynamicSelectModel.prototype.select = /**
     * @param {...?} indices
     * @return {?}
     */
    function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i] = arguments[_i];
        }
        /** @type {?} */
        var value = this.multiple ? indices.map((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.get(index).value; })) : this.get(indices[0]).value;
        this.value = value;
    };
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicSelectModel.prototype, "filterable", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicSelectModel.prototype, "multiple", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicSelectModel.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicSelectModel.prototype, "prefix", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicSelectModel.prototype, "suffix", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicSelectModel.prototype, "type", void 0);
    return DynamicSelectModel;
}(DynamicOptionControlModel));
export { DynamicSelectModel };
if (false) {
    /** @type {?} */
    DynamicSelectModel.prototype.compareWithFn;
    /** @type {?} */
    DynamicSelectModel.prototype.filterable;
    /** @type {?} */
    DynamicSelectModel.prototype.multiple;
    /** @type {?} */
    DynamicSelectModel.prototype.placeholder;
    /** @type {?} */
    DynamicSelectModel.prototype.prefix;
    /** @type {?} */
    DynamicSelectModel.prototype.suffix;
    /** @type {?} */
    DynamicSelectModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1zZWxlY3QubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctZHluYW1pYy1mb3Jtcy9jb3JlLyIsInNvdXJjZXMiOlsibGliL21vZGVsL3NlbGVjdC9keW5hbWljLXNlbGVjdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLElBQUksY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSx5QkFBeUIsRUFBbUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUU3RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFL0QsTUFBTSxLQUFPLGdDQUFnQyxHQUFHLFFBQVE7Ozs7O0FBRXhELDhDQVFDOzs7SUFORyxpREFBOEM7O0lBQzlDLDhDQUFxQjs7SUFDckIsNENBQW1COztJQUNuQiwrQ0FBcUI7O0lBQ3JCLDBDQUFnQjs7SUFDaEIsMENBQWdCOzs7OztBQUdwQjtJQUEyQyw4Q0FBNEI7SUFXbkUsNEJBQVksTUFBbUMsRUFBRSxNQUFpQztRQUFsRixZQUVJLGtCQUFNLE1BQU0sRUFBRSxNQUFNLENBQUMsU0FReEI7UUFad0IsVUFBSSxHQUFXLGdDQUFnQyxDQUFDO1FBTXJFLEtBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQzlGLEtBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNFLEtBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3JFLEtBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDNUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztRQUNwQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDOztJQUN4QyxDQUFDOzs7OztJQUVELG1DQUFNOzs7O0lBQU47UUFBQSxpQkFLQztRQUxNLGlCQUFvQjthQUFwQixVQUFvQixFQUFwQixxQkFBb0IsRUFBcEIsSUFBb0I7WUFBcEIsNEJBQW9COzs7WUFFakIsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBckIsQ0FBcUIsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFFdEcsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQXpCZTtRQUFmLFlBQVksRUFBRTs7MERBQXFCO0lBQ3BCO1FBQWYsWUFBWSxFQUFFOzt3REFBbUI7SUFDbEI7UUFBZixZQUFZLEVBQUU7OzJEQUFxQjtJQUNwQjtRQUFmLFlBQVksRUFBRTs7c0RBQXVCO0lBQ3RCO1FBQWYsWUFBWSxFQUFFOztzREFBdUI7SUFFdEI7UUFBZixZQUFZLEVBQUU7O29EQUEwRDtJQW9CN0UseUJBQUM7Q0FBQSxBQTdCRCxDQUEyQyx5QkFBeUIsR0E2Qm5FO1NBN0JZLGtCQUFrQjs7O0lBRTNCLDJDQUFxRDs7SUFDckQsd0NBQW9DOztJQUNwQyxzQ0FBa0M7O0lBQ2xDLHlDQUFvQzs7SUFDcEMsb0NBQXNDOztJQUN0QyxvQ0FBc0M7O0lBRXRDLGtDQUF5RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1bG9vc2VJZGVudGljYWwgYXMgbG9vc2VJZGVudGljYWwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRHluYW1pY09wdGlvbkNvbnRyb2xNb2RlbCwgRHluYW1pY09wdGlvbkNvbnRyb2xNb2RlbENvbmZpZyB9IGZyb20gXCIuLi9keW5hbWljLW9wdGlvbi1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1sYXlvdXQubW9kZWxcIjtcbmltcG9ydCB7IHNlcmlhbGl6YWJsZSB9IGZyb20gXCIuLi8uLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNCb29sZWFuLCBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfU0VMRUNUID0gXCJTRUxFQ1RcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljU2VsZWN0TW9kZWxDb25maWc8VD4gZXh0ZW5kcyBEeW5hbWljT3B0aW9uQ29udHJvbE1vZGVsQ29uZmlnPFQ+IHtcblxuICAgIGNvbXBhcmVXaXRoRm4/OiAobzE6IGFueSwgbzI6IGFueSkgPT4gYm9vbGVhbjtcbiAgICBmaWx0ZXJhYmxlPzogYm9vbGVhbjtcbiAgICBtdWx0aXBsZT86IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgcHJlZml4Pzogc3RyaW5nO1xuICAgIHN1ZmZpeD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIER5bmFtaWNTZWxlY3RNb2RlbDxUPiBleHRlbmRzIER5bmFtaWNPcHRpb25Db250cm9sTW9kZWw8VD4ge1xuXG4gICAgY29tcGFyZVdpdGhGbjogKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSkgPT4gYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgZmlsdGVyYWJsZTogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgbXVsdGlwbGU6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHByZWZpeDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgc3VmZml4OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfU0VMRUNUO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEeW5hbWljU2VsZWN0TW9kZWxDb25maWc8VD4sIGxheW91dD86IER5bmFtaWNGb3JtQ29udHJvbExheW91dCkge1xuXG4gICAgICAgIHN1cGVyKGNvbmZpZywgbGF5b3V0KTtcblxuICAgICAgICB0aGlzLmNvbXBhcmVXaXRoRm4gPSBpc0Z1bmN0aW9uKGNvbmZpZy5jb21wYXJlV2l0aEZuKSA/IGNvbmZpZy5jb21wYXJlV2l0aEZuIDogbG9vc2VJZGVudGljYWw7XG4gICAgICAgIHRoaXMuZmlsdGVyYWJsZSA9IGlzQm9vbGVhbihjb25maWcuZmlsdGVyYWJsZSkgPyBjb25maWcuZmlsdGVyYWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzLm11bHRpcGxlID0gaXNCb29sZWFuKGNvbmZpZy5tdWx0aXBsZSkgPyBjb25maWcubXVsdGlwbGUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGNvbmZpZy5wbGFjZWhvbGRlciB8fCBcIlwiO1xuICAgICAgICB0aGlzLnByZWZpeCA9IGNvbmZpZy5wcmVmaXggfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zdWZmaXggPSBjb25maWcuc3VmZml4IHx8IG51bGw7XG4gICAgfVxuXG4gICAgc2VsZWN0KC4uLmluZGljZXM6IG51bWJlcltdKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLm11bHRpcGxlID8gaW5kaWNlcy5tYXAoaW5kZXggPT4gdGhpcy5nZXQoaW5kZXgpLnZhbHVlKSA6IHRoaXMuZ2V0KGluZGljZXNbMF0pLnZhbHVlO1xuXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG4iXX0=
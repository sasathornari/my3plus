/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormGroupModel } from "../form-group/dynamic-form-group.model";
import { serializable } from "../../decorator/serializable.decorator";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = "CHECKBOX_GROUP";
export class DynamicCheckboxGroupModel extends DynamicFormGroupModel {
    /**
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    check(...indices) {
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        index => this.group[index].checked = true));
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    uncheck(...indices) {
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        index => this.group[index].checked = false));
    }
    /**
     * @return {?}
     */
    checkAll() {
        this.group.forEach((/**
         * @param {?} model
         * @return {?}
         */
        model => model.checked = true));
    }
    /**
     * @return {?}
     */
    uncheckAll() {
        this.group.forEach((/**
         * @param {?} model
         * @return {?}
         */
        model => model.checked = false));
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Array)
], DynamicCheckboxGroupModel.prototype, "group", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicCheckboxGroupModel.prototype, "type", void 0);
if (false) {
    /** @type {?} */
    DynamicCheckboxGroupModel.prototype.group;
    /** @type {?} */
    DynamicCheckboxGroupModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jaGVja2JveC1ncm91cC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvY2hlY2tib3gvZHluYW1pYy1jaGVja2JveC1ncm91cC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBK0IsTUFBTSx3Q0FBd0MsQ0FBQztBQUc1RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7O0FBRXRFLE1BQU0sT0FBTyx3Q0FBd0MsR0FBRyxnQkFBZ0I7QUFFeEUsTUFBTSxPQUFPLHlCQUEwQixTQUFRLHFCQUFxQjs7Ozs7SUFNaEUsWUFBWSxNQUFtQyxFQUFFLE1BQWlDO1FBQzlFLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFIRCxTQUFJLEdBQVcsd0NBQXdDLENBQUM7SUFJakYsQ0FBQzs7Ozs7SUFFRCxLQUFLLENBQUMsR0FBRyxPQUFpQjtRQUN0QixPQUFPLENBQUMsT0FBTzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsR0FBRyxPQUFpQjtRQUN4QixPQUFPLENBQUMsT0FBTzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFDLENBQUM7SUFDaEUsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFDLENBQUM7SUFDdEQsQ0FBQzs7OztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNKO0FBdkJtQjtJQUFmLFlBQVksRUFBRTs7d0RBQStCO0FBRTlCO0lBQWYsWUFBWSxFQUFFOzt1REFBa0U7OztJQUZqRiwwQ0FBOEM7O0lBRTlDLHlDQUFpRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNGb3JtR3JvdXBNb2RlbCwgRHluYW1pY0Zvcm1Hcm91cE1vZGVsQ29uZmlnIH0gZnJvbSBcIi4uL2Zvcm0tZ3JvdXAvZHluYW1pYy1mb3JtLWdyb3VwLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljQ2hlY2tib3hNb2RlbCB9IGZyb20gXCIuL2R5bmFtaWMtY2hlY2tib3gubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgc2VyaWFsaXphYmxlIH0gZnJvbSBcIi4uLy4uL2RlY29yYXRvci9zZXJpYWxpemFibGUuZGVjb3JhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0NIRUNLQk9YX0dST1VQID0gXCJDSEVDS0JPWF9HUk9VUFwiO1xuXG5leHBvcnQgY2xhc3MgRHluYW1pY0NoZWNrYm94R3JvdXBNb2RlbCBleHRlbmRzIER5bmFtaWNGb3JtR3JvdXBNb2RlbCB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgZ3JvdXA6IER5bmFtaWNDaGVja2JveE1vZGVsW107XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gRFlOQU1JQ19GT1JNX0NPTlRST0xfVFlQRV9DSEVDS0JPWF9HUk9VUDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0Zvcm1Hcm91cE1vZGVsQ29uZmlnLCBsYXlvdXQ/OiBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuICAgIH1cblxuICAgIGNoZWNrKC4uLmluZGljZXM6IG51bWJlcltdKTogdm9pZCB7XG4gICAgICAgIGluZGljZXMuZm9yRWFjaChpbmRleCA9PiB0aGlzLmdyb3VwW2luZGV4XS5jaGVja2VkID0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgdW5jaGVjayguLi5pbmRpY2VzOiBudW1iZXJbXSk6IHZvaWQge1xuICAgICAgICBpbmRpY2VzLmZvckVhY2goaW5kZXggPT4gdGhpcy5ncm91cFtpbmRleF0uY2hlY2tlZCA9IGZhbHNlKTtcbiAgICB9XG5cbiAgICBjaGVja0FsbCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ncm91cC5mb3JFYWNoKG1vZGVsID0+IG1vZGVsLmNoZWNrZWQgPSB0cnVlKTtcbiAgICB9XG5cbiAgICB1bmNoZWNrQWxsKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdyb3VwLmZvckVhY2gobW9kZWwgPT4gbW9kZWwuY2hlY2tlZCA9IGZhbHNlKTtcbiAgICB9XG59XG4iXX0=
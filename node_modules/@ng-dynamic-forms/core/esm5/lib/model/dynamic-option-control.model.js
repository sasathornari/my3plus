/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isObservable, of } from "rxjs";
import { map } from "rxjs/operators";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable, serialize } from "../decorator/serializable.decorator";
import { isBoolean } from "../utils/core.utils";
/**
 * @record
 * @template T
 */
export function DynamicFormOptionConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicFormOptionConfig.prototype.disabled;
    /** @type {?|undefined} */
    DynamicFormOptionConfig.prototype.label;
    /** @type {?} */
    DynamicFormOptionConfig.prototype.value;
}
/**
 * @template T
 */
var DynamicFormOption = /** @class */ (function () {
    function DynamicFormOption(config) {
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.label = config.label || null;
        this.value = config.value;
    }
    Object.defineProperty(DynamicFormOption.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this.label;
        },
        set: /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.label = text;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormOption.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return serialize(this);
    };
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicFormOption.prototype, "disabled", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicFormOption.prototype, "label", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Object)
    ], DynamicFormOption.prototype, "value", void 0);
    return DynamicFormOption;
}());
export { DynamicFormOption };
if (false) {
    /** @type {?} */
    DynamicFormOption.prototype.disabled;
    /** @type {?} */
    DynamicFormOption.prototype.label;
    /** @type {?} */
    DynamicFormOption.prototype.value;
}
/**
 * @record
 * @template T
 */
export function DynamicOptionControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicOptionControlModelConfig.prototype.options;
}
/**
 * @abstract
 * @template T
 */
var DynamicOptionControlModel = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicOptionControlModel, _super);
    function DynamicOptionControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this._options = [];
        _this.options = config.options;
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    DynamicOptionControlModel.prototype.updateOptions$ = /**
     * @private
     * @return {?}
     */
    function () {
        this.options$ = of(this.options);
    };
    Object.defineProperty(DynamicOptionControlModel.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            var _this = this;
            if (Array.isArray(options)) {
                this._options = ((/** @type {?} */ (options))).map((/**
                 * @param {?} optionConfig
                 * @return {?}
                 */
                function (optionConfig) {
                    return new DynamicFormOption(optionConfig);
                }));
                this.updateOptions$();
            }
            else if (isObservable(options)) {
                this.options$ = ((/** @type {?} */ (options))).pipe(map((/**
                 * @param {?} optionsConfig
                 * @return {?}
                 */
                function (optionsConfig) {
                    /** @type {?} */
                    var options = optionsConfig.map((/**
                     * @param {?} optionConfig
                     * @return {?}
                     */
                    function (optionConfig) { return new DynamicFormOption(optionConfig); }));
                    _this._options = options;
                    return options;
                })));
            }
            else {
                this.updateOptions$();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} optionConfig
     * @return {?}
     */
    DynamicOptionControlModel.prototype.add = /**
     * @param {?} optionConfig
     * @return {?}
     */
    function (optionConfig) {
        return this.insert(this.options.length, optionConfig);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicOptionControlModel.prototype.get = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.options[index];
    };
    /**
     * @param {?} index
     * @param {?} optionConfig
     * @return {?}
     */
    DynamicOptionControlModel.prototype.insert = /**
     * @param {?} index
     * @param {?} optionConfig
     * @return {?}
     */
    function (index, optionConfig) {
        /** @type {?} */
        var option = new DynamicFormOption(optionConfig);
        this.options.splice(index, 0, option);
        this.updateOptions$();
        return option;
    };
    /**
     * @param {...?} indices
     * @return {?}
     */
    DynamicOptionControlModel.prototype.remove = /**
     * @param {...?} indices
     * @return {?}
     */
    function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i] = arguments[_i];
        }
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.options.splice(index, 1); }));
        this.updateOptions$();
    };
    tslib_1.__decorate([
        serializable("options"),
        tslib_1.__metadata("design:type", Array)
    ], DynamicOptionControlModel.prototype, "_options", void 0);
    return DynamicOptionControlModel;
}(DynamicFormValueControlModel));
export { DynamicOptionControlModel };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicOptionControlModel.prototype._options;
    /** @type {?} */
    DynamicOptionControlModel.prototype.options$;
    /**
     * @abstract
     * @param {...?} indices
     * @return {?}
     */
    DynamicOptionControlModel.prototype.select = function (indices) { };
}
//# sourceMappingURL=data:application/json;base64,
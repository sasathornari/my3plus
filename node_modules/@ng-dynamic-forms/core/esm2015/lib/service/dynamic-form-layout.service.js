/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, QueryList } from "@angular/core";
import { DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT } from "../directive/dynamic-template.directive";
import { isObject } from "../utils/core.utils";
import * as i0 from "@angular/core";
export class DynamicFormLayoutService {
    /**
     * @param {?} id
     * @param {?} formLayout
     * @return {?}
     */
    findById(id, formLayout) {
        if (isObject(formLayout)) {
            for (let key of Object.keys(formLayout)) {
                if (key === id) {
                    return formLayout[key];
                }
            }
        }
        return null;
    }
    /**
     * @param {?} model
     * @param {?} formLayout
     * @return {?}
     */
    findByModel(model, formLayout) {
        /** @type {?} */
        let controlLayout = null;
        if (isObject(formLayout)) {
            for (let key of Object.keys(formLayout)) {
                key.split(",").forEach((/**
                 * @param {?} substring
                 * @return {?}
                 */
                substring => {
                    /** @type {?} */
                    const selector = substring.trim();
                    if (selector === model.id || selector === model.type) {
                        controlLayout = formLayout[key];
                    }
                }));
            }
        }
        return controlLayout;
    }
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    filterTemplatesByModel(model, templates) {
        /** @type {?} */
        const filterCallback = (/**
         * @param {?} template
         * @return {?}
         */
        (template) => {
            return template.modelId === model.id || template.modelType === model.type;
        });
        if (templates instanceof QueryList) {
            return templates.filter(filterCallback);
        }
        else if (Array.isArray(templates)) {
            return templates.filter(filterCallback);
        }
        return [];
    }
    /**
     * @param {?} model
     * @param {?} templates
     * @param {?} alignment
     * @return {?}
     */
    getAlignedTemplate(model, templates, alignment) {
        return this.filterTemplatesByModel(model, templates)
            .find((/**
         * @param {?} template
         * @return {?}
         */
        template => template.as === null && template.align === alignment));
    }
    /*
        getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
            return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
        }
        */
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    getStartTemplate(model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);
    }
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    getEndTemplate(model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);
    }
    /**
     * @param {?} layout
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    getClass(layout, context, place) {
        if (layout !== null && layout.hasOwnProperty(context)) {
            /** @type {?} */
            let config = (/** @type {?} */ (layout[context]));
            if (config.hasOwnProperty(place)) {
                return (/** @type {?} */ (config[place]));
            }
        }
        return "";
    }
    /**
     * @param {?} model
     * @return {?}
     */
    getElementId(model) {
        /** @type {?} */
        let id = model.id;
        /** @type {?} */
        let parent = model.parent;
        while (parent !== null) {
            if (parent instanceof DynamicFormArrayGroupModel) {
                id = `${parent.context.id}-${parent.index}-${model.id}`;
                break;
            }
            parent = parent.parent;
        }
        return id;
    }
}
DynamicFormLayoutService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */ DynamicFormLayoutService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormLayoutService_Factory() { return new DynamicFormLayoutService(); }, token: DynamicFormLayoutService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,
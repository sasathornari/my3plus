import { __extends, __decorate, __metadata, __spread, __values, __assign, __read } from 'tslib';
import { BehaviorSubject, isObservable, of, merge } from 'rxjs';
import 'reflect-metadata';
import { tap, map, startWith } from 'rxjs/operators';
import { Directive, ElementRef, Renderer2, Input, TemplateRef, ɵlooseIdentical, InjectionToken, Injectable, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, QueryList, Injector, INJECTOR, NgModule } from '@angular/core';
import { Validators, NG_VALIDATORS, NG_ASYNC_VALIDATORS, FormArray, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isBoolean(value) {
    return typeof value === "boolean";
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === "function";
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === "number";
}
/**
 * @param {?} value
 * @return {?}
 */
function isObject(value) {
    return typeof value === "object" && value !== null;
}
/**
 * @param {?} value
 * @return {?}
 */
function isString(value) {
    return typeof value === "string";
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicFormControlComponent = /** @class */ (function () {
    function DynamicFormControlComponent(layoutService, validationService) {
        this.layoutService = layoutService;
        this.validationService = validationService;
        this._hasFocus = false;
    }
    Object.defineProperty(DynamicFormControlComponent.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var control = this.group.get(this.model.id);
            if (control === null) {
                throw new Error("form group does not contain an abstract control with id " + this.model.id);
            }
            return (/** @type {?} */ (control));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "elementId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layoutService.getElementId(this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "errorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.validationService.createErrorMessages(this.control, this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "hasFocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hasFocus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlComponent.prototype, "showErrorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    DynamicFormControlComponent.prototype.getClass = /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    function (context, place, model) {
        if (model === void 0) { model = this.model; }
        /** @type {?} */
        var controlLayout = this.layoutService.findByModel(model, this.layout) || (/** @type {?} */ (model.layout));
        return this.layoutService.getClass(controlLayout, context, place);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = false;
        this.blur.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlComponent.prototype.onChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this.change.emit($event);
    };
    /**
     * @param {?} $event
     * @param {?} model
     * @return {?}
     */
    DynamicFormControlComponent.prototype.onEmbeddedCheckboxChange = /**
     * @param {?} $event
     * @param {?} model
     * @return {?}
     */
    function ($event, model) {
        this.onChange($event);
        model.value = ((/** @type {?} */ ($event.target))).checked;
    };
    /**
     * @param {?} $event
     * @param {?=} type
     * @param {?=} bypass
     * @return {?}
     */
    DynamicFormControlComponent.prototype.onCustomEvent = /**
     * @param {?} $event
     * @param {?=} type
     * @param {?=} bypass
     * @return {?}
     */
    function ($event, type, bypass) {
        if (type === void 0) { type = null; }
        if (bypass === void 0) { bypass = false; }
        /** @type {?} */
        var emitter = (/** @type {?} */ (this.customEvent));
        if (bypass) {
            emitter.emit($event);
        }
        else if (isString(type)) {
            emitter.emit({ customEvent: $event, customEventType: type });
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event instanceof Event) {
            $event.stopPropagation();
        }
        this._hasFocus = true;
        this.focus.emit($event);
    };
    return DynamicFormControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicFormArrayComponent = /** @class */ (function (_super) {
    __extends(DynamicFormArrayComponent, _super);
    function DynamicFormArrayComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DynamicFormArrayComponent.prototype, "array", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.control));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormArrayComponent.prototype, "startTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layoutService.getStartTemplate(this.model, this.templates);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormArrayComponent.prototype, "endTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layoutService.getEndTemplate(this.model, this.templates);
        },
        enumerable: true,
        configurable: true
    });
    return DynamicFormArrayComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var DynamicFormControlEventType = {
    Blur: "blur", Change: "change", Custom: "custom", Focus: "focus",
};
/**
 * @param {?} $event
 * @return {?}
 */
function isDynamicFormControlEvent($event) {
    return isObject($event) && $event.hasOwnProperty("$event");
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicFormComponent = /** @class */ (function () {
    function DynamicFormComponent(formService, layoutService) {
        this.formService = formService;
        this.layoutService = layoutService;
    }
    /**
     * @param {?} _index
     * @param {?} model
     * @return {?}
     */
    DynamicFormComponent.prototype.trackByFn = /**
     * @param {?} _index
     * @param {?} model
     * @return {?}
     */
    function (_index, model) {
        return model.id;
    };
    /**
     * @param {?} model
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    DynamicFormComponent.prototype.getClass = /**
     * @param {?} model
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    function (model, context, place) {
        /** @type {?} */
        var controlLayout = this.layoutService.findByModel(model, this.formLayout) || (/** @type {?} */ (model.layout));
        return this.layoutService.getClass(controlLayout, context, place);
    };
    /**
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    DynamicFormComponent.prototype.onEvent = /**
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    function ($event, type) {
        switch (type) {
            case DynamicFormControlEventType.Blur:
                this.blur.emit($event);
                break;
            case DynamicFormControlEventType.Change:
                this.change.emit($event);
                break;
            case DynamicFormControlEventType.Focus:
                this.focus.emit($event);
                break;
            case DynamicFormControlEventType.Custom:
                this.customEvent.emit($event);
                break;
        }
    };
    return DynamicFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var METADATA_KEY_SERIALIZABLE = "SERIALIZABLE";
/**
 * @param {?=} name
 * @return {?}
 */
function serializable(name) {
    return (/**
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function (target, key) {
        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, { key: key, name: name || key }, target, key);
    });
}
/**
 * @param {?} target
 * @return {?}
 */
function getSerializables(target) {
    /** @type {?} */
    var serializables = [];
    for (var key in target) {
        /** @type {?} */
        var metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);
        if (metadata) {
            serializables.push(metadata);
        }
    }
    return serializables;
}
/**
 * @param {?} target
 * @param {?=} prototype
 * @return {?}
 */
function serialize(target, prototype) {
    return getSerializables(prototype || target).reduce((/**
     * @param {?} prev
     * @param {?} prop
     * @return {?}
     */
    function (prev, prop) {
        prev[prop.name] = target[prop.key];
        return prev;
    }), {});
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var DynamicFormControlModel = /** @class */ (function () {
    function DynamicFormControlModel(config, layout) {
        var _this = this;
        if (layout === void 0) { layout = null; }
        this.parent = null;
        this.asyncValidators = config.asyncValidators || null;
        this.errorMessages = config.errorMessages || null;
        this.hidden = isBoolean(config.hidden) ? config.hidden : false;
        this.id = config.id;
        this.label = config.label || null;
        this.labelTooltip = config.labelTooltip || null;
        this.controlTooltip = config.controlTooltip || null;
        this.layout = layout;
        this.name = config.name || config.id;
        this.relations = Array.isArray(config.relations) ? config.relations : [];
        this.updateOn = isString(config.updateOn) ? config.updateOn : null;
        this.validators = config.validators || null;
        this.disabled$ = new BehaviorSubject(isBoolean(config.disabled) ? config.disabled : false);
        this.disabled$.subscribe((/**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) { return _this._disabled = disabled; }));
        this.disabledChanges = this.disabled$.asObservable();
    }
    Object.defineProperty(DynamicFormControlModel.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled$.getValue();
        },
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.disabled$.next(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlModel.prototype, "hasErrorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return isObject(this.errorMessages);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormControlModel.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return serialize(this);
    };
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "asyncValidators", void 0);
    __decorate([
        serializable("disabled"),
        __metadata("design:type", Boolean)
    ], DynamicFormControlModel.prototype, "_disabled", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "errorMessages", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicFormControlModel.prototype, "hidden", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "id", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "label", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "labelTooltip", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "controlTooltip", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "layout", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "name", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicFormControlModel.prototype, "relations", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormControlModel.prototype, "updateOn", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormControlModel.prototype, "validators", void 0);
    return DynamicFormControlModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var DynamicFormValueControlModel = /** @class */ (function (_super) {
    __extends(DynamicFormValueControlModel, _super);
    function DynamicFormValueControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.additional = isObject(config.additional) ? config.additional : null;
        _this.hint = config.hint || null;
        _this.required = isBoolean(config.required) ? config.required : false;
        _this.tabIndex = config.tabIndex || null;
        _this.value$ = new BehaviorSubject(config.value !== null && config.value !== undefined ? config.value : null);
        _this.value$.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return _this._value = value; }));
        _this.valueChanges = _this.value$.asObservable();
        return _this;
    }
    Object.defineProperty(DynamicFormValueControlModel.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value$.getValue();
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value$.next(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    DynamicFormValueControlModel.prototype.getAdditional = /**
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    function (key, defaultValue) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;
    };
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormValueControlModel.prototype, "additional", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormValueControlModel.prototype, "hint", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicFormValueControlModel.prototype, "required", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicFormValueControlModel.prototype, "tabIndex", void 0);
    __decorate([
        serializable("value"),
        __metadata("design:type", Object)
    ], DynamicFormValueControlModel.prototype, "_value", void 0);
    return DynamicFormValueControlModel;
}(DynamicFormControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormArrayGroupModel = /** @class */ (function () {
    function DynamicFormArrayGroupModel(context, group, index) {
        if (group === void 0) { group = []; }
        if (index === void 0) { index = -1; }
        this.$implicit = this;
        this.context = context;
        this.group = group;
        this.index = index;
    }
    Object.defineProperty(DynamicFormArrayGroupModel.prototype, "parent", {
        get: /**
         * @return {?}
         */
        function () {
            return this.context;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicFormArrayGroupModel.prototype.get = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.group[index];
    };
    /**
     * @return {?}
     */
    DynamicFormArrayGroupModel.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return serialize(this);
    };
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicFormArrayGroupModel.prototype, "group", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicFormArrayGroupModel.prototype, "index", void 0);
    return DynamicFormArrayGroupModel;
}());
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_ARRAY = "ARRAY";
var DynamicFormArrayModel = /** @class */ (function (_super) {
    __extends(DynamicFormArrayModel, _super);
    function DynamicFormArrayModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.groups = [];
        // only to recreate model from JSON
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
        if (isFunction(config.groupFactory)) {
            _this.groupFactory = config.groupFactory;
        }
        else {
            throw new Error("group factory function must be specified for DynamicFormArrayModel");
        }
        _this.groupAsyncValidators = config.groupAsyncValidators || null;
        _this.groupPrototype = _this.groupFactory();
        _this.groupValidators = config.groupValidators || null;
        _this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;
        if (Array.isArray(config.groups)) {
            config.groups.forEach((/**
             * @param {?} arrayGroup
             * @param {?} index
             * @return {?}
             */
            function (arrayGroup, index) {
                _this.groups.push(new DynamicFormArrayGroupModel(_this, arrayGroup.group, arrayGroup.index || index));
            }));
        }
        else {
            for (var index = 0; index < _this.initialCount; index++) {
                _this.addGroup();
            }
        }
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    DynamicFormArrayModel.prototype.updateGroupIndex = /**
     * @private
     * @return {?}
     */
    function () {
        this.groups.forEach((/**
         * @param {?} group
         * @param {?} index
         * @return {?}
         */
        function (group, index) { return group.index = index; }));
    };
    Object.defineProperty(DynamicFormArrayModel.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this.groups.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicFormArrayModel.prototype.get = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.groups[index];
    };
    /**
     * @return {?}
     */
    DynamicFormArrayModel.prototype.addGroup = /**
     * @return {?}
     */
    function () {
        return this.insertGroup(this.groups.length);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicFormArrayModel.prototype.insertGroup = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var group = new DynamicFormArrayGroupModel(this, this.groupFactory());
        this.groups.splice(index, 0, group);
        this.updateGroupIndex();
        return group;
    };
    /**
     * @param {?} index
     * @param {?} step
     * @return {?}
     */
    DynamicFormArrayModel.prototype.moveGroup = /**
     * @param {?} index
     * @param {?} step
     * @return {?}
     */
    function (index, step) {
        var _a;
        (_a = this.groups).splice.apply(_a, __spread([index + step, 0], this.groups.splice(index, 1)));
        this.updateGroupIndex();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicFormArrayModel.prototype.removeGroup = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.groups.splice(index, 1);
        this.updateGroupIndex();
    };
    /**
     * @return {?}
     */
    DynamicFormArrayModel.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.groups.splice(0);
        this.updateGroupIndex();
    };
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormArrayModel.prototype, "groupAsyncValidators", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormArrayModel.prototype, "groupValidators", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicFormArrayModel.prototype, "groups", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicFormArrayModel.prototype, "initialCount", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicFormArrayModel.prototype, "groupPrototype", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormArrayModel.prototype, "type", void 0);
    return DynamicFormArrayModel;
}(DynamicFormControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var DynamicCheckControlModel = /** @class */ (function (_super) {
    __extends(DynamicCheckControlModel, _super);
    function DynamicCheckControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.labelPosition = config.labelPosition || null;
        _this.checked = isBoolean(_this.value) ? _this.value : false;
        return _this;
    }
    Object.defineProperty(DynamicCheckControlModel.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value;
        },
        set: /**
         * @param {?} checked
         * @return {?}
         */
        function (checked) {
            this.value = checked;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicCheckControlModel.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.checked = !this.checked;
    };
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicCheckControlModel.prototype, "labelPosition", void 0);
    return DynamicCheckControlModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = "CHECKBOX";
var DynamicCheckboxModel = /** @class */ (function (_super) {
    __extends(DynamicCheckboxModel, _super);
    function DynamicCheckboxModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
        _this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicCheckboxModel.prototype, "indeterminate", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicCheckboxModel.prototype, "type", void 0);
    return DynamicCheckboxModel;
}(DynamicCheckControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var AUTOCOMPLETE_OFF = "off";
/** @type {?} */
var AUTOCOMPLETE_ON = "on";
/** @type {?} */
var AUTOFILL_TOKEN_BILLING = "billing";
/** @type {?} */
var AUTOFILL_TOKEN_SHIPPING = "shipping";
/** @type {?} */
var AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];
/** @type {?} */
var AUTOFILL_TOKEN_HOME = "home";
/** @type {?} */
var AUTOFILL_TOKEN_WORK = "work";
/** @type {?} */
var AUTOFILL_TOKEN_MOBILE = "mobile";
/** @type {?} */
var AUTOFILL_TOKEN_FAX = "fax";
/** @type {?} */
var AUTOFILL_TOKEN_PAGER = "pager";
/** @type {?} */
var AUTOFILL_TOKENS_CONTACT = [
    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK
];
/** @type {?} */
var AUTOFILL_FIELD_STREET_ADDRESS = "street-address";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LINE_1 = "address-line1";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LINE_2 = "address-line2";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LINE_3 = "address-line3";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LEVEL_4 = "address-level4";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LEVEL_3 = "address-level3";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LEVEL_2 = "address-level2";
/** @type {?} */
var AUTOFILL_FIELD_ADDRESS_LEVEL_1 = "address-level1";
/** @type {?} */
var AUTOFILL_FIELD_NAME = "name";
/** @type {?} */
var AUTOFILL_FIELD_HONORIFIC_PREFIX = "honorific-prefix";
/** @type {?} */
var AUTOFILL_FIELD_GIVEN_NAME = "given-name";
/** @type {?} */
var AUTOFILL_FIELD_ADDITIONAL_NAME = "additional-name";
/** @type {?} */
var AUTOFILL_FIELD_FAMILY_NAME = "family-name";
/** @type {?} */
var AUTOFILL_FIELD_HONORIFIC_SUFFIX = "honorific-suffix";
/** @type {?} */
var AUTOFILL_FIELD_NICKNAME = "nickname";
/** @type {?} */
var AUTOFILL_FIELD_USERNAME = "username";
/** @type {?} */
var AUTOFILL_FIELD_NEW_PASSWORD = "new-password";
/** @type {?} */
var AUTOFILL_FIELD_CURRENT_PASSWORD = "current-password";
/** @type {?} */
var AUTOFILL_FIELD_ORGANIZATION_TITLE = "organization-title";
/** @type {?} */
var AUTOFILL_FIELD_ORGANIZATION = "organization";
/** @type {?} */
var AUTOFILL_FIELD_COUNTRY = "country";
/** @type {?} */
var AUTOFILL_FIELD_COUNTRY_NAME = "country-name";
/** @type {?} */
var AUTOFILL_FIELD_POSTAL_CODE = "postal-code";
/** @type {?} */
var AUTOFILL_FIELD_CC_NAME = "cc-name";
/** @type {?} */
var AUTOFILL_FIELD_CC_GIVEN_NAME = "cc-given-name";
/** @type {?} */
var AUTOFILL_FIELD_CC_ADDITIONAL_NAME = "cc-additional-name";
/** @type {?} */
var AUTOFILL_FIELD_CC_FAMILY_NAME = "cc-family-name";
/** @type {?} */
var AUTOFILL_FIELD_CC_NUMBER = "cc-number";
/** @type {?} */
var AUTOFILL_FIELD_CC_EXP = "cc-exp";
/** @type {?} */
var AUTOFILL_FIELD_CC_EXP_MONTH = "cc-exp-month";
/** @type {?} */
var AUTOFILL_FIELD_CC_EXP_YEAR = "cc-exp-year";
/** @type {?} */
var AUTOFILL_FIELD_CC_CSC = "cc-csc";
/** @type {?} */
var AUTOFILL_FIELD_CC_TYPE = "cc-type";
/** @type {?} */
var AUTOFILL_FIELD_TRANSACTION_CURRENCY = "transaction-currency";
/** @type {?} */
var AUTOFILL_FIELD_TRANSACTION_AMOUNT = "transaction-amount";
/** @type {?} */
var AUTOFILL_FIELD_LANGUAGE = "language";
/** @type {?} */
var AUTOFILL_FIELD_BDAY = "bday";
/** @type {?} */
var AUTOFILL_FIELD_BDAY_DAY = "bday-day";
/** @type {?} */
var AUTOFILL_FIELD_BDAY_MONTH = "bday-month";
/** @type {?} */
var AUTOFILL_FIELD_BDAY_YEAR = "bday-year";
/** @type {?} */
var AUTOFILL_FIELD_SEX = "sex";
/** @type {?} */
var AUTOFILL_FIELD_URL = "url";
/** @type {?} */
var AUTOFILL_FIELD_PHOTO = "photo";
/** @type {?} */
var AUTOFILL_FIELDS = [
    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,
    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,
    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,
    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,
    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,
    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,
    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,
    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,
    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,
    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,
    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,
    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO
];
/** @type {?} */
var AUTOFILL_FIELD_TEL = "tel";
/** @type {?} */
var AUTOFILL_FIELD_TEL_COUNTRY_CODE = "tel-country-code";
/** @type {?} */
var AUTOFILL_FIELD_TEL_NATIONAL = "tel-national";
/** @type {?} */
var AUTOFILL_FIELD_TEL_AREA_CODE = "tel-area-code";
/** @type {?} */
var AUTOFILL_FIELD_TEL_LOCAL = "tel-local";
/** @type {?} */
var AUTOFILL_FIELD_TEL_LOCAL_PREFIX = "tel-local-prefix";
/** @type {?} */
var AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = "tel-local-suffix";
/** @type {?} */
var AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = "tel-extension";
/** @type {?} */
var AUTOFILL_FIELD_EMAIL = "email";
/** @type {?} */
var AUTOFILL_FIELD_IMPP = "impp";
/** @type {?} */
var AUTOFILL_FIELDS_CONTACT = [
    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,
    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,
    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP
];
/**
 * @param {?} token
 * @return {?}
 */
function isAddressToken(token) {
    return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;
}
/**
 * @param {?} token
 * @return {?}
 */
function isContactField(token) {
    return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;
}
/**
 * @param {?} token
 * @return {?}
 */
function isContactToken(token) {
    return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;
}
/**
 * @param {?} token
 * @return {?}
 */
function isField(token) {
    return AUTOFILL_FIELDS.indexOf(token) > -1;
}
/**
 * @param {?} token
 * @return {?}
 */
function isSectionToken(token) {
    return token.startsWith("section-");
}
/**
 * @param {?} tokens
 * @return {?}
 */
function validate(tokens) {
    /** @type {?} */
    var toExpression = (/**
     * @param {?} total
     * @param {?} currentValue
     * @return {?}
     */
    function (total, currentValue) { return total + "|" + currentValue; });
    /** @type {?} */
    var tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression);
    /** @type {?} */
    var tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression);
    /** @type {?} */
    var fields = AUTOFILL_FIELDS.reduce(toExpression);
    /** @type {?} */
    var fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression);
    /** @type {?} */
    var regex = new RegExp("^(section-\\w+\\s{1})?((" + tokensAddress + "){1}\\s)?((" + fields + "){1}|((" + tokensContact + "){1}\\s{1}(" + fieldsContact + ")))$");
    return regex.test(tokens);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var DynamicInputControlModel = /** @class */ (function (_super) {
    __extends(DynamicInputControlModel, _super);
    function DynamicInputControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;
        _this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        _this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;
        _this.minLength = isNumber(config.minLength) ? config.minLength : null;
        _this.placeholder = config.placeholder || "";
        _this.prefix = config.prefix || null;
        _this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        _this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;
        _this.suffix = config.suffix || null;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "autoComplete", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicInputControlModel.prototype, "autoFocus", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicInputControlModel.prototype, "maxLength", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicInputControlModel.prototype, "minLength", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "placeholder", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "prefix", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicInputControlModel.prototype, "readOnly", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicInputControlModel.prototype, "spellCheck", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "suffix", void 0);
    return DynamicInputControlModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} mask
 * @return {?}
 */
function maskToString(mask) {
    if (isString(mask)) {
        return (/** @type {?} */ (mask));
    }
    else if (mask instanceof RegExp) {
        return mask.toString();
    }
    else if (Array.isArray(mask)) {
        return (/** @type {?} */ (mask.map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return maskToString(value); }))));
    }
    return null;
}
/**
 * @param {?} mask
 * @return {?}
 */
function maskFromString(mask) {
    if (isString(mask)) {
        /** @type {?} */
        var isRegExp = ((/** @type {?} */ (mask))).startsWith("/") && ((/** @type {?} */ (mask))).endsWith("/");
        return isRegExp ? new RegExp(((/** @type {?} */ (mask))).slice(1, mask.length - 1)) : mask;
    }
    else if (Array.isArray(mask)) {
        return (/** @type {?} */ (((/** @type {?} */ (mask))).map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return maskFromString(value); }))));
    }
    return null;
}
/**
 * @param {?} _key
 * @param {?} value
 * @return {?}
 */
function parseReviver(_key, value) {
    /** @type {?} */
    var regexDateISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|([+\-])([\d|:]*))?$/;
    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
/** @type {?} */
var DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
var DynamicInputModel = /** @class */ (function (_super) {
    __extends(DynamicInputModel, _super);
    function DynamicInputModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.files = null;
        _this.list$ = null;
        _this._list = null;
        _this._listId = null;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
        _this.accept = config.accept || null;
        _this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
        _this.mask = config.mask || null;
        _this.max = config.max !== undefined ? config.max : null;
        _this.min = config.min !== undefined ? config.min : null;
        _this.multiple = isBoolean(config.multiple) ? config.multiple : null;
        _this.pattern = config.pattern || null;
        _this.step = isNumber(config.step) ? config.step : null;
        if (config.list !== undefined) {
            _this.list = config.list;
            _this._listId = _this.id + "List";
        }
        return _this;
    }
    Object.defineProperty(DynamicInputModel.prototype, "listId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._listId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicInputModel.prototype, "hasList", {
        get: /**
         * @return {?}
         */
        function () {
            return isObservable(this.list$);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicInputModel.prototype, "list", {
        set: /**
         * @param {?} list
         * @return {?}
         */
        function (list) {
            var _this = this;
            if (Array.isArray(list)) {
                this._list = list;
                this.list$ = of(this._list);
            }
            else if (isObservable(list)) {
                this.list$ = ((/** @type {?} */ (list))).pipe(tap((/**
                 * @param {?} list
                 * @return {?}
                 */
                function (list) { return _this._list = list; })));
            }
            else {
                this._list = null;
                this.list$ = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicInputModel.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var json = _super.prototype.toJSON.call(this);
        if (this.mask !== null) {
            if (this.mask instanceof Function) {
                json.mask = this.mask;
            }
            else {
                json.mask = maskToString(this.mask);
            }
        }
        return json;
    };
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "accept", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "inputType", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicInputModel.prototype, "mask", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicInputModel.prototype, "max", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicInputModel.prototype, "min", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicInputModel.prototype, "multiple", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "pattern", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicInputModel.prototype, "step", void 0);
    __decorate([
        serializable("list"),
        __metadata("design:type", Array)
    ], DynamicInputModel.prototype, "_list", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "type", void 0);
    return DynamicInputModel;
}(DynamicInputControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicFormControlContainerComponent = /** @class */ (function () {
    function DynamicFormControlContainerComponent(componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this.context = null;
        this.componentSubscriptions = [];
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        var _a;
        /** @type {?} */
        var groupChange = (/** @type {?} */ (changes["group"]));
        /** @type {?} */
        var modelChange = (/** @type {?} */ (changes["model"]));
        if (modelChange) {
            this.destroyFormControlComponent();
            this.createFormControlComponent();
        }
        if (groupChange || modelChange) {
            if (this.model) {
                this.unsubscribe();
                if (this.group) {
                    this.control = (/** @type {?} */ (this.group.get(this.model.id)));
                    this.subscriptions.push(this.control.valueChanges.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return _this.onControlValueChanges(value); })));
                }
                this.subscriptions.push(this.model.disabledChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return _this.onModelDisabledUpdates(value); })));
                if (this.model instanceof DynamicFormValueControlModel) {
                    /** @type {?} */
                    var model = (/** @type {?} */ (this.model));
                    this.subscriptions.push(model.valueChanges.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return _this.onModelValueUpdates(value); })));
                }
                if (this.model.relations.length > 0) {
                    (_a = this.subscriptions).push.apply(_a, __spread(this.relationService.subscribeRelations(this.model, this.group, this.control)));
                }
            }
        }
    };
    /**
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyFormControlComponent();
        this.unsubscribe();
    };
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "errorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.validationService.createErrorMessages(this.control, this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hasHint", {
        get: /**
         * @return {?}
         */
        function () {
            return isString(((/** @type {?} */ (this.model))).hint);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hint", {
        get: /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this.model))).hint || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "hasLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return isString(this.model.label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isCheckbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "elementId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layoutService.getElementId(this.model);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "showErrorMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "templates", {
        get: /**
         * @return {?}
         */
        function () {
            return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "startTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
                this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormControlContainerComponent.prototype, "endTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
                this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.getClass = /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    function (context, place, model) {
        if (model === void 0) { model = this.model; }
        /** @type {?} */
        var controlLayout = this.layoutService.findByModel(model, this.layout) || (/** @type {?} */ (model.layout));
        return this.layoutService.getClass(controlLayout, context, place);
    };
    /**
     * @protected
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.createFormControlComponent = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var componentType = this.componentType;
        if (componentType !== null) {
            /** @type {?} */
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentViewContainerRef.clear();
            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
            /** @type {?} */
            var instance = this.componentRef.instance;
            instance.group = this.group;
            instance.layout = this.layout;
            instance.model = (/** @type {?} */ (this.model));
            if (this.templates) {
                instance.templates = this.templates;
            }
            this.componentSubscriptions.push(instance.blur.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) { return _this.onBlur($event); })));
            this.componentSubscriptions.push(instance.change.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) { return _this.onChange($event); })));
            this.componentSubscriptions.push(instance.focus.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) { return _this.onFocus($event); })));
            if (instance.customEvent !== undefined) {
                this.componentSubscriptions.push(instance.customEvent.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                function ($event) { return _this.onCustomEvent($event); })));
            }
            this.registerComponentRef(this.componentRef);
        }
    };
    /**
     * @protected
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.destroyFormControlComponent = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentSubscriptions.forEach((/**
             * @param {?} subscription
             * @return {?}
             */
            function (subscription) { return subscription.unsubscribe(); }));
            this.componentSubscriptions = [];
            this.unregisterComponentRef();
            this.componentRef.destroy();
        }
    };
    /**
     * @protected
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.createDynamicFormControlEvent = /**
     * @protected
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    function ($event, type) {
        return { $event: $event, context: this.context, control: this.control, group: this.group, model: this.model, type: type };
    };
    /**
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onControlValueChanges = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {
            this.model.value = value;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onModelValueUpdates = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onModelDisabledUpdates = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        disabled ? this.control.disable() : this.control.enable();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event instanceof Event) { // native HTML5 change event
            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                /** @type {?} */
                var model = (/** @type {?} */ (this.model));
                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    /** @type {?} */
                    var inputElement = $event.target || $event.srcElement;
                    model.files = (/** @type {?} */ (inputElement.files));
                }
            }
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
        else if (isDynamicFormControlEvent($event)) { // event bypass
            this.change.emit($event);
        }
        else { // custom library value change event
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.blur.emit($event);
        }
        else { // native HTML 5 or UI library blur event
            this.hasFocus = false;
            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.focus.emit($event);
        }
        else { // native HTML 5 or UI library focus event
            this.hasFocus = true;
            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.onCustomEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var emitter = (/** @type {?} */ (this.customEvent));
        if (isDynamicFormControlEvent($event)) { // child event bypass
            emitter.emit($event);
        }
        else { // native UI library custom event
            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
        }
    };
    /**
     * @private
     * @param {?} instanceRef
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.registerComponentRef = /**
     * @private
     * @param {?} instanceRef
     * @return {?}
     */
    function (instanceRef) {
        /** @type {?} */
        var index;
        if (this.context instanceof DynamicFormArrayGroupModel) {
            index = this.context.index;
        }
        this.componentService.registerFormControlRef(this.model, instanceRef, index);
    };
    /**
     * @private
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.unregisterComponentRef = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index;
        if (this.context instanceof DynamicFormArrayGroupModel) {
            index = this.context.index;
        }
        this.componentService.unregisterFormControlRef(this.model.id, index);
    };
    return DynamicFormControlContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
DynamicTemplateableFormControlComponent = /** @class */ (function (_super) {
    __extends(DynamicTemplateableFormControlComponent, _super);
    function DynamicTemplateableFormControlComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    DynamicTemplateableFormControlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.layoutService
            .filterTemplatesByModel(this.model, this.templates)
            .forEach((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return _this.bindTemplate(template); }));
    };
    /**
     * @param {?} template
     * @return {?}
     */
    DynamicTemplateableFormControlComponent.prototype.bindTemplate = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (isString(template.as) && this.templateDirectives.has(template.as)) {
            /** @type {?} */
            var property = (/** @type {?} */ (this.templateDirectives.get(template.as)));
            this.viewChild[property] = this.mapTemplate(template);
        }
    };
    return DynamicTemplateableFormControlComponent;
}(DynamicFormControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicIdDirective = /** @class */ (function () {
    function DynamicIdDirective(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    DynamicIdDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.dynamicId) {
            this.renderer.setAttribute(this.elementRef.nativeElement, "id", (/** @type {?} */ (this.dynamicId)));
        }
    };
    DynamicIdDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[dynamicId]"
                },] }
    ];
    /** @nocollapse */
    DynamicIdDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynamicIdDirective.propDecorators = {
        dynamicId: [{ type: Input }]
    };
    return DynamicIdDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicListDirective = /** @class */ (function () {
    function DynamicListDirective(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    DynamicListDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isString(this.listId)) {
            this.renderer.setAttribute(this.elementRef.nativeElement, "list", (/** @type {?} */ (this.listId)));
        }
    };
    DynamicListDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[dynamicList]"
                },] }
    ];
    /** @nocollapse */
    DynamicListDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynamicListDirective.propDecorators = {
        listId: [{ type: Input, args: ["dynamicList",] }]
    };
    return DynamicListDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT = {
    Start: "START", End: "END",
};
var DynamicTemplateDirective = /** @class */ (function () {
    function DynamicTemplateDirective(templateRef) {
        this.templateRef = templateRef;
        this.align = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;
        this.as = null;
    }
    DynamicTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: "ng-template[modelId],ng-template[modelType]"
                },] }
    ];
    /** @nocollapse */
    DynamicTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    DynamicTemplateDirective.propDecorators = {
        align: [{ type: Input }],
        as: [{ type: Input }],
        index: [{ type: Input }],
        modelId: [{ type: Input }],
        modelType: [{ type: Input }]
    };
    return DynamicTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var DynamicDateControlModel = /** @class */ (function (_super) {
    __extends(DynamicDateControlModel, _super);
    function DynamicDateControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.format = config.format || null;
        _this.max = config.max || null;
        _this.min = config.min || null;
        _this.placeholder = config.placeholder || null;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDateControlModel.prototype, "format", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicDateControlModel.prototype, "max", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicDateControlModel.prototype, "min", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDateControlModel.prototype, "placeholder", void 0);
    return DynamicDateControlModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var DynamicFileControlModel = /** @class */ (function (_super) {
    __extends(DynamicFileControlModel, _super);
    function DynamicFileControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.multiple = isBoolean(config.multiple) ? config.multiple : false;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicFileControlModel.prototype, "multiple", void 0);
    return DynamicFileControlModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var DynamicFormOption = /** @class */ (function () {
    function DynamicFormOption(config) {
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.label = config.label || null;
        this.value = config.value;
    }
    Object.defineProperty(DynamicFormOption.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this.label;
        },
        set: /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this.label = text;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormOption.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return serialize(this);
    };
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicFormOption.prototype, "disabled", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormOption.prototype, "label", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicFormOption.prototype, "value", void 0);
    return DynamicFormOption;
}());
/**
 * @abstract
 * @template T
 */
var DynamicOptionControlModel = /** @class */ (function (_super) {
    __extends(DynamicOptionControlModel, _super);
    function DynamicOptionControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this._options = [];
        _this.options = config.options;
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    DynamicOptionControlModel.prototype.updateOptions$ = /**
     * @private
     * @return {?}
     */
    function () {
        this.options$ = of(this.options);
    };
    Object.defineProperty(DynamicOptionControlModel.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            var _this = this;
            if (Array.isArray(options)) {
                this._options = ((/** @type {?} */ (options))).map((/**
                 * @param {?} optionConfig
                 * @return {?}
                 */
                function (optionConfig) {
                    return new DynamicFormOption(optionConfig);
                }));
                this.updateOptions$();
            }
            else if (isObservable(options)) {
                this.options$ = ((/** @type {?} */ (options))).pipe(map((/**
                 * @param {?} optionsConfig
                 * @return {?}
                 */
                function (optionsConfig) {
                    /** @type {?} */
                    var options = optionsConfig.map((/**
                     * @param {?} optionConfig
                     * @return {?}
                     */
                    function (optionConfig) { return new DynamicFormOption(optionConfig); }));
                    _this._options = options;
                    return options;
                })));
            }
            else {
                this.updateOptions$();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} optionConfig
     * @return {?}
     */
    DynamicOptionControlModel.prototype.add = /**
     * @param {?} optionConfig
     * @return {?}
     */
    function (optionConfig) {
        return this.insert(this.options.length, optionConfig);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicOptionControlModel.prototype.get = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.options[index];
    };
    /**
     * @param {?} index
     * @param {?} optionConfig
     * @return {?}
     */
    DynamicOptionControlModel.prototype.insert = /**
     * @param {?} index
     * @param {?} optionConfig
     * @return {?}
     */
    function (index, optionConfig) {
        /** @type {?} */
        var option = new DynamicFormOption(optionConfig);
        this.options.splice(index, 0, option);
        this.updateOptions$();
        return option;
    };
    /**
     * @param {...?} indices
     * @return {?}
     */
    DynamicOptionControlModel.prototype.remove = /**
     * @param {...?} indices
     * @return {?}
     */
    function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i] = arguments[_i];
        }
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.options.splice(index, 1); }));
        this.updateOptions$();
    };
    __decorate([
        serializable("options"),
        __metadata("design:type", Array)
    ], DynamicOptionControlModel.prototype, "_options", void 0);
    return DynamicOptionControlModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_GROUP = "GROUP";
var DynamicFormGroupModel = /** @class */ (function (_super) {
    __extends(DynamicFormGroupModel, _super);
    function DynamicFormGroupModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.group = [];
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_GROUP;
        _this.group = Array.isArray(config.group) ? config.group : [];
        _this.legend = config.legend || null;
        return _this;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicFormGroupModel.prototype.get = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.group[index];
    };
    /**
     * @param {?} index
     * @param {?} controlModel
     * @return {?}
     */
    DynamicFormGroupModel.prototype.set = /**
     * @param {?} index
     * @param {?} controlModel
     * @return {?}
     */
    function (index, controlModel) {
        this.group[index] = controlModel;
    };
    /**
     * @param {?} controlModel
     * @return {?}
     */
    DynamicFormGroupModel.prototype.add = /**
     * @param {?} controlModel
     * @return {?}
     */
    function (controlModel) {
        this.group.push(controlModel);
    };
    /**
     * @param {?} index
     * @param {?} controlModel
     * @return {?}
     */
    DynamicFormGroupModel.prototype.insert = /**
     * @param {?} index
     * @param {?} controlModel
     * @return {?}
     */
    function (index, controlModel) {
        this.group.splice(index, 0, controlModel);
    };
    /**
     * @param {?} index
     * @param {?} step
     * @return {?}
     */
    DynamicFormGroupModel.prototype.move = /**
     * @param {?} index
     * @param {?} step
     * @return {?}
     */
    function (index, step) {
        var _a;
        (_a = this.group).splice.apply(_a, __spread([index + step, 0], this.group.splice(index, 1)));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicFormGroupModel.prototype.remove = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.group.splice(index, 1);
    };
    /**
     * @return {?}
     */
    DynamicFormGroupModel.prototype.size = /**
     * @return {?}
     */
    function () {
        return this.group.length;
    };
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicFormGroupModel.prototype, "group", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormGroupModel.prototype, "legend", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFormGroupModel.prototype, "type", void 0);
    return DynamicFormGroupModel;
}(DynamicFormControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = "CHECKBOX_GROUP";
var DynamicCheckboxGroupModel = /** @class */ (function (_super) {
    __extends(DynamicCheckboxGroupModel, _super);
    function DynamicCheckboxGroupModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;
        return _this;
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    DynamicCheckboxGroupModel.prototype.check = /**
     * @param {...?} indices
     * @return {?}
     */
    function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i] = arguments[_i];
        }
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.group[index].checked = true; }));
    };
    /**
     * @param {...?} indices
     * @return {?}
     */
    DynamicCheckboxGroupModel.prototype.uncheck = /**
     * @param {...?} indices
     * @return {?}
     */
    function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i] = arguments[_i];
        }
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.group[index].checked = false; }));
    };
    /**
     * @return {?}
     */
    DynamicCheckboxGroupModel.prototype.checkAll = /**
     * @return {?}
     */
    function () {
        this.group.forEach((/**
         * @param {?} model
         * @return {?}
         */
        function (model) { return model.checked = true; }));
    };
    /**
     * @return {?}
     */
    DynamicCheckboxGroupModel.prototype.uncheckAll = /**
     * @return {?}
     */
    function () {
        this.group.forEach((/**
         * @param {?} model
         * @return {?}
         */
        function (model) { return model.checked = false; }));
    };
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicCheckboxGroupModel.prototype, "group", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicCheckboxGroupModel.prototype, "type", void 0);
    return DynamicCheckboxGroupModel;
}(DynamicFormGroupModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = "COLORPICKER";
var DynamicColorPickerModel = /** @class */ (function (_super) {
    __extends(DynamicColorPickerModel, _super);
    function DynamicColorPickerModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;
        _this.format = isString(config.format) ? config.format : null;
        _this.inline = isBoolean(config.inline) ? config.inline : false;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicColorPickerModel.prototype, "format", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicColorPickerModel.prototype, "inline", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicColorPickerModel.prototype, "type", void 0);
    return DynamicColorPickerModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = "DATEPICKER";
var DynamicDatePickerModel = /** @class */ (function (_super) {
    __extends(DynamicDatePickerModel, _super);
    function DynamicDatePickerModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;
        _this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        _this.focusedDate = config.focusedDate || null;
        _this.inline = isBoolean(config.inline) ? config.inline : false;
        _this.prefix = config.prefix || null;
        _this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        _this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;
        _this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;
        _this.suffix = config.suffix || null;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicDatePickerModel.prototype, "autoFocus", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicDatePickerModel.prototype, "focusedDate", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicDatePickerModel.prototype, "inline", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDatePickerModel.prototype, "prefix", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicDatePickerModel.prototype, "readOnly", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDatePickerModel.prototype, "suffix", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDatePickerModel.prototype, "toggleIcon", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDatePickerModel.prototype, "toggleLabel", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicDatePickerModel.prototype, "type", void 0);
    return DynamicDatePickerModel;
}(DynamicDateControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_EDITOR = "EDITOR";
var DynamicEditorModel = /** @class */ (function (_super) {
    __extends(DynamicEditorModel, _super);
    function DynamicEditorModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicEditorModel.prototype, "type", void 0);
    return DynamicEditorModel;
}(DynamicInputControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = "FILE_UPLOAD";
var DynamicFileUploadModel = /** @class */ (function (_super) {
    __extends(DynamicFileUploadModel, _super);
    function DynamicFileUploadModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;
        _this.accept = Array.isArray(config.accept) ? config.accept : null;
        _this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;
        _this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;
        _this.minSize = isNumber(config.minSize) ? config.minSize : null;
        _this.removeUrl = config.removeUrl || null;
        _this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;
        _this.url = config.url || null;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Array)
    ], DynamicFileUploadModel.prototype, "accept", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicFileUploadModel.prototype, "autoUpload", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicFileUploadModel.prototype, "maxSize", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicFileUploadModel.prototype, "minSize", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFileUploadModel.prototype, "removeUrl", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicFileUploadModel.prototype, "showFileList", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFileUploadModel.prototype, "url", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicFileUploadModel.prototype, "type", void 0);
    return DynamicFileUploadModel;
}(DynamicFileControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = "RADIO_GROUP";
/**
 * @template T
 */
var DynamicRadioGroupModel = /** @class */ (function (_super) {
    __extends(DynamicRadioGroupModel, _super);
    function DynamicRadioGroupModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;
        _this.legend = config.legend || null;
        return _this;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    DynamicRadioGroupModel.prototype.select = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.value = this.get(index).value;
    };
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicRadioGroupModel.prototype, "legend", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicRadioGroupModel.prototype, "type", void 0);
    return DynamicRadioGroupModel;
}(DynamicOptionControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_RATING = "RATING";
var DynamicRatingModel = /** @class */ (function (_super) {
    __extends(DynamicRatingModel, _super);
    function DynamicRatingModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_RATING;
        _this.max = isNumber(config.max) ? config.max : 10;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicRatingModel.prototype, "max", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicRatingModel.prototype, "type", void 0);
    return DynamicRatingModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_SELECT = "SELECT";
/**
 * @template T
 */
var DynamicSelectModel = /** @class */ (function (_super) {
    __extends(DynamicSelectModel, _super);
    function DynamicSelectModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_SELECT;
        _this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : ɵlooseIdentical;
        _this.filterable = isBoolean(config.filterable) ? config.filterable : false;
        _this.multiple = isBoolean(config.multiple) ? config.multiple : false;
        _this.placeholder = config.placeholder || "";
        _this.prefix = config.prefix || null;
        _this.suffix = config.suffix || null;
        return _this;
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    DynamicSelectModel.prototype.select = /**
     * @param {...?} indices
     * @return {?}
     */
    function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i] = arguments[_i];
        }
        /** @type {?} */
        var value = this.multiple ? indices.map((/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return _this.get(index).value; })) : this.get(indices[0]).value;
        this.value = value;
    };
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicSelectModel.prototype, "filterable", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicSelectModel.prototype, "multiple", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSelectModel.prototype, "placeholder", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSelectModel.prototype, "prefix", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSelectModel.prototype, "suffix", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSelectModel.prototype, "type", void 0);
    return DynamicSelectModel;
}(DynamicOptionControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_SLIDER = "SLIDER";
var DynamicSliderModel = /** @class */ (function (_super) {
    __extends(DynamicSliderModel, _super);
    function DynamicSliderModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;
        _this.max = isNumber(config.max) ? config.max : 10;
        _this.min = isNumber(config.min) ? config.min : 0;
        _this.step = isNumber(config.step) ? config.step : 1;
        _this.vertical = isBoolean(config.vertical) ? config.vertical : false;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicSliderModel.prototype, "max", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicSliderModel.prototype, "min", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicSliderModel.prototype, "step", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicSliderModel.prototype, "vertical", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSliderModel.prototype, "type", void 0);
    return DynamicSliderModel;
}(DynamicFormValueControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_SWITCH = "SWITCH";
var DynamicSwitchModel = /** @class */ (function (_super) {
    __extends(DynamicSwitchModel, _super);
    function DynamicSwitchModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;
        _this.offLabel = config.offLabel || null;
        _this.onLabel = config.onLabel || null;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSwitchModel.prototype, "offLabel", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSwitchModel.prototype, "onLabel", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicSwitchModel.prototype, "type", void 0);
    return DynamicSwitchModel;
}(DynamicCheckControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = "TEXTAREA";
/** @type {?} */
var DYNAMIC_FORM_TEXTAREA_WRAP_HARD = "hard";
/** @type {?} */
var DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = "soft";
var DynamicTextAreaModel = /** @class */ (function (_super) {
    __extends(DynamicTextAreaModel, _super);
    function DynamicTextAreaModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;
        _this.cols = isNumber(config.cols) ? config.cols : 20;
        _this.rows = isNumber(config.rows) ? config.rows : 2;
        _this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicTextAreaModel.prototype, "cols", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicTextAreaModel.prototype, "rows", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicTextAreaModel.prototype, "wrap", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicTextAreaModel.prototype, "type", void 0);
    return DynamicTextAreaModel;
}(DynamicInputControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = "TIMEPICKER";
var DynamicTimePickerModel = /** @class */ (function (_super) {
    __extends(DynamicTimePickerModel, _super);
    function DynamicTimePickerModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;
        _this.meridian = isBoolean(config.meridian) ? config.meridian : false;
        _this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;
        return _this;
    }
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicTimePickerModel.prototype, "meridian", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicTimePickerModel.prototype, "showSeconds", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicTimePickerModel.prototype, "type", void 0);
    return DynamicTimePickerModel;
}(DynamicDateControlModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_VALIDATORS = new InjectionToken("DYNAMIC_VALIDATORS");

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormValidationService = /** @class */ (function () {
    function DynamicFormValidationService(NG_VALIDATORS, NG_ASYNC_VALIDATORS, DYNAMIC_VALIDATORS) {
        this.NG_VALIDATORS = NG_VALIDATORS;
        this.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
        this.DYNAMIC_VALIDATORS = DYNAMIC_VALIDATORS;
    }
    /**
     * @private
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @param {?=} validatorsToken
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidatorFn = /**
     * @private
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @param {?=} validatorsToken
     * @return {?}
     */
    function (validatorName, validatorArgs, validatorsToken) {
        if (validatorArgs === void 0) { validatorArgs = null; }
        if (validatorsToken === void 0) { validatorsToken = this.NG_VALIDATORS; }
        /** @type {?} */
        var validatorFn;
        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators
            validatorFn = ((/** @type {?} */ (Validators)))[validatorName];
        }
        else { // Custom Validators
            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {
                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);
            }
            else if (validatorsToken) {
                validatorFn = validatorsToken.find((/**
                 * @param {?} validatorFn
                 * @return {?}
                 */
                function (validatorFn) { return validatorFn.name === validatorName; }));
            }
        }
        if (validatorFn === undefined) { // throw when no validator could be resolved
            throw new Error("validator \"" + validatorName + "\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS");
        }
        if (validatorArgs !== null) {
            return ((/** @type {?} */ (validatorFn)))(validatorArgs);
        }
        return (/** @type {?} */ (validatorFn));
    };
    /**
     * @private
     * @param {?} validatorsConfig
     * @param {?=} validatorsToken
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidatorFns = /**
     * @private
     * @param {?} validatorsConfig
     * @param {?=} validatorsToken
     * @return {?}
     */
    function (validatorsConfig, validatorsToken) {
        var _this = this;
        if (validatorsToken === void 0) { validatorsToken = this.NG_VALIDATORS; }
        /** @type {?} */
        var validatorFns = [];
        if (isObject(validatorsConfig)) {
            validatorFns = Object.keys(validatorsConfig).map((/**
             * @param {?} validatorConfigKey
             * @return {?}
             */
            function (validatorConfigKey) {
                /** @type {?} */
                var validatorConfigValue = ((/** @type {?} */ (validatorsConfig)))[validatorConfigKey];
                if (_this.isValidatorDescriptor(validatorConfigValue)) {
                    /** @type {?} */
                    var descriptor = (/** @type {?} */ (validatorConfigValue));
                    return _this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);
                }
                return _this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);
            }));
        }
        return validatorFns;
    };
    /**
     * @private
     * @param {?} template
     * @param {?} model
     * @param {?=} error
     * @return {?}
     */
    DynamicFormValidationService.prototype.parseErrorMessageConfig = /**
     * @private
     * @param {?} template
     * @param {?} model
     * @param {?=} error
     * @return {?}
     */
    function (template, model, error) {
        if (error === void 0) { error = null; }
        return template.replace(/{{\s*(.+?)\s*}}/mg, (/**
         * @param {?} _match
         * @param {?} expression
         * @return {?}
         */
        function (_match, expression) {
            /** @type {?} */
            var propertySource = model;
            /** @type {?} */
            var propertyName = expression;
            if (expression.indexOf("validator.") >= 0 && error) {
                propertySource = error;
                propertyName = expression.replace("validator.", "");
            }
            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?
                propertySource[propertyName] : null;
        }));
    };
    /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidator = /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    function (validatorName, validatorArgs) {
        if (validatorArgs === void 0) { validatorArgs = null; }
        return (/** @type {?} */ (this.getValidatorFn(validatorName, validatorArgs)));
    };
    /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    DynamicFormValidationService.prototype.getAsyncValidator = /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    function (validatorName, validatorArgs) {
        if (validatorArgs === void 0) { validatorArgs = null; }
        return (/** @type {?} */ (this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS)));
    };
    /**
     * @param {?} validatorsConfig
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidators = /**
     * @param {?} validatorsConfig
     * @return {?}
     */
    function (validatorsConfig) {
        return (/** @type {?} */ (this.getValidatorFns(validatorsConfig)));
    };
    /**
     * @param {?} asyncValidatorsConfig
     * @return {?}
     */
    DynamicFormValidationService.prototype.getAsyncValidators = /**
     * @param {?} asyncValidatorsConfig
     * @return {?}
     */
    function (asyncValidatorsConfig) {
        return (/** @type {?} */ (this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS)));
    };
    /**
     * @param {?} validatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    DynamicFormValidationService.prototype.updateValidators = /**
     * @param {?} validatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    function (validatorsConfig, control, model) {
        model.validators = validatorsConfig;
        if (validatorsConfig === null) {
            control.clearValidators();
        }
        else {
            control.setValidators(this.getValidators(validatorsConfig));
        }
        control.updateValueAndValidity();
    };
    /**
     * @param {?} asyncValidatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    DynamicFormValidationService.prototype.updateAsyncValidators = /**
     * @param {?} asyncValidatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    function (asyncValidatorsConfig, control, model) {
        model.asyncValidators = asyncValidatorsConfig;
        if (asyncValidatorsConfig === null) {
            control.clearAsyncValidators();
        }
        else {
            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));
        }
        control.updateValueAndValidity();
    };
    /**
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    DynamicFormValidationService.prototype.createErrorMessages = /**
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    function (control, model) {
        var _this = this;
        /** @type {?} */
        var messages = [];
        if (model.hasErrorMessages) {
            /** @type {?} */
            var messagesConfig_1 = (/** @type {?} */ (model.errorMessages));
            Object.keys(control.errors || {}).forEach((/**
             * @param {?} validationErrorKey
             * @return {?}
             */
            function (validationErrorKey) {
                /** @type {?} */
                var messageKey = validationErrorKey;
                if (validationErrorKey === "minlength" || validationErrorKey === "maxlength") {
                    messageKey = messageKey.replace("length", "Length");
                }
                if (messagesConfig_1.hasOwnProperty(messageKey)) {
                    /** @type {?} */
                    var validationError = control.getError(validationErrorKey);
                    /** @type {?} */
                    var messageTemplate = (/** @type {?} */ (messagesConfig_1[messageKey]));
                    messages.push(_this.parseErrorMessageConfig(messageTemplate, model, validationError));
                }
            }));
        }
        return messages;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormValidationService.prototype.isFormHook = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isString(value) && ["blur", "change", "submit"].indexOf(value) !== -1;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormValidationService.prototype.isValidatorDescriptor = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (isObject(value)) {
            return value.hasOwnProperty("name") && value.hasOwnProperty("args");
        }
        return false;
    };
    DynamicFormValidationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormValidationService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [NG_VALIDATORS,] }] },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },
        { type: Map, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_VALIDATORS,] }] }
    ]; };
    /** @nocollapse */ DynamicFormValidationService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DynamicFormValidationService_Factory() { return new DynamicFormValidationService(ɵɵinject(NG_VALIDATORS, 8), ɵɵinject(NG_ASYNC_VALIDATORS, 8), ɵɵinject(DYNAMIC_VALIDATORS, 8)); }, token: DynamicFormValidationService, providedIn: "root" });
    return DynamicFormValidationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormService = /** @class */ (function () {
    function DynamicFormService(validationService) {
        this.validationService = validationService;
    }
    /**
     * @private
     * @param {?=} validatorsConfig
     * @param {?=} asyncValidatorsConfig
     * @param {?=} updateOn
     * @return {?}
     */
    DynamicFormService.prototype.createAbstractControlOptions = /**
     * @private
     * @param {?=} validatorsConfig
     * @param {?=} asyncValidatorsConfig
     * @param {?=} updateOn
     * @return {?}
     */
    function (validatorsConfig, asyncValidatorsConfig, updateOn) {
        if (validatorsConfig === void 0) { validatorsConfig = null; }
        if (asyncValidatorsConfig === void 0) { asyncValidatorsConfig = null; }
        if (updateOn === void 0) { updateOn = null; }
        return {
            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,
            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,
            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : "change"
        };
    };
    /**
     * @param {?} formArrayModel
     * @return {?}
     */
    DynamicFormService.prototype.createFormArray = /**
     * @param {?} formArrayModel
     * @return {?}
     */
    function (formArrayModel) {
        /** @type {?} */
        var controls = [];
        /** @type {?} */
        var options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators, formArrayModel.updateOn);
        for (var index = 0; index < formArrayModel.size; index++) {
            /** @type {?} */
            var groupModel = formArrayModel.get(index);
            /** @type {?} */
            var groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators, formArrayModel.groupAsyncValidators, formArrayModel.updateOn);
            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));
        }
        return new FormArray(controls, options);
    };
    /**
     * @param {?} formModel
     * @param {?=} options
     * @param {?=} parent
     * @return {?}
     */
    DynamicFormService.prototype.createFormGroup = /**
     * @param {?} formModel
     * @param {?=} options
     * @param {?=} parent
     * @return {?}
     */
    function (formModel, options, parent) {
        var _this = this;
        if (options === void 0) { options = null; }
        if (parent === void 0) { parent = null; }
        /** @type {?} */
        var controls = {};
        formModel.forEach((/**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            model.parent = parent;
            switch (model.type) {
                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                    controls[model.id] = _this.createFormArray((/** @type {?} */ (model)));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                    /** @type {?} */
                    var groupModel = (/** @type {?} */ (model));
                    /** @type {?} */
                    var groupOptions = _this.createAbstractControlOptions(groupModel.validators, groupModel.asyncValidators, groupModel.updateOn);
                    controls[model.id] = _this.createFormGroup(groupModel.group, groupOptions, groupModel);
                    break;
                default:
                    /** @type {?} */
                    var controlModel = (/** @type {?} */ (model));
                    /** @type {?} */
                    var controlState = { value: controlModel.value, disabled: controlModel.disabled };
                    /** @type {?} */
                    var controlOptions = _this.createAbstractControlOptions(controlModel.validators, controlModel.asyncValidators, controlModel.updateOn);
                    controls[model.id] = new FormControl(controlState, controlOptions);
            }
        }));
        return new FormGroup(controls, options);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DynamicFormService.prototype.getPathSegment = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : ((/** @type {?} */ (model))).id;
    };
    /**
     * @param {?} model
     * @param {?=} join
     * @return {?}
     */
    DynamicFormService.prototype.getPath = /**
     * @param {?} model
     * @param {?=} join
     * @return {?}
     */
    function (model, join) {
        if (join === void 0) { join = false; }
        /** @type {?} */
        var path = [this.getPathSegment(model)];
        /** @type {?} */
        var parent = model.parent;
        while (parent) {
            path.unshift(this.getPathSegment(parent));
            parent = parent.parent;
        }
        return join ? path.join(".") : path;
    };
    /**
     * @param {?} formGroup
     * @param {?} formModel
     * @param {...?} models
     * @return {?}
     */
    DynamicFormService.prototype.addFormGroupControl = /**
     * @param {?} formGroup
     * @param {?} formModel
     * @param {...?} models
     * @return {?}
     */
    function (formGroup, formModel) {
        var models = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            models[_i - 2] = arguments[_i];
        }
        if (formModel instanceof DynamicFormGroupModel) {
            this.insertFormGroupControl.apply(this, __spread([formModel.size(), formGroup, formModel], models));
        }
        else {
            /** @type {?} */
            var _formModel = (/** @type {?} */ (formModel));
            this.insertFormGroupControl.apply(this, __spread([_formModel.length, formGroup, _formModel], models));
        }
    };
    /**
     * @param {?} index
     * @param {?} step
     * @param {?} formModel
     * @return {?}
     */
    DynamicFormService.prototype.moveFormGroupControl = /**
     * @param {?} index
     * @param {?} step
     * @param {?} formModel
     * @return {?}
     */
    function (index, step, formModel) {
        if (formModel instanceof DynamicFormGroupModel) {
            formModel.move(index, step);
        }
        else {
            /** @type {?} */
            var _formModel = (/** @type {?} */ (formModel));
            _formModel.splice.apply(_formModel, __spread([index + step, 0], _formModel.splice(index, 1)));
        }
    };
    /**
     * @param {?} index
     * @param {?} formGroup
     * @param {?} formModel
     * @param {...?} models
     * @return {?}
     */
    DynamicFormService.prototype.insertFormGroupControl = /**
     * @param {?} index
     * @param {?} formGroup
     * @param {?} formModel
     * @param {...?} models
     * @return {?}
     */
    function (index, formGroup, formModel) {
        var models = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            models[_i - 3] = arguments[_i];
        }
        /** @type {?} */
        var parent = formModel instanceof DynamicFormGroupModel ? formModel : null;
        /** @type {?} */
        var controls = this.createFormGroup(models, null, parent).controls;
        Object.keys(controls).forEach((/**
         * @param {?} controlName
         * @param {?} idx
         * @return {?}
         */
        function (controlName, idx) {
            /** @type {?} */
            var controlModel = models[idx];
            if (formModel instanceof DynamicFormGroupModel) {
                formModel.insert(index, controlModel);
            }
            else {
                ((/** @type {?} */ (formModel))).splice(index, 0, controlModel);
            }
            formGroup.addControl(controlName, controls[controlName]);
        }));
    };
    /**
     * @param {?} index
     * @param {?} formGroup
     * @param {?} formModel
     * @return {?}
     */
    DynamicFormService.prototype.removeFormGroupControl = /**
     * @param {?} index
     * @param {?} formGroup
     * @param {?} formModel
     * @return {?}
     */
    function (index, formGroup, formModel) {
        if (formModel instanceof DynamicFormGroupModel) {
            formGroup.removeControl(formModel.get(index).id);
            formModel.remove(index);
        }
        else {
            formGroup.removeControl(formModel[index].id);
            ((/** @type {?} */ (formModel))).splice(index, 1);
        }
    };
    /**
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    DynamicFormService.prototype.addFormArrayGroup = /**
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    function (formArray, formArrayModel) {
        /** @type {?} */
        var groupModel = formArrayModel.addGroup();
        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));
    };
    /**
     * @param {?} index
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    DynamicFormService.prototype.insertFormArrayGroup = /**
     * @param {?} index
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    function (index, formArray, formArrayModel) {
        /** @type {?} */
        var groupModel = formArrayModel.insertGroup(index);
        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));
    };
    /**
     * @param {?} index
     * @param {?} step
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    DynamicFormService.prototype.moveFormArrayGroup = /**
     * @param {?} index
     * @param {?} step
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    function (index, step, formArray, formArrayModel) {
        /** @type {?} */
        var newIndex = index + step;
        /** @type {?} */
        var moveUp = step >= 0;
        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {
            /** @type {?} */
            var movingGroups_1 = [];
            for (var i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {
                movingGroups_1.push(formArray.at(i));
            }
            movingGroups_1.forEach((/**
             * @param {?} formControl
             * @param {?} idx
             * @return {?}
             */
            function (formControl, idx) {
                /** @type {?} */
                var position;
                if (moveUp) {
                    position = idx === 0 ? newIndex : index + idx - 1;
                }
                else {
                    position = idx === movingGroups_1.length - 1 ? newIndex : newIndex + idx + 1;
                }
                formArray.setControl(position, formControl);
            }));
            formArrayModel.moveGroup(index, step);
        }
        else {
            throw new Error("form array group cannot be moved due to index or new index being out of bounds");
        }
    };
    /**
     * @param {?} index
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    DynamicFormService.prototype.removeFormArrayGroup = /**
     * @param {?} index
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    function (index, formArray, formArrayModel) {
        formArray.removeAt(index);
        formArrayModel.removeGroup(index);
    };
    /**
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    DynamicFormService.prototype.clearFormArray = /**
     * @param {?} formArray
     * @param {?} formArrayModel
     * @return {?}
     */
    function (formArray, formArrayModel) {
        formArray.clear();
        formArrayModel.clear();
    };
    /**
     * @param {?} id
     * @param {?} formModel
     * @return {?}
     */
    DynamicFormService.prototype.findById = /**
     * @param {?} id
     * @param {?} formModel
     * @return {?}
     */
    function (id, formModel) {
        /** @type {?} */
        var result = null;
        /** @type {?} */
        var findByIdFn = (/**
         * @param {?} id
         * @param {?} groupModel
         * @return {?}
         */
        function (id, groupModel) {
            var e_1, _a;
            try {
                for (var groupModel_1 = __values(groupModel), groupModel_1_1 = groupModel_1.next(); !groupModel_1_1.done; groupModel_1_1 = groupModel_1.next()) {
                    var controlModel = groupModel_1_1.value;
                    if (controlModel.id === id) {
                        result = controlModel;
                        break;
                    }
                    if (controlModel instanceof DynamicFormGroupModel) {
                        findByIdFn(id, ((/** @type {?} */ (controlModel))).group);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (groupModel_1_1 && !groupModel_1_1.done && (_a = groupModel_1.return)) _a.call(groupModel_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        findByIdFn(id, formModel);
        return result;
    };
    /**
     * @param {?} id
     * @param {?} formModel
     * @return {?}
     */
    DynamicFormService.prototype.findModelById = /**
     * @param {?} id
     * @param {?} formModel
     * @return {?}
     */
    function (id, formModel) {
        return this.findById(id, formModel);
    };
    /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    DynamicFormService.prototype.findControlByModel = /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    function (model, group) {
        return group.root.get(this.getPath(model, true));
    };
    /**
     * @param {?} json
     * @return {?}
     */
    DynamicFormService.prototype.fromJSON = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        var _this = this;
        /** @type {?} */
        var formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json;
        /** @type {?} */
        var formModel = [];
        formModelJSON.forEach((/**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            /** @type {?} */
            var layout = model.layout || null;
            switch (model.type) {
                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                    /** @type {?} */
                    var formArrayModel_1 = (/** @type {?} */ (model));
                    if (Array.isArray(formArrayModel_1.groups)) {
                        formArrayModel_1.groups.forEach((/**
                         * @param {?} groupModel
                         * @return {?}
                         */
                        function (groupModel) {
                            groupModel.group = (/** @type {?} */ (_this.fromJSON(groupModel.group)));
                        }));
                    }
                    formArrayModel_1.groupFactory = (/**
                     * @return {?}
                     */
                    function () {
                        return _this.fromJSON(formArrayModel_1.groupPrototype);
                    });
                    formModel.push(new DynamicFormArrayModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                    formModel.push(new DynamicCheckboxModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
                    model.group = (/** @type {?} */ (_this.fromJSON(model.group)));
                    formModel.push(new DynamicCheckboxGroupModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:
                    formModel.push(new DynamicColorPickerModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
                    formModel.push(new DynamicDatePickerModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:
                    formModel.push(new DynamicEditorModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:
                    model.value = null;
                    formModel.push(new DynamicFileUploadModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                    model.group = _this.fromJSON(model.group);
                    formModel.push(new DynamicFormGroupModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                    /** @type {?} */
                    var inputModel = (/** @type {?} */ (model));
                    if (inputModel.mask !== null) {
                        if (!(inputModel.mask instanceof Function)) {
                            inputModel.mask = maskFromString((/** @type {?} */ (inputModel.mask)));
                        }
                    }
                    formModel.push(new DynamicInputModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                    formModel.push(new DynamicRadioGroupModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_RATING:
                    formModel.push(new DynamicRatingModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                    formModel.push(new DynamicSelectModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
                    formModel.push(new DynamicSliderModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
                    formModel.push(new DynamicSwitchModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                    formModel.push(new DynamicTextAreaModel(model, layout));
                    break;
                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:
                    formModel.push(new DynamicTimePickerModel(model, layout));
                    break;
                default:
                    throw new Error("unknown form control model type defined on JSON object with id \"" + model.id + "\"");
            }
        }));
        return formModel;
    };
    DynamicFormService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormService.ctorParameters = function () { return [
        { type: DynamicFormValidationService }
    ]; };
    /** @nocollapse */ DynamicFormService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DynamicFormService_Factory() { return new DynamicFormService(ɵɵinject(DynamicFormValidationService)); }, token: DynamicFormService, providedIn: "root" });
    return DynamicFormService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken("DYNAMIC_FORM_CONTROL_MAP_FN");
var DynamicFormComponentService = /** @class */ (function () {
    function DynamicFormComponentService(DYNAMIC_FORM_CONTROL_MAP_FN) {
        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
        this.componentRefs = {};
        this.DYNAMIC_FORM_CONTROL_MAP_FN = (/** @type {?} */ (DYNAMIC_FORM_CONTROL_MAP_FN));
    }
    /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    DynamicFormComponentService.prototype.getFormControlRef = /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    function (modelId, index) {
        /** @type {?} */
        var ref = this.componentRefs[modelId];
        if (isNumber(index)) {
            return Array.isArray(ref) ? ref[index] : undefined;
        }
        else {
            return (/** @type {?} */ (ref));
        }
    };
    /**
     * @param {?} model
     * @param {?} instance
     * @param {?=} index
     * @return {?}
     */
    DynamicFormComponentService.prototype.registerFormControlRef = /**
     * @param {?} model
     * @param {?} instance
     * @param {?=} index
     * @return {?}
     */
    function (model, instance, index) {
        if (isNumber(index)) {
            /** @type {?} */
            var arrayRef = (/** @type {?} */ (this.componentRefs[model.id])) || [];
            if (Array.isArray(arrayRef)) {
                arrayRef.splice(index, 0, instance);
                this.componentRefs[model.id] = arrayRef;
            }
            else {
                console.warn("registerFormControlRef is called with index for a non-array form control: " + model.id);
            }
        }
        else {
            this.componentRefs[model.id] = instance;
        }
    };
    /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    DynamicFormComponentService.prototype.unregisterFormControlRef = /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    function (modelId, index) {
        /** @type {?} */
        var componentRef = this.componentRefs[modelId];
        if (isNumber(index)) {
            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {
                componentRef.splice(index, 1);
            }
        }
        else if (componentRef !== undefined) {
            delete this.componentRefs[modelId];
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DynamicFormComponentService.prototype.getCustomComponentType = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;
    };
    DynamicFormComponentService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormComponentService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DYNAMIC_FORM_CONTROL_MAP_FN,] }, { type: Optional }] }
    ]; };
    /** @nocollapse */ DynamicFormComponentService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DynamicFormComponentService_Factory() { return new DynamicFormComponentService(ɵɵinject(DYNAMIC_FORM_CONTROL_MAP_FN, 8)); }, token: DynamicFormComponentService, providedIn: "root" });
    return DynamicFormComponentService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormLayoutService = /** @class */ (function () {
    function DynamicFormLayoutService() {
    }
    /**
     * @param {?} id
     * @param {?} formLayout
     * @return {?}
     */
    DynamicFormLayoutService.prototype.findById = /**
     * @param {?} id
     * @param {?} formLayout
     * @return {?}
     */
    function (id, formLayout) {
        var e_1, _a;
        if (isObject(formLayout)) {
            try {
                for (var _b = __values(Object.keys(formLayout)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    if (key === id) {
                        return formLayout[key];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return null;
    };
    /**
     * @param {?} model
     * @param {?} formLayout
     * @return {?}
     */
    DynamicFormLayoutService.prototype.findByModel = /**
     * @param {?} model
     * @param {?} formLayout
     * @return {?}
     */
    function (model, formLayout) {
        var e_2, _a;
        /** @type {?} */
        var controlLayout = null;
        if (isObject(formLayout)) {
            var _loop_1 = function (key) {
                key.split(",").forEach((/**
                 * @param {?} substring
                 * @return {?}
                 */
                function (substring) {
                    /** @type {?} */
                    var selector = substring.trim();
                    if (selector === model.id || selector === model.type) {
                        controlLayout = formLayout[key];
                    }
                }));
            };
            try {
                for (var _b = __values(Object.keys(formLayout)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    _loop_1(key);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return controlLayout;
    };
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    DynamicFormLayoutService.prototype.filterTemplatesByModel = /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    function (model, templates) {
        /** @type {?} */
        var filterCallback = (/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            return template.modelId === model.id || template.modelType === model.type;
        });
        if (templates instanceof QueryList) {
            return templates.filter(filterCallback);
        }
        else if (Array.isArray(templates)) {
            return templates.filter(filterCallback);
        }
        return [];
    };
    /**
     * @param {?} model
     * @param {?} templates
     * @param {?} alignment
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getAlignedTemplate = /**
     * @param {?} model
     * @param {?} templates
     * @param {?} alignment
     * @return {?}
     */
    function (model, templates, alignment) {
        return this.filterTemplatesByModel(model, templates)
            .find((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template.as === null && template.align === alignment; }));
    };
    /*
    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
    }
    */
    /*
        getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
            return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
        }
        */
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getStartTemplate = /*
        getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
            return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
        }
        */
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    function (model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);
    };
    /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getEndTemplate = /**
     * @param {?} model
     * @param {?} templates
     * @return {?}
     */
    function (model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);
    };
    /**
     * @param {?} layout
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getClass = /**
     * @param {?} layout
     * @param {?} context
     * @param {?} place
     * @return {?}
     */
    function (layout, context, place) {
        if (layout !== null && layout.hasOwnProperty(context)) {
            /** @type {?} */
            var config = (/** @type {?} */ (layout[context]));
            if (config.hasOwnProperty(place)) {
                return (/** @type {?} */ (config[place]));
            }
        }
        return "";
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DynamicFormLayoutService.prototype.getElementId = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var id = model.id;
        /** @type {?} */
        var parent = model.parent;
        while (parent !== null) {
            if (parent instanceof DynamicFormArrayGroupModel) {
                id = parent.context.id + "-" + parent.index + "-" + model.id;
                break;
            }
            parent = parent.parent;
        }
        return id;
    };
    DynamicFormLayoutService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */ DynamicFormLayoutService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DynamicFormLayoutService_Factory() { return new DynamicFormLayoutService(); }, token: DynamicFormLayoutService, providedIn: "root" });
    return DynamicFormLayoutService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MATCH_DISABLED = "DISABLED";
/** @type {?} */
var MATCH_ENABLED = "ENABLED";
/** @type {?} */
var MATCH_HIDDEN = "HIDDEN";
/** @type {?} */
var MATCH_OPTIONAL = "OPTIONAL";
/** @type {?} */
var MATCH_REQUIRED = "REQUIRED";
/** @type {?} */
var MATCH_VISIBLE = "VISIBLE";
/** @type {?} */
var AND_OPERATOR = "AND";
/** @type {?} */
var OR_OPERATOR = "OR";
/** @type {?} */
var DYNAMIC_MATCHERS = new InjectionToken("DYNAMIC_MATCHERS");
/** @type {?} */
var DisabledMatcher = {
    match: MATCH_DISABLED,
    opposingMatch: MATCH_ENABLED,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    function (hasMatch, model) {
        model.disabled = hasMatch;
    }
};
/** @type {?} */
var HiddenMatcher = {
    match: MATCH_HIDDEN,
    opposingMatch: MATCH_VISIBLE,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    function (hasMatch, model) {
        model.hidden = hasMatch;
    }
};
/** @type {?} */
var RequiredMatcher = {
    match: MATCH_REQUIRED,
    opposingMatch: MATCH_OPTIONAL,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    function (hasMatch, model, control, injector) {
        /** @type {?} */
        var validatorsConfig = null;
        if (hasMatch) {
            validatorsConfig = isObject(model.validators) ? __assign({}, model.validators, { required: null }) : { required: null };
        }
        else {
            if (isObject(model.validators)) {
                delete model.validators["required"];
                validatorsConfig = __assign({}, model.validators);
            }
        }
        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);
    }
};
/** @type {?} */
var DISABLED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: DisabledMatcher,
    multi: true
};
/** @type {?} */
var HIDDEN_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: HiddenMatcher,
    multi: true
};
/** @type {?} */
var REQUIRED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: RequiredMatcher,
    multi: true
};
/** @type {?} */
var DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER, HIDDEN_MATCHER, REQUIRED_MATCHER];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormRelationService = /** @class */ (function () {
    function DynamicFormRelationService(DYNAMIC_MATCHERS, injector) {
        this.DYNAMIC_MATCHERS = DYNAMIC_MATCHERS;
        this.injector = injector;
    }
    /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    DynamicFormRelationService.prototype.getRelatedFormControls = /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    function (model, group) {
        /** @type {?} */
        var conditionReducer = (/**
         * @param {?} controls
         * @param {?} condition
         * @return {?}
         */
        function (controls, condition) {
            /** @type {?} */
            var path = condition.rootPath || condition.id;
            if (!controls.hasOwnProperty(path)) {
                /** @type {?} */
                var control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);
                control instanceof FormControl ? controls[path] = control : console.warn("No related form control with id " + condition.id + " could be found");
            }
            return controls;
        });
        /** @type {?} */
        var relationReducer = (/**
         * @param {?} controls
         * @param {?} relation
         * @return {?}
         */
        function (controls, relation) { return relation.when.reduce(conditionReducer, controls); });
        return model.relations.reduce(relationReducer, {});
    };
    /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    DynamicFormRelationService.prototype.findRelationByMatcher = /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    function (relations, matcher) {
        return relations.find((/**
         * @param {?} relation
         * @return {?}
         */
        function (relation) { return [matcher.match, matcher.opposingMatch].includes(relation.match); }));
    };
    /**
     * @param {?} relation
     * @param {?} relatedFormControls
     * @param {?} matcher
     * @return {?}
     */
    DynamicFormRelationService.prototype.matchesCondition = /**
     * @param {?} relation
     * @param {?} relatedFormControls
     * @param {?} matcher
     * @return {?}
     */
    function (relation, relatedFormControls, matcher) {
        /** @type {?} */
        var operator = relation.operator || OR_OPERATOR;
        return relation.when.reduce((/**
         * @param {?} hasAlreadyMatched
         * @param {?} condition
         * @param {?} index
         * @return {?}
         */
        function (hasAlreadyMatched, condition, index) {
            var e_1, _a;
            /** @type {?} */
            var path = condition.rootPath || condition.id;
            /** @type {?} */
            var relatedFormControl;
            try {
                for (var _b = __values(Object.entries(relatedFormControls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], control = _d[1];
                    if (key === path) {
                        relatedFormControl = control;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (relatedFormControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;
            }
            if (relatedFormControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);
            }
            return false;
        }), false);
    };
    /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    DynamicFormRelationService.prototype.subscribeRelations = /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    function (model, group, control) {
        var _this = this;
        /** @type {?} */
        var relatedFormControls = this.getRelatedFormControls(model, group);
        /** @type {?} */
        var subscriptions = [];
        Object.values(relatedFormControls).forEach((/**
         * @param {?} relatedControl
         * @return {?}
         */
        function (relatedControl) {
            /** @type {?} */
            var valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));
            /** @type {?} */
            var statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));
            subscriptions.push(merge(valueChanges, statusChanges).subscribe((/**
             * @return {?}
             */
            function () {
                _this.DYNAMIC_MATCHERS.forEach((/**
                 * @param {?} matcher
                 * @return {?}
                 */
                function (matcher) {
                    /** @type {?} */
                    var relation = _this.findRelationByMatcher(model.relations, matcher);
                    if (relation !== undefined) {
                        /** @type {?} */
                        var hasMatch = _this.matchesCondition(relation, relatedFormControls, matcher);
                        matcher.onChange(hasMatch, model, control, _this.injector);
                    }
                }));
            })));
        }));
        return subscriptions;
    };
    DynamicFormRelationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormRelationService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_MATCHERS,] }] },
        { type: Injector }
    ]; };
    /** @nocollapse */ DynamicFormRelationService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DynamicFormRelationService_Factory() { return new DynamicFormRelationService(ɵɵinject(DYNAMIC_MATCHERS, 8), ɵɵinject(INJECTOR)); }, token: DynamicFormRelationService, providedIn: "root" });
    return DynamicFormRelationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicFormsCoreModule = /** @class */ (function () {
    function DynamicFormsCoreModule() {
    }
    /*@deprecated*/
    /*@deprecated*/
    /**
     * @return {?}
     */
    DynamicFormsCoreModule.forRoot = /*@deprecated*/
    /**
     * @return {?}
     */
    function () {
        return {
            ngModule: DynamicFormsCoreModule,
            providers: [
                DynamicFormService,
                DynamicFormLayoutService,
                DynamicFormValidationService,
                DynamicFormComponentService,
                DynamicFormRelationService
            ]
        };
    };
    DynamicFormsCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule
                    ],
                    declarations: [
                        DynamicIdDirective,
                        DynamicListDirective,
                        DynamicTemplateDirective
                    ],
                    exports: [
                        DynamicIdDirective,
                        DynamicListDirective,
                        DynamicTemplateDirective
                    ]
                },] }
    ];
    return DynamicFormsCoreModule;
}());

export { AND_OPERATOR, AUTOCOMPLETE_OFF, AUTOCOMPLETE_ON, AUTOFILL_FIELDS, AUTOFILL_FIELDS_CONTACT, AUTOFILL_FIELD_ADDITIONAL_NAME, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2, AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY, AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_CC_ADDITIONAL_NAME, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH, AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_IMPP, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_NAME, AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_ORGANIZATION_TITLE, AUTOFILL_FIELD_PHOTO, AUTOFILL_FIELD_POSTAL_CODE, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_AREA_CODE, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_TRANSACTION_CURRENCY, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_USERNAME, AUTOFILL_TOKENS_ADDRESS, AUTOFILL_TOKENS_CONTACT, AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_SHIPPING, AUTOFILL_TOKEN_WORK, DISABLED_MATCHER, DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR, DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH, DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER, DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD, DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE, DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH, DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT, DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME, DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL, DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK, DYNAMIC_FORM_CONTROL_MAP_FN, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_RATING, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER, DYNAMIC_FORM_TEXTAREA_WRAP_HARD, DYNAMIC_FORM_TEXTAREA_WRAP_SOFT, DYNAMIC_MATCHERS, DYNAMIC_MATCHER_PROVIDERS, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT, DYNAMIC_VALIDATORS, DisabledMatcher, DynamicCheckControlModel, DynamicCheckboxGroupModel, DynamicCheckboxModel, DynamicColorPickerModel, DynamicDateControlModel, DynamicDatePickerModel, DynamicEditorModel, DynamicFileControlModel, DynamicFileUploadModel, DynamicFormArrayComponent, DynamicFormArrayGroupModel, DynamicFormArrayModel, DynamicFormComponent, DynamicFormComponentService, DynamicFormControlComponent, DynamicFormControlContainerComponent, DynamicFormControlEventType, DynamicFormControlModel, DynamicFormGroupModel, DynamicFormLayoutService, DynamicFormOption, DynamicFormRelationService, DynamicFormService, DynamicFormValidationService, DynamicFormValueControlModel, DynamicFormsCoreModule, DynamicIdDirective, DynamicInputControlModel, DynamicInputModel, DynamicListDirective, DynamicOptionControlModel, DynamicRadioGroupModel, DynamicRatingModel, DynamicSelectModel, DynamicSliderModel, DynamicSwitchModel, DynamicTemplateDirective, DynamicTemplateableFormControlComponent, DynamicTextAreaModel, DynamicTimePickerModel, HIDDEN_MATCHER, HiddenMatcher, MATCH_DISABLED, MATCH_ENABLED, MATCH_HIDDEN, MATCH_OPTIONAL, MATCH_REQUIRED, MATCH_VISIBLE, METADATA_KEY_SERIALIZABLE, OR_OPERATOR, REQUIRED_MATCHER, RequiredMatcher, getSerializables, isAddressToken, isBoolean, isContactField, isContactToken, isDynamicFormControlEvent, isField, isFunction, isNumber, isObject, isSectionToken, isString, maskFromString, maskToString, parseReviver, serializable, serialize, validate };
//# sourceMappingURL=core.js.map

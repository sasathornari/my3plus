/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional } from "@angular/core";
import { isFunction, isNumber } from "../utils/core.utils";
import * as i0 from "@angular/core";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken("DYNAMIC_FORM_CONTROL_MAP_FN");
export class DynamicFormComponentService {
    /**
     * @param {?} DYNAMIC_FORM_CONTROL_MAP_FN
     */
    constructor(DYNAMIC_FORM_CONTROL_MAP_FN) {
        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
        this.componentRefs = {};
        this.DYNAMIC_FORM_CONTROL_MAP_FN = (/** @type {?} */ (DYNAMIC_FORM_CONTROL_MAP_FN));
    }
    /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    getFormControlRef(modelId, index) {
        /** @type {?} */
        const ref = this.componentRefs[modelId];
        if (isNumber(index)) {
            return Array.isArray(ref) ? ref[index] : undefined;
        }
        else {
            return (/** @type {?} */ (ref));
        }
    }
    /**
     * @param {?} model
     * @param {?} instance
     * @param {?=} index
     * @return {?}
     */
    registerFormControlRef(model, instance, index) {
        if (isNumber(index)) {
            /** @type {?} */
            const arrayRef = (/** @type {?} */ (this.componentRefs[model.id])) || [];
            if (Array.isArray(arrayRef)) {
                arrayRef.splice(index, 0, instance);
                this.componentRefs[model.id] = arrayRef;
            }
            else {
                console.warn(`registerFormControlRef is called with index for a non-array form control: ${model.id}`);
            }
        }
        else {
            this.componentRefs[model.id] = instance;
        }
    }
    /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    unregisterFormControlRef(modelId, index) {
        /** @type {?} */
        const componentRef = this.componentRefs[modelId];
        if (isNumber(index)) {
            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {
                componentRef.splice(index, 1);
            }
        }
        else if (componentRef !== undefined) {
            delete this.componentRefs[modelId];
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    getCustomComponentType(model) {
        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;
    }
}
DynamicFormComponentService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
DynamicFormComponentService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DYNAMIC_FORM_CONTROL_MAP_FN,] }, { type: Optional }] }
];
/** @nocollapse */ DynamicFormComponentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormComponentService_Factory() { return new DynamicFormComponentService(i0.ɵɵinject(DYNAMIC_FORM_CONTROL_MAP_FN, 8)); }, token: DynamicFormComponentService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponentService.prototype.componentRefs;
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponentService.prototype.DYNAMIC_FORM_CONTROL_MAP_FN;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbXBvbmVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1jb21wb25lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFHakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBTTNELE1BQU0sT0FBTywyQkFBMkIsR0FBRyxJQUFJLGNBQWMsQ0FBMEIsNkJBQTZCLENBQUM7QUFLckgsTUFBTSxPQUFPLDJCQUEyQjs7OztJQUlwQyxZQUE4RSwyQkFBZ0M7UUFBaEMsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUFLO1FBRnRHLGtCQUFhLEdBQXVFLEVBQUUsQ0FBQztRQUczRixJQUFJLENBQUMsMkJBQTJCLEdBQUcsbUJBQUEsMkJBQTJCLEVBQTJCLENBQUM7SUFDOUYsQ0FBQzs7Ozs7O0lBRUQsaUJBQWlCLENBQUMsT0FBZSxFQUFFLEtBQWM7O2NBRXZDLEdBQUcsR0FBb0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFFeEYsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFFakIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztTQUV0RDthQUFNO1lBQ0gsT0FBTyxtQkFBQSxHQUFHLEVBQXlCLENBQUM7U0FDdkM7SUFDTCxDQUFDOzs7Ozs7O0lBRUQsc0JBQXNCLENBQUMsS0FBOEIsRUFBRSxRQUErQixFQUFFLEtBQWM7UUFFbEcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7O2tCQUVYLFFBQVEsR0FBNEIsbUJBQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQTJCLElBQUksRUFBRTtZQUV2RyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBRXpCLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO2FBRTNDO2lCQUFNO2dCQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsNkVBQTZFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3pHO1NBRUo7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztTQUMzQztJQUVMLENBQUM7Ozs7OztJQUVELHdCQUF3QixDQUFDLE9BQWUsRUFBRSxLQUFjOztjQUU5QyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFFaEQsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFFakIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2xFLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2pDO1NBRUo7YUFBTSxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxzQkFBc0IsQ0FBQyxLQUE4QjtRQUNqRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDekcsQ0FBQzs7O1lBOURKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs0Q0FLZ0IsTUFBTSxTQUFDLDJCQUEyQixjQUFHLFFBQVE7Ozs7Ozs7O0lBRjFELG9EQUErRjs7Ozs7SUFFbkYsa0VBQWtHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCwgVHlwZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2wgfSBmcm9tIFwiLi4vY29tcG9uZW50L2R5bmFtaWMtZm9ybS1jb250cm9sLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzTnVtYmVyIH0gZnJvbSBcIi4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgRHluYW1pY0Zvcm1Db250cm9sUmVmID0gQ29tcG9uZW50UmVmPER5bmFtaWNGb3JtQ29udHJvbD47XG5cbmV4cG9ydCB0eXBlIER5bmFtaWNGb3JtQ29udHJvbE1hcEZuID0gKG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCkgPT4gVHlwZTxEeW5hbWljRm9ybUNvbnRyb2w+IHwgbnVsbDtcblxuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX01BUF9GTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEeW5hbWljRm9ybUNvbnRyb2xNYXBGbj4oXCJEWU5BTUlDX0ZPUk1fQ09OVFJPTF9NQVBfRk5cIik7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybUNvbXBvbmVudFNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWZzOiB7IFtrZXk6IHN0cmluZ106IER5bmFtaWNGb3JtQ29udHJvbFJlZiB8IER5bmFtaWNGb3JtQ29udHJvbFJlZltdIH0gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoRFlOQU1JQ19GT1JNX0NPTlRST0xfTUFQX0ZOKSBAT3B0aW9uYWwoKSBwcml2YXRlIHJlYWRvbmx5IERZTkFNSUNfRk9STV9DT05UUk9MX01BUF9GTjogYW55KSB7XG4gICAgICAgIHRoaXMuRFlOQU1JQ19GT1JNX0NPTlRST0xfTUFQX0ZOID0gRFlOQU1JQ19GT1JNX0NPTlRST0xfTUFQX0ZOIGFzIER5bmFtaWNGb3JtQ29udHJvbE1hcEZuO1xuICAgIH1cblxuICAgIGdldEZvcm1Db250cm9sUmVmKG1vZGVsSWQ6IHN0cmluZywgaW5kZXg/OiBudW1iZXIpOiBEeW5hbWljRm9ybUNvbnRyb2xSZWYgfCB1bmRlZmluZWQge1xuXG4gICAgICAgIGNvbnN0IHJlZjogRHluYW1pY0Zvcm1Db250cm9sUmVmIHwgRHluYW1pY0Zvcm1Db250cm9sUmVmW10gPSB0aGlzLmNvbXBvbmVudFJlZnNbbW9kZWxJZF07XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGluZGV4KSkge1xuXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZWYpID8gcmVmW2luZGV4XSA6IHVuZGVmaW5lZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlZiBhcyBEeW5hbWljRm9ybUNvbnRyb2xSZWY7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWdpc3RlckZvcm1Db250cm9sUmVmKG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCwgaW5zdGFuY2U6IER5bmFtaWNGb3JtQ29udHJvbFJlZiwgaW5kZXg/OiBudW1iZXIpOiB2b2lkIHtcblxuICAgICAgICBpZiAoaXNOdW1iZXIoaW5kZXgpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGFycmF5UmVmOiBEeW5hbWljRm9ybUNvbnRyb2xSZWZbXSA9IHRoaXMuY29tcG9uZW50UmVmc1ttb2RlbC5pZF0gYXMgRHluYW1pY0Zvcm1Db250cm9sUmVmW10gfHwgW107XG5cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5UmVmKSkge1xuXG4gICAgICAgICAgICAgICAgYXJyYXlSZWYuc3BsaWNlKGluZGV4LCAwLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWZzW21vZGVsLmlkXSA9IGFycmF5UmVmO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgcmVnaXN0ZXJGb3JtQ29udHJvbFJlZiBpcyBjYWxsZWQgd2l0aCBpbmRleCBmb3IgYSBub24tYXJyYXkgZm9ybSBjb250cm9sOiAke21vZGVsLmlkfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZnNbbW9kZWwuaWRdID0gaW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHVucmVnaXN0ZXJGb3JtQ29udHJvbFJlZihtb2RlbElkOiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5jb21wb25lbnRSZWZzW21vZGVsSWRdO1xuXG4gICAgICAgIGlmIChpc051bWJlcihpbmRleCkpIHtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29tcG9uZW50UmVmKSAmJiBjb21wb25lbnRSZWZbaW5kZXhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRSZWYuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jb21wb25lbnRSZWZzW21vZGVsSWRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q3VzdG9tQ29tcG9uZW50VHlwZShtb2RlbDogRHluYW1pY0Zvcm1Db250cm9sTW9kZWwpOiBUeXBlPER5bmFtaWNGb3JtQ29udHJvbD4gfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24odGhpcy5EWU5BTUlDX0ZPUk1fQ09OVFJPTF9NQVBfRk4pID8gdGhpcy5EWU5BTUlDX0ZPUk1fQ09OVFJPTF9NQVBfRk4obW9kZWwpIDogbnVsbDtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DynamicFormControlEventType, isDynamicFormControlEvent } from "./dynamic-form-control.event";
import { DynamicFormValueControlModel } from "../model/dynamic-form-value-control.model";
import { DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from "../model/checkbox/dynamic-checkbox.model";
import { DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE, DYNAMIC_FORM_CONTROL_TYPE_INPUT } from "../model/input/dynamic-input.model";
import { isString } from "../utils/core.utils";
/**
 * @abstract
 */
export class DynamicFormControlContainerComponent {
    /**
     * @protected
     * @param {?} componentFactoryResolver
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} componentService
     * @param {?} relationService
     */
    constructor(componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this.context = null;
        this.componentSubscriptions = [];
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const groupChange = (/** @type {?} */ (changes["group"]));
        /** @type {?} */
        const modelChange = (/** @type {?} */ (changes["model"]));
        if (modelChange) {
            this.destroyFormControlComponent();
            this.createFormControlComponent();
        }
        if (groupChange || modelChange) {
            if (this.model) {
                this.unsubscribe();
                if (this.group) {
                    this.control = (/** @type {?} */ (this.group.get(this.model.id)));
                    this.subscriptions.push(this.control.valueChanges.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => this.onControlValueChanges(value))));
                }
                this.subscriptions.push(this.model.disabledChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => this.onModelDisabledUpdates(value))));
                if (this.model instanceof DynamicFormValueControlModel) {
                    /** @type {?} */
                    const model = (/** @type {?} */ (this.model));
                    this.subscriptions.push(model.valueChanges.subscribe((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => this.onModelValueUpdates(value))));
                }
                if (this.model.relations.length > 0) {
                    this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyFormControlComponent();
        this.unsubscribe();
    }
    /**
     * @return {?}
     */
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    /**
     * @return {?}
     */
    get hasHint() {
        return isString(((/** @type {?} */ (this.model))).hint);
    }
    /**
     * @return {?}
     */
    get hint() {
        return ((/** @type {?} */ (this.model))).hint || null;
    }
    /**
     * @return {?}
     */
    get hasLabel() {
        return isString(this.model.label);
    }
    /**
     * @return {?}
     */
    get isCheckbox() {
        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
    }
    /**
     * @return {?}
     */
    get elementId() {
        return this.layoutService.getElementId(this.model);
    }
    /**
     * @return {?}
     */
    get isInvalid() {
        return this.control.invalid;
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this.control.valid;
    }
    /**
     * @return {?}
     */
    get showErrorMessages() {
        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;
    }
    /**
     * @return {?}
     */
    get templates() {
        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
    }
    /**
     * @return {?}
     */
    get startTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
    }
    /**
     * @return {?}
     */
    get endTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
    }
    /**
     * @param {?} context
     * @param {?} place
     * @param {?=} model
     * @return {?}
     */
    getClass(context, place, model = this.model) {
        /** @type {?} */
        let controlLayout = this.layoutService.findByModel(model, this.layout) || (/** @type {?} */ (model.layout));
        return this.layoutService.getClass(controlLayout, context, place);
    }
    /**
     * @protected
     * @return {?}
     */
    createFormControlComponent() {
        /** @type {?} */
        let componentType = this.componentType;
        if (componentType !== null) {
            /** @type {?} */
            let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentViewContainerRef.clear();
            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
            /** @type {?} */
            let instance = this.componentRef.instance;
            instance.group = this.group;
            instance.layout = this.layout;
            instance.model = (/** @type {?} */ (this.model));
            if (this.templates) {
                instance.templates = this.templates;
            }
            this.componentSubscriptions.push(instance.blur.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            ($event) => this.onBlur($event))));
            this.componentSubscriptions.push(instance.change.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            ($event) => this.onChange($event))));
            this.componentSubscriptions.push(instance.focus.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            ($event) => this.onFocus($event))));
            if (instance.customEvent !== undefined) {
                this.componentSubscriptions.push(instance.customEvent.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                ($event) => this.onCustomEvent($event))));
            }
            this.registerComponentRef(this.componentRef);
        }
    }
    /**
     * @protected
     * @return {?}
     */
    destroyFormControlComponent() {
        if (this.componentRef) {
            this.componentSubscriptions.forEach((/**
             * @param {?} subscription
             * @return {?}
             */
            subscription => subscription.unsubscribe()));
            this.componentSubscriptions = [];
            this.unregisterComponentRef();
            this.componentRef.destroy();
        }
    }
    /**
     * @protected
     * @param {?} $event
     * @param {?} type
     * @return {?}
     */
    createDynamicFormControlEvent($event, type) {
        return { $event, context: this.context, control: this.control, group: this.group, model: this.model, type };
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        subscription => subscription.unsubscribe()));
        this.subscriptions = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onControlValueChanges(value) {
        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {
            this.model.value = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onModelValueUpdates(value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    onModelDisabledUpdates(disabled) {
        disabled ? this.control.disable() : this.control.enable();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onChange($event) {
        if ($event instanceof Event) { // native HTML5 change event
            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                /** @type {?} */
                let model = (/** @type {?} */ (this.model));
                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    /** @type {?} */
                    let inputElement = $event.target || $event.srcElement;
                    model.files = (/** @type {?} */ (inputElement.files));
                }
            }
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
        else if (isDynamicFormControlEvent($event)) { // event bypass
            this.change.emit($event);
        }
        else { // custom library value change event
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.blur.emit($event);
        }
        else { // native HTML 5 or UI library blur event
            this.hasFocus = false;
            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.focus.emit($event);
        }
        else { // native HTML 5 or UI library focus event
            this.hasFocus = true;
            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCustomEvent($event) {
        /** @type {?} */
        let emitter = (/** @type {?} */ (this.customEvent));
        if (isDynamicFormControlEvent($event)) { // child event bypass
            emitter.emit($event);
        }
        else { // native UI library custom event
            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
        }
    }
    /**
     * @private
     * @param {?} instanceRef
     * @return {?}
     */
    registerComponentRef(instanceRef) {
        /** @type {?} */
        let index;
        if (this.context instanceof DynamicFormArrayGroupModel) {
            index = this.context.index;
        }
        this.componentService.registerFormControlRef(this.model, instanceRef, index);
    }
    /**
     * @private
     * @return {?}
     */
    unregisterComponentRef() {
        /** @type {?} */
        let index;
        if (this.context instanceof DynamicFormArrayGroupModel) {
            index = this.context.index;
        }
        this.componentService.unregisterFormControlRef(this.model.id, index);
    }
}
if (false) {
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.context;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.control;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.group;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.hasFocus;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.layout;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.model;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.contentTemplateList;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.inputTemplateList;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.blur;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.change;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.customEvent;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.focus;
    /** @type {?} */
    DynamicFormControlContainerComponent.prototype.componentViewContainerRef;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentRef;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentSubscriptions;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.layoutService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.validationService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.componentService;
    /**
     * @type {?}
     * @protected
     */
    DynamicFormControlContainerComponent.prototype.relationService;
    /**
     * @abstract
     * @return {?}
     */
    DynamicFormControlContainerComponent.prototype.componentType = function () { };
}
//# sourceMappingURL=data:application/json;base64,
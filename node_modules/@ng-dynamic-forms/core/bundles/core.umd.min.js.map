{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ng-dynamic-forms/core/lib/utils/core.utils.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-array.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.event.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-component.ts","ng://@ng-dynamic-forms/core/lib/decorator/serializable.decorator.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-value-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-array/dynamic-form-array.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-check-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox.model.ts","ng://@ng-dynamic-forms/core/lib/utils/autofill.utils.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-input-control.model.ts","ng://@ng-dynamic-forms/core/lib/utils/json.utils.ts","ng://@ng-dynamic-forms/core/lib/model/input/dynamic-input.model.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control-container.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-templateable-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-id.directive.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-list.directive.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-template.directive.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-date-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-file-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-option-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-group/dynamic-form-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/colorpicker/dynamic-colorpicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/datepicker/dynamic-datepicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/editor/dynamic-editor.model.ts","ng://@ng-dynamic-forms/core/lib/model/file-upload/dynamic-file-upload.model.ts","ng://@ng-dynamic-forms/core/lib/model/radio/dynamic-radio-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/rating/dynamic-rating.model.ts","ng://@ng-dynamic-forms/core/lib/model/select/dynamic-select.model.ts","ng://@ng-dynamic-forms/core/lib/model/slider/dynamic-slider.model.ts","ng://@ng-dynamic-forms/core/lib/model/switch/dynamic-switch.model.ts","ng://@ng-dynamic-forms/core/lib/model/textarea/dynamic-textarea.model.ts","ng://@ng-dynamic-forms/core/lib/model/timepicker/dynamic-timepicker.model.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.validators.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-validation.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-component.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-layout.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.matchers.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.service.ts","ng://@ng-dynamic-forms/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","isBoolean","isFunction","isNumber","isObject","isString","DynamicFormControlComponent","layoutService","validationService","_hasFocus","control","group","get","model","id","Error","getElementId","createErrorMessages","invalid","valid","hasErrorMessages","touched","hasFocus","isInvalid","getClass","context","place","controlLayout","findByModel","layout","onBlur","$event","Event","stopPropagation","blur","emit","onChange","change","onEmbeddedCheckboxChange","checked","onCustomEvent","type","bypass","emitter","customEvent","customEventType","onFocus","focus","DynamicFormArrayComponent","tslib_1.__extends","getStartTemplate","templates","getEndTemplate","Blur","Change","Custom","Focus","isDynamicFormControlEvent","DynamicFormComponent","formService","trackByFn","_index","formLayout","onEvent","DynamicFormControlEventType","METADATA_KEY_SERIALIZABLE","serializable","name","defineMetadata","getSerializables","serializables","getMetadata","serialize","reduce","prev","prop","DynamicFormControlModel","config","_this","parent","asyncValidators","errorMessages","hidden","label","labelTooltip","controlTooltip","relations","isArray","updateOn","validators","disabled$","BehaviorSubject","disabled","subscribe","_disabled","disabledChanges","asObservable","getValue","toJSON","tslib_1.__decorate","DynamicFormValueControlModel","_super","additional","hint","required","tabIndex","value$","undefined","_value","valueChanges","getAdditional","defaultValue","DynamicFormArrayGroupModel","index","$implicit","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","DynamicFormArrayModel","groups","groupFactory","groupAsyncValidators","groupPrototype","groupValidators","initialCount","forEach","arrayGroup","addGroup","updateGroupIndex","insertGroup","splice","moveGroup","step","_a","removeGroup","clear","DynamicCheckControlModel","labelPosition","toggle","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","DynamicCheckboxModel","indeterminate","AUTOCOMPLETE_ON","AUTOFILL_TOKENS_ADDRESS","AUTOFILL_TOKENS_CONTACT","AUTOFILL_FIELDS","AUTOFILL_FIELDS_CONTACT","DynamicInputControlModel","autoComplete","autoFocus","maxLength","minLength","placeholder","prefix","readOnly","spellCheck","suffix","maskToString","mask","RegExp","toString","map","maskFromString","startsWith","endsWith","slice","parseReviver","_key","test","Date","DYNAMIC_FORM_CONTROL_TYPE_INPUT","DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT","DynamicInputModel","files","list$","_list","_listId","accept","inputType","max","min","multiple","pattern","list","isObservable","of","pipe","tap","json","Function","DynamicFormControlContainerComponent","componentFactoryResolver","componentService","relationService","componentSubscriptions","subscriptions","ngOnChanges","changes","groupChange","modelChange","destroyFormControlComponent","createFormControlComponent","unsubscribe","onControlValueChanges","onModelDisabledUpdates","onModelValueUpdates","subscribeRelations","ngOnDestroy","inputTemplateList","contentTemplateList","componentType","componentFactory","resolveComponentFactory","componentViewContainerRef","componentRef","createComponent","instance","registerComponentRef","subscription","unregisterComponentRef","destroy","createDynamicFormControlEvent","setValue","disable","enable","inputElement","srcElement","instanceRef","registerFormControlRef","unregisterFormControlRef","DynamicTemplateableFormControlComponent","ngAfterViewInit","filterTemplatesByModel","template","bindTemplate","as","templateDirectives","has","property","viewChild","mapTemplate","DynamicIdDirective","elementRef","renderer","dynamicId","setAttribute","nativeElement","Directive","args","selector","ElementRef","Renderer2","Input","DynamicListDirective","listId","Start","End","DynamicTemplateDirective","templateRef","align","DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT","TemplateRef","DynamicDateControlModel","format","DynamicFileControlModel","DynamicFormOption","text","DynamicOptionControlModel","_options","options","updateOptions$","options$","optionConfig","optionsConfig","add","insert","option","remove","indices","_i","DYNAMIC_FORM_CONTROL_TYPE_GROUP","DynamicFormGroupModel","legend","set","controlModel","move","size","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DynamicCheckboxGroupModel","check","uncheck","checkAll","uncheckAll","DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER","DynamicColorPickerModel","inline","DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER","DynamicDatePickerModel","focusedDate","toggleIcon","toggleLabel","DYNAMIC_FORM_CONTROL_TYPE_EDITOR","DynamicEditorModel","DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD","DynamicFileUploadModel","autoUpload","maxSize","minSize","removeUrl","showFileList","url","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","DynamicRadioGroupModel","select","DYNAMIC_FORM_CONTROL_TYPE_RATING","DynamicRatingModel","DYNAMIC_FORM_CONTROL_TYPE_SELECT","DynamicSelectModel","compareWithFn","looseIdentical","filterable","DYNAMIC_FORM_CONTROL_TYPE_SLIDER","DynamicSliderModel","vertical","DYNAMIC_FORM_CONTROL_TYPE_SWITCH","DynamicSwitchModel","offLabel","onLabel","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","DYNAMIC_FORM_TEXTAREA_WRAP_SOFT","DynamicTextAreaModel","cols","rows","wrap","DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER","DynamicTimePickerModel","meridian","showSeconds","DYNAMIC_VALIDATORS","InjectionToken","DynamicFormValidationService","NG_VALIDATORS","NG_ASYNC_VALIDATORS","getValidatorFn","validatorName","validatorArgs","validatorsToken","validatorFn","Validators","find","getValidatorFns","validatorsConfig","validatorFns","keys","validatorConfigKey","validatorConfigValue","isValidatorDescriptor","descriptor","parseErrorMessageConfig","replace","_match","expression","propertySource","propertyName","indexOf","getValidator","getAsyncValidator","getValidators","getAsyncValidators","asyncValidatorsConfig","updateValidators","clearValidators","setValidators","updateValueAndValidity","updateAsyncValidators","clearAsyncValidators","setAsyncValidators","messages","messagesConfig_1","errors","validationErrorKey","messageKey","validationError","getError","messageTemplate","isFormHook","Injectable","providedIn","Optional","Inject","Map","DynamicFormService","createAbstractControlOptions","createFormArray","formArrayModel","controls","groupModel","groupOptions","createFormGroup","FormArray","formModel","controlState","controlOptions","FormControl","FormGroup","getPathSegment","getPath","join","path","unshift","addFormGroupControl","formGroup","models","insertFormGroupControl","_formModel","moveFormGroupControl","controlName","idx","addControl","removeFormGroupControl","removeControl","addFormArrayGroup","formArray","insertFormArrayGroup","moveFormArrayGroup","newIndex","moveUp","movingGroups_1","at","formControl","position","setControl","removeFormArrayGroup","removeAt","clearFormArray","findById","result","findByIdFn","groupModel_1","tslib_1.__values","groupModel_1_1","findModelById","findControlByModel","root","fromJSON","formModelJSON","JSON","parse","formArrayModel_1","inputModel","DYNAMIC_FORM_CONTROL_MAP_FN","DynamicFormComponentService","componentRefs","getFormControlRef","modelId","ref","arrayRef","console","warn","getCustomComponentType","DynamicFormLayoutService","_b","_c","split","substring","trim","filterCallback","modelType","QueryList","filter","getAlignedTemplate","alignment","DYNAMIC_MATCHERS","DisabledMatcher","match","opposingMatch","hasMatch","HiddenMatcher","RequiredMatcher","injector","DISABLED_MATCHER","provide","useValue","multi","HIDDEN_MATCHER","REQUIRED_MATCHER","DYNAMIC_MATCHER_PROVIDERS","DynamicFormRelationService","getRelatedFormControls","conditionReducer","condition","rootPath","relation","when","findRelationByMatcher","matcher","includes","matchesCondition","relatedFormControls","operator","hasAlreadyMatched","relatedFormControl","entries","_d","status","values","relatedControl","startWith","statusChanges","merge","Injector","DynamicFormsCoreModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","exports","token","tokens","toExpression","total","currentValue","tokensAddress","tokensContact","fields","fieldsContact"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isBoolean(value: any): value is boolean {\n    return typeof value === \"boolean\";\n}\n\nexport function isFunction(value: any): value is Function {\n    return typeof value === \"function\";\n}\n\nexport function isNumber(value: any): value is number {\n    return typeof value === \"number\";\n}\n\nexport function isObject(value: any): value is object {\n    return typeof value === \"object\" && value !== null;\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\";\n}\n","import { EventEmitter } from \"@angular/core\";\nimport { AbstractControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicFormControlCustomEvent } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport {\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormControlTemplates\n} from \"../service/dynamic-form-layout.service\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicFormControlComponent implements DynamicFormControl {\n\n    private _hasFocus: boolean = false;\n\n    group: FormGroup;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n    templates: DynamicFormControlTemplates;\n\n    blur: EventEmitter<any>;\n    change: EventEmitter<any>;\n    customEvent: EventEmitter<DynamicFormControlCustomEvent> | undefined;\n    focus: EventEmitter<any>;\n\n    protected constructor(protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) {}\n\n    get control(): AbstractControl | never {\n\n        const control = this.group.get(this.model.id);\n\n        if (control === null) {\n            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);\n        }\n\n        return control as AbstractControl;\n    }\n\n    get elementId(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasFocus(): boolean {\n        return this._hasFocus;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.layout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onBlur($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = false;\n        this.blur.emit($event);\n    }\n\n    onChange($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this.change.emit($event);\n    }\n\n    onEmbeddedCheckboxChange($event: Event, model: DynamicCheckboxModel) {\n\n        this.onChange($event);\n\n        model.value = ($event.target as HTMLInputElement).checked;\n    }\n\n    onCustomEvent($event: any, type: string | null = null, bypass: boolean = false) {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlCustomEvent>;\n\n        if (bypass) {\n\n            emitter.emit($event);\n\n        } else if (isString(type)) {\n\n            emitter.emit({customEvent: $event, customEventType: type});\n        }\n    }\n\n    onFocus($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = true;\n        this.focus.emit($event);\n    }\n}\n","import { QueryList } from \"@angular/core\";\nimport { FormArray } from \"@angular/forms\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormArrayModel } from \"../model/form-array/dynamic-form-array.model\";\n\nexport abstract class DynamicFormArrayComponent extends DynamicFormControlComponent {\n\n    model: DynamicFormArrayModel;\n    templates: QueryList<DynamicTemplateDirective> | undefined;\n\n    get array(): FormArray {\n        return this.control as FormArray;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getStartTemplate(this.model, this.templates);\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getEndTemplate(this.model, this.templates);\n    }\n}\n","import { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport enum DynamicFormControlEventType {Blur = \"blur\", Change = \"change\", Custom = \"custom\", Focus = \"focus\"}\n\nexport interface DynamicFormControlEvent {\n\n    $event: Event | FocusEvent | DynamicFormControlEvent | any;\n    context: DynamicFormArrayGroupModel | null;\n    control: FormControl;\n    group: FormGroup;\n    model: DynamicFormControlModel;\n    type: string;\n}\n\nexport interface DynamicFormControlCustomEvent {\n\n    customEvent: any;\n    customEventType: string;\n}\n\nexport function isDynamicFormControlEvent($event: any): $event is DynamicFormControlEvent {\n    return isObject($event) && $event.hasOwnProperty(\"$event\");\n}","import { EventEmitter, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\nimport { DynamicFormControlEvent, DynamicFormControlEventType } from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../model/dynamic-form.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"../service/dynamic-form.service\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\n\nexport abstract class DynamicFormComponent {\n\n    formGroup: FormGroup;\n    formModel: DynamicFormModel;\n    formLayout: DynamicFormLayout;\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    templates: QueryList<DynamicTemplateDirective>;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    focus: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent>;\n\n    protected constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {}\n\n    trackByFn(_index: number, model: DynamicFormControlModel): string {\n        return model.id;\n    }\n\n    getClass(model: DynamicFormControlModel, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.formLayout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onEvent($event: DynamicFormControlEvent, type: string) {\n\n        switch (type) {\n\n            case DynamicFormControlEventType.Blur:\n                this.blur.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Change:\n                this.change.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Focus:\n                this.focus.emit($event);\n                break;\n\n            case DynamicFormControlEventType.Custom:\n                this.customEvent.emit($event);\n                break;\n        }\n    }\n}\n","import \"reflect-metadata\";\n\ndeclare let Reflect: any;\n\nexport const METADATA_KEY_SERIALIZABLE = \"SERIALIZABLE\";\n\nexport interface SerializableProperty {\n\n    key: string;\n    name: string;\n}\n\nexport function serializable(name?: string): (target: any, key: string) => void {\n\n    return function (target, key) {\n        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, {key: key, name: name || key}, target, key);\n    };\n}\n\nexport function getSerializables(target: any): SerializableProperty[] {\n\n    let serializables = [];\n\n    for (let key in target) {\n\n        let metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);\n\n        if (metadata) {\n            serializables.push(metadata);\n        }\n    }\n\n    return serializables;\n}\n\nexport function serialize(target: any, prototype?: any): Object {\n\n    return getSerializables(prototype || target).reduce((prev: any, prop: SerializableProperty) => {\n\n        prev[prop.name] = target[prop.key];\n\n        return prev;\n\n    }, {});\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"./misc/dynamic-form-control-path.model\";\nimport { DynamicFormControlRelation } from \"./misc/dynamic-form-control-relation.model\";\nimport { DynamicValidatorsConfig } from \"./misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject, isString } from \"../utils/core.utils\";\n\nexport type FormHooks = 'change' | 'blur' | 'submit';\n\nexport interface DynamicFormControlModelConfig {\n\n    asyncValidators?: DynamicValidatorsConfig;\n    disabled?: boolean;\n    errorMessages?: DynamicValidatorsConfig;\n    hidden?: boolean;\n    id: string;\n    label?: string;\n    labelTooltip?: string;\n    controlTooltip?: string;\n    name?: string;\n    relations?: DynamicFormControlRelation[];\n    updateOn?: FormHooks;\n    validators?: DynamicValidatorsConfig;\n}\n\nexport abstract class DynamicFormControlModel implements DynamicPathable {\n\n    @serializable() asyncValidators: DynamicValidatorsConfig | null;\n    @serializable(\"disabled\") _disabled: boolean;\n    @serializable() errorMessages: DynamicValidatorsConfig | null;\n    @serializable() hidden: boolean;\n    @serializable() id: string;\n    @serializable() label: string | null;\n    @serializable() labelTooltip: string | null;\n    @serializable() controlTooltip: string | null;\n    @serializable() layout: DynamicFormControlLayout | null;\n    @serializable() name: string;\n    parent: DynamicPathable | null = null;\n    @serializable() relations: DynamicFormControlRelation[];\n    @serializable() updateOn: FormHooks | null;\n    @serializable() validators: DynamicValidatorsConfig | null;\n\n    private readonly disabled$: BehaviorSubject<boolean>;\n\n    readonly disabledChanges: Observable<boolean>;\n\n    abstract readonly type: string;\n\n    protected constructor(config: DynamicFormControlModelConfig, layout: DynamicFormControlLayout | null = null) {\n\n        this.asyncValidators = config.asyncValidators || null;\n        this.errorMessages = config.errorMessages || null;\n        this.hidden = isBoolean(config.hidden) ? config.hidden : false;\n        this.id = config.id;\n        this.label = config.label || null;\n        this.labelTooltip = config.labelTooltip || null;\n        this.controlTooltip = config.controlTooltip || null;\n        this.layout = layout;\n        this.name = config.name || config.id;\n        this.relations = Array.isArray(config.relations) ? config.relations : [];\n        this.updateOn = isString(config.updateOn) ? config.updateOn : null;\n        this.validators = config.validators || null;\n\n        this.disabled$ = new BehaviorSubject(isBoolean(config.disabled) ? config.disabled : false);\n        this.disabled$.subscribe(disabled => this._disabled = disabled);\n        this.disabledChanges = this.disabled$.asObservable();\n    }\n\n    get disabled(): boolean {\n        return this.disabled$.getValue();\n    }\n\n    set disabled(disabled: boolean) {\n        this.disabled$.next(disabled);\n    }\n\n    get hasErrorMessages(): boolean {\n        return isObject(this.errorMessages);\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { DynamicFormControlModel, DynamicFormControlModelConfig } from \"./dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject } from \"../utils/core.utils\";\n\nexport interface DynamicFormValueControlModelConfig<T> extends DynamicFormControlModelConfig {\n\n    additional?: { [key: string]: any };\n    hint?: string;\n    required?: boolean;\n    tabIndex?: number;\n    value?: T;\n}\n\nexport abstract class DynamicFormValueControlModel<T> extends DynamicFormControlModel {\n\n    @serializable() additional: { [key: string]: any } | null;\n    @serializable() hint: string | null;\n    @serializable() required: boolean;\n    @serializable() tabIndex: number | null;\n    @serializable(\"value\") private _value: T | null;\n\n    private readonly value$: BehaviorSubject<T>;\n\n    readonly valueChanges: Observable<T>;\n\n    protected constructor(config: DynamicFormValueControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.additional = isObject(config.additional) ? config.additional : null;\n        this.hint = config.hint || null;\n        this.required = isBoolean(config.required) ? config.required : false;\n        this.tabIndex = config.tabIndex || null;\n\n        this.value$ = new BehaviorSubject(config.value !== null && config.value !== undefined ? config.value : null);\n        this.value$.subscribe(value => this._value = value);\n        this.valueChanges = this.value$.asObservable();\n    }\n\n    get value(): T | null {\n        return this.value$.getValue();\n    }\n\n    set value(value: T | null) {\n        this.value$.next(value);\n    }\n\n    getAdditional(key: string, defaultValue: any | null | undefined = undefined): any {\n        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;\n    }\n}\n","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"../misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\nimport { isFunction, isNumber } from \"../../utils/core.utils\";\n\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\n\n    $implicit: DynamicFormArrayGroupModel;\n    context: DynamicFormArrayModel;\n    @serializable() group: DynamicFormModel;\n    @serializable() index: number;\n\n    constructor(context: DynamicFormArrayModel, group: DynamicFormModel = [], index: number = -1) {\n\n        this.$implicit = this;\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    get parent(): DynamicFormArrayModel {\n        return this.context;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    groupAsyncValidators?: DynamicValidatorsConfig;\n    groupFactory?: () => DynamicFormModel;\n    groupValidators?: DynamicValidatorsConfig;\n    groups?: DynamicFormArrayGroupModel[] | null;\n    initialCount?: number;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() groupAsyncValidators: DynamicValidatorsConfig | null;\n    groupFactory: () => DynamicFormModel;\n    @serializable() groupValidators: DynamicValidatorsConfig | null;\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\n    @serializable() initialCount: number;\n\n    @serializable() readonly groupPrototype: DynamicFormModel; // only to recreate model from JSON\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        if (isFunction(config.groupFactory)) {\n            this.groupFactory = config.groupFactory;\n        } else {\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.groupAsyncValidators = config.groupAsyncValidators || null;\n        this.groupPrototype = this.groupFactory();\n        this.groupValidators = config.groupValidators || null;\n        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\n            });\n\n        } else {\n\n            for (let index = 0; index < this.initialCount; index++) {\n                this.addGroup();\n            }\n        }\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    moveGroup(index: number, step: number): void {\n\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\n        this.updateGroupIndex();\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n\n    clear(): void {\n        this.groups.splice(0);\n        this.updateGroupIndex();\n    }\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicCheckControlModelConfig extends DynamicFormValueControlModelConfig<boolean> {\n\n    labelPosition?: string;\n}\n\nexport abstract class DynamicCheckControlModel extends DynamicFormValueControlModel<boolean> {\n\n    @serializable() labelPosition: string | null;\n\n    protected constructor(config: DynamicCheckControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.labelPosition = config.labelPosition || null;\n        this.checked = isBoolean(this.value) ? this.value : false;\n    }\n\n    get checked(): boolean {\n        return this.value;\n    }\n\n    set checked(checked: boolean) {\n        this.value = checked;\n    }\n\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n}\n","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = \"CHECKBOX\";\n\nexport interface DynamicCheckboxModelConfig extends DynamicCheckControlModelConfig {\n\n    indeterminate?: boolean;\n}\n\nexport class DynamicCheckboxModel extends DynamicCheckControlModel {\n\n    @serializable() indeterminate: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n\n    constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;\n    }\n}","export const AUTOCOMPLETE_OFF = \"off\";\nexport const AUTOCOMPLETE_ON = \"on\";\n\nexport const AUTOFILL_TOKEN_BILLING = \"billing\";\nexport const AUTOFILL_TOKEN_SHIPPING = \"shipping\";\n\nexport const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];\n\nexport const AUTOFILL_TOKEN_HOME = \"home\";\nexport const AUTOFILL_TOKEN_WORK = \"work\";\nexport const AUTOFILL_TOKEN_MOBILE = \"mobile\";\nexport const AUTOFILL_TOKEN_FAX = \"fax\";\nexport const AUTOFILL_TOKEN_PAGER = \"pager\";\n\nexport const AUTOFILL_TOKENS_CONTACT = [\n    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK\n];\n\nexport const AUTOFILL_FIELD_STREET_ADDRESS = \"street-address\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_1 = \"address-line1\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_2 = \"address-line2\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_3 = \"address-line3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = \"address-level4\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = \"address-level3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = \"address-level2\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = \"address-level1\";\n\nexport const AUTOFILL_FIELD_NAME = \"name\";\nexport const AUTOFILL_FIELD_HONORIFIC_PREFIX = \"honorific-prefix\";\nexport const AUTOFILL_FIELD_GIVEN_NAME = \"given-name\";\nexport const AUTOFILL_FIELD_ADDITIONAL_NAME = \"additional-name\";\nexport const AUTOFILL_FIELD_FAMILY_NAME = \"family-name\";\nexport const AUTOFILL_FIELD_HONORIFIC_SUFFIX = \"honorific-suffix\";\nexport const AUTOFILL_FIELD_NICKNAME = \"nickname\";\nexport const AUTOFILL_FIELD_USERNAME = \"username\";\n\nexport const AUTOFILL_FIELD_NEW_PASSWORD = \"new-password\";\nexport const AUTOFILL_FIELD_CURRENT_PASSWORD = \"current-password\";\n\nexport const AUTOFILL_FIELD_ORGANIZATION_TITLE = \"organization-title\";\nexport const AUTOFILL_FIELD_ORGANIZATION = \"organization\";\n\nexport const AUTOFILL_FIELD_COUNTRY = \"country\";\nexport const AUTOFILL_FIELD_COUNTRY_NAME = \"country-name\";\nexport const AUTOFILL_FIELD_POSTAL_CODE = \"postal-code\";\n\nexport const AUTOFILL_FIELD_CC_NAME = \"cc-name\";\nexport const AUTOFILL_FIELD_CC_GIVEN_NAME = \"cc-given-name\";\nexport const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = \"cc-additional-name\";\nexport const AUTOFILL_FIELD_CC_FAMILY_NAME = \"cc-family-name\";\nexport const AUTOFILL_FIELD_CC_NUMBER = \"cc-number\";\nexport const AUTOFILL_FIELD_CC_EXP = \"cc-exp\";\nexport const AUTOFILL_FIELD_CC_EXP_MONTH = \"cc-exp-month\";\nexport const AUTOFILL_FIELD_CC_EXP_YEAR = \"cc-exp-year\";\nexport const AUTOFILL_FIELD_CC_CSC = \"cc-csc\";\nexport const AUTOFILL_FIELD_CC_TYPE = \"cc-type\";\n\nexport const AUTOFILL_FIELD_TRANSACTION_CURRENCY = \"transaction-currency\";\nexport const AUTOFILL_FIELD_TRANSACTION_AMOUNT = \"transaction-amount\";\n\nexport const AUTOFILL_FIELD_LANGUAGE = \"language\";\n\nexport const AUTOFILL_FIELD_BDAY = \"bday\";\nexport const AUTOFILL_FIELD_BDAY_DAY = \"bday-day\";\nexport const AUTOFILL_FIELD_BDAY_MONTH = \"bday-month\";\nexport const AUTOFILL_FIELD_BDAY_YEAR = \"bday-year\";\n\nexport const AUTOFILL_FIELD_SEX = \"sex\";\n\nexport const AUTOFILL_FIELD_URL = \"url\";\n\nexport const AUTOFILL_FIELD_PHOTO = \"photo\";\n\nexport const AUTOFILL_FIELDS = [\n\n    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,\n    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,\n    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,\n    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,\n    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,\n    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,\n    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,\n    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,\n    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,\n    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO\n];\n\nexport const AUTOFILL_FIELD_TEL = \"tel\";\nexport const AUTOFILL_FIELD_TEL_COUNTRY_CODE = \"tel-country-code\";\nexport const AUTOFILL_FIELD_TEL_NATIONAL = \"tel-national\";\nexport const AUTOFILL_FIELD_TEL_AREA_CODE = \"tel-area-code\";\nexport const AUTOFILL_FIELD_TEL_LOCAL = \"tel-local\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = \"tel-local-prefix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = \"tel-local-suffix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = \"tel-extension\";\nexport const AUTOFILL_FIELD_EMAIL = \"email\";\nexport const AUTOFILL_FIELD_IMPP = \"impp\";\n\nexport const AUTOFILL_FIELDS_CONTACT = [\n\n    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,\n    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,\n    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP\n];\n\nexport function isAddressToken(token: string): boolean {\n    return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;\n}\n\nexport function isContactField(token: string): boolean {\n    return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isContactToken(token: string): boolean {\n    return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isField(token: string): boolean {\n    return AUTOFILL_FIELDS.indexOf(token) > -1;\n}\n\nexport function isSectionToken(token: string): boolean {\n    return token.startsWith(\"section-\");\n}\n\nexport function validate(tokens: string): boolean {\n\n    let toExpression = (total: string, currentValue: string) => `${total}|${currentValue}`,\n        tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression),\n        tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression),\n        fields = AUTOFILL_FIELDS.reduce(toExpression),\n        fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression),\n        regex = new RegExp(`^(section-\\\\w+\\\\s{1})?((${tokensAddress}){1}\\\\s)?((${fields}){1}|((${tokensContact}){1}\\\\s{1}(${fieldsContact})))$`);\n\n    return regex.test(tokens);\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { AUTOCOMPLETE_ON } from \"../utils/autofill.utils\";\nimport { isBoolean, isNumber } from \"../utils/core.utils\";\n\nexport interface DynamicInputControlModelConfig<T> extends DynamicFormValueControlModelConfig<T> {\n\n    autoComplete?: string;\n    autoFocus?: boolean;\n    maxLength?: number;\n    minLength?: number;\n    placeholder?: string;\n    prefix?: string;\n    readOnly?: boolean;\n    spellCheck?: boolean;\n    suffix?: string;\n}\n\nexport abstract class DynamicInputControlModel<T> extends DynamicFormValueControlModel<T> {\n\n    @serializable() autoComplete: string;\n    @serializable() autoFocus: boolean;\n    @serializable() maxLength: number | null;\n    @serializable() minLength: number | null;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() spellCheck: boolean;\n    @serializable() suffix: string | null;\n\n    protected constructor(config: DynamicInputControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;\n        this.minLength = isNumber(config.minLength) ? config.minLength : null;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;\n        this.suffix = config.suffix || null;\n    }\n}","import { isString } from \"./core.utils\";\n\nexport function maskToString(mask: string | RegExp | (string | RegExp)[]): string | string[] | null {\n\n    if (isString(mask)) {\n\n        return mask as string;\n\n    } else if (mask instanceof RegExp) {\n\n        return mask.toString();\n\n    } else if (Array.isArray(mask)) {\n\n        return mask.map(value => maskToString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function maskFromString(mask: string | string[]): string | RegExp | (string | RegExp)[] | null {\n\n    if (isString(mask)) {\n\n        let isRegExp = (mask as string).startsWith(\"/\") && (mask as string).endsWith(\"/\");\n\n        return isRegExp ? new RegExp((mask as string).slice(1, mask.length - 1)) : mask;\n\n    } else if (Array.isArray(mask)) {\n\n        return (mask as string[]).map(value => maskFromString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function parseReviver(_key: string, value: any): any {\n\n    let regexDateISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|([+\\-])([\\d|:]*))?$/;\n\n    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { maskToString } from \"../../utils/json.utils\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\nimport { Observable, isObservable, of } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_INPUT = \"INPUT\";\n\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = \"color\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = \"date\";\n//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = \"datetime\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = \"datetime-local\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = \"email\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = \"file\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = \"month\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = \"number\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = \"password\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = \"range\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = \"search\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = \"tel\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = \"text\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = \"time\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = \"url\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = \"week\";\n\nexport interface DynamicInputModelConfig extends DynamicInputControlModelConfig<string | number | Date | string[]> {\n\n    accept?: string;\n    inputType?: string;\n    list?: any[] | Observable<any[]>;\n    mask?: string | RegExp | Function | (string | RegExp)[];\n    max?: number | string | Date;\n    min?: number | string | Date;\n    multiple?: boolean;\n    pattern?: string;\n    step?: number;\n}\n\nexport class DynamicInputModel extends DynamicInputControlModel<string | number | Date | string[]> {\n\n    @serializable() accept: string | null;\n    @serializable() inputType: string;\n    files: FileList | null = null;\n    list$: Observable<any[]> | null = null;\n    @serializable() mask: string | RegExp | Function | (string | RegExp)[] | null;\n    @serializable() max: number | string | Date | null;\n    @serializable() min: number | string | Date | null;\n    @serializable() multiple: boolean | null;\n    @serializable() pattern: string | null;\n    @serializable() step: number | null;\n\n    @serializable(\"list\") private _list: any[] | null = null;\n    private readonly _listId: string | null = null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_INPUT;\n\n    constructor(config: DynamicInputModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = config.accept || null;\n        this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;\n        this.mask = config.mask || null;\n        this.max = config.max !== undefined ? config.max : null;\n        this.min = config.min !== undefined ? config.min : null;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : null;\n        this.pattern = config.pattern || null;\n        this.step = isNumber(config.step) ? config.step : null;\n\n        if (config.list !== undefined) {\n\n            this.list = config.list;\n            this._listId = `${this.id}List`;\n        }\n    }\n\n    get listId(): string | null {\n        return this._listId;\n    }\n\n    get hasList(): boolean {\n        return isObservable(this.list$);\n    }\n\n    set list(list: any[] | Observable<any[]> | null) {\n\n        if (Array.isArray(list)) {\n\n            this._list = list;\n            this.list$ = of(this._list);\n\n        } else if (isObservable(list)) {\n\n            this.list$ = (list as Observable<any[]>).pipe(tap(list => this._list = list));\n\n        } else {\n\n            this._list = null;\n            this.list$ = null;\n        }\n    }\n\n    toJSON() {\n\n        let json: any = super.toJSON();\n\n        if (this.mask !== null) { \n            if (this.mask instanceof Function) {\n                json.mask = this.mask;\n            } else {\n                json.mask = maskToString(this.mask);\n            }\n        }\n\n        return json;\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n    QueryList,\n    SimpleChange,\n    SimpleChanges,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    DynamicFormControlCustomEvent,\n    DynamicFormControlEvent,\n    DynamicFormControlEventType,\n    isDynamicFormControlEvent\n} from \"./dynamic-form-control.event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DynamicInputModel\n} from \"../model/input/dynamic-input.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControl } from \"./dynamic-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"../service/dynamic-form-component.service\";\nimport { isString } from \"../utils/core.utils\";\nimport { DynamicFormRelationService } from \"../service/dynamic-form-relation.service\";\n\nexport abstract class DynamicFormControlContainerComponent implements OnChanges, OnDestroy {\n\n    context: DynamicFormArrayGroupModel | null = null;\n    control: FormControl;\n    group: FormGroup;\n    hasFocus: boolean;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n\n    contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n    inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent> | undefined;\n    focus: EventEmitter<DynamicFormControlEvent>;\n\n    componentViewContainerRef: ViewContainerRef;\n\n    protected componentRef: ComponentRef<DynamicFormControl>;\n    protected componentSubscriptions: Subscription[] = [];\n    protected subscriptions: Subscription[] = [];\n\n    protected constructor(protected componentFactoryResolver: ComponentFactoryResolver,\n                          protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService,\n                          protected componentService: DynamicFormComponentService,\n                          protected relationService: DynamicFormRelationService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        const groupChange = changes[\"group\"] as SimpleChange,\n              modelChange = changes[\"model\"] as SimpleChange;\n\n        if (modelChange) {\n\n            this.destroyFormControlComponent();\n            this.createFormControlComponent();\n        }\n\n        if (groupChange || modelChange) {\n\n            if (this.model) {\n\n                this.unsubscribe();\n\n                if (this.group) {\n\n                    this.control = this.group.get(this.model.id) as FormControl;\n                    this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));\n                }\n\n                this.subscriptions.push(this.model.disabledChanges.subscribe(value => this.onModelDisabledUpdates(value)));\n\n                if (this.model instanceof DynamicFormValueControlModel) {\n\n                    const model = this.model as DynamicFormValueControlModel<any>;\n\n                    this.subscriptions.push(model.valueChanges.subscribe(value => this.onModelValueUpdates(value)));\n                }\n\n                if (this.model.relations.length > 0) {\n\n                    this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));\n                }\n            }\n        }\n    }\n\n    ngOnDestroy() {\n\n        this.destroyFormControlComponent();\n        this.unsubscribe();\n    }\n\n    abstract get componentType(): Type<DynamicFormControl> | null;\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get hasHint(): boolean {\n        return isString((this.model as DynamicFormValueControlModel<any>).hint);\n    }\n\n    get hint(): string | null {\n        return (this.model as DynamicFormValueControlModel<any>).hint || null;\n    }\n\n    get hasLabel(): boolean {\n        return isString(this.model.label);\n    }\n\n    get isCheckbox(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n    }\n\n    get elementId(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get showErrorMessages(): boolean {\n        return this.model.hasErrorMessages && this.control.touched && !this.hasFocus && this.isInvalid;\n    }\n\n    get templates(): QueryList<DynamicTemplateDirective> | undefined {\n        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace, model: DynamicFormControlModel = this.model): string {\n\n        let controlLayout = this.layoutService.findByModel(model, this.layout) || model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    protected createFormControlComponent(): void {\n\n        let componentType = this.componentType;\n\n        if (componentType !== null) {\n\n            let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n            this.componentViewContainerRef.clear();\n            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);\n\n            let instance = this.componentRef.instance;\n\n            instance.group = this.group;\n            instance.layout = this.layout;\n            instance.model = this.model as any;\n\n            if (this.templates) {\n                instance.templates = this.templates;\n            }\n\n            this.componentSubscriptions.push(instance.blur.subscribe(($event: any) => this.onBlur($event)));\n            this.componentSubscriptions.push(instance.change.subscribe(($event: any) => this.onChange($event)));\n            this.componentSubscriptions.push(instance.focus.subscribe(($event: any) => this.onFocus($event)));\n\n            if (instance.customEvent !== undefined) {\n                this.componentSubscriptions.push(\n                    instance.customEvent.subscribe(($event: any) => this.onCustomEvent($event)));\n            }\n\n            this.registerComponentRef(this.componentRef);\n        }\n    }\n\n    protected destroyFormControlComponent(): void {\n\n        if (this.componentRef) {\n\n            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\n            this.componentSubscriptions = [];\n\n            this.unregisterComponentRef();\n            this.componentRef.destroy();\n        }\n    }\n\n    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent {\n        return {$event, context: this.context, control: this.control, group: this.group, model: this.model, type};\n    }\n\n    unsubscribe(): void {\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    onControlValueChanges(value: any): void {\n\n        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {\n            this.model.value = value;\n        }\n    }\n\n    onModelValueUpdates(value: any): void {\n\n        if (this.control.value !== value) {\n            this.control.setValue(value);\n        }\n    }\n\n    onModelDisabledUpdates(disabled: boolean): void {\n        disabled ? this.control.disable() : this.control.enable();\n    }\n\n    onChange($event: Event | DynamicFormControlEvent | any): void {\n\n        if ($event instanceof Event) { // native HTML5 change event\n\n            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\n\n                let model = this.model as DynamicInputModel;\n\n                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\n\n                    let inputElement: any = $event.target || $event.srcElement;\n\n                    model.files = inputElement.files as FileList;\n                }\n            }\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n\n        } else if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.change.emit($event);\n\n        } else { // custom library value change event\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n        }\n    }\n\n    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.blur.emit($event);\n\n        } else { // native HTML 5 or UI library blur event\n\n            this.hasFocus = false;\n            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));\n        }\n    }\n\n    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.focus.emit($event);\n\n        } else { // native HTML 5 or UI library focus event\n\n            this.hasFocus = true;\n            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));\n        }\n    }\n\n    onCustomEvent($event: DynamicFormControlEvent | DynamicFormControlCustomEvent): void {\n\n        let emitter = this.customEvent as EventEmitter<DynamicFormControlEvent>;\n\n        if (isDynamicFormControlEvent($event)) { // child event bypass\n\n            emitter.emit($event);\n\n        } else { // native UI library custom event\n\n            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));\n        }\n    }\n\n    private registerComponentRef(instanceRef: ComponentRef<DynamicFormControl>): void {\n\n        let index;\n\n        if (this.context instanceof DynamicFormArrayGroupModel) {\n            index = this.context.index;\n        }\n\n        this.componentService.registerFormControlRef(this.model, instanceRef, index);\n    }\n\n    private unregisterComponentRef(): void {\n\n        let index;\n\n        if (this.context instanceof DynamicFormArrayGroupModel) {\n            index = this.context.index;\n        }\n\n        this.componentService.unregisterFormControlRef(this.model.id, index);\n    }\n}\n","import { AfterViewInit, QueryList, TemplateRef } from \"@angular/core\";\nimport { DynamicTemplateableFormControl } from \"./dynamic-templateable-form-control.interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicTemplateableFormControlComponent extends DynamicFormControlComponent implements DynamicTemplateableFormControl, AfterViewInit {\n\n    readonly templateDirectives: Map<string, string>;\n\n    templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n    ngAfterViewInit() {\n\n        this.layoutService\n            .filterTemplatesByModel(this.model, this.templates)\n            .forEach(template => this.bindTemplate(template));\n    }\n\n    abstract get viewChild(): any;\n\n    abstract mapTemplate(template: DynamicTemplateDirective): DynamicTemplateDirective | TemplateRef<any>;\n\n    bindTemplate(template: DynamicTemplateDirective) {\n\n        if (isString(template.as) && this.templateDirectives.has(template.as)) {\n\n            let property = this.templateDirectives.get(template.as) as string;\n\n            this.viewChild[property] = this.mapTemplate(template);\n        }\n    }\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\n\n@Directive({\n    selector: \"[dynamicId]\"\n})\nexport class DynamicIdDirective implements AfterViewInit {\n\n    @Input() dynamicId: string | boolean;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (this.dynamicId) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"id\", this.dynamicId as string);\n        }\n    }\n}","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\nimport { isString } from \"../utils/core.utils\";\n\n@Directive({\n    selector: \"[dynamicList]\"\n})\nexport class DynamicListDirective implements AfterViewInit {\n\n    @Input(\"dynamicList\") listId: string | null;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (isString(this.listId)) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"list\", this.listId as string);\n        }\n    }\n}","import { Directive, Input, TemplateRef } from \"@angular/core\";\n\nexport enum DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT { Start = \"START\", End = \"END\"}\n\n@Directive({\n    selector: \"ng-template[modelId],ng-template[modelType]\"\n})\nexport class DynamicTemplateDirective {\n\n    @Input() align: string = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;\n    @Input() as: string | null = null;\n    @Input() index: number | undefined;\n    @Input() modelId: string;\n    @Input() modelType: string;\n\n    constructor(public templateRef: TemplateRef<any>) {}\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport type DynamicDateControlValue = string | object | Date;\n\nexport interface DynamicDateControlModelConfig extends DynamicFormValueControlModelConfig<DynamicDateControlValue> {\n\n    format?: string;\n    max?: DynamicDateControlValue;\n    min?: DynamicDateControlValue;\n    placeholder?: string;\n}\n\nexport abstract class DynamicDateControlModel extends DynamicFormValueControlModel<DynamicDateControlValue> {\n\n    @serializable() format: string | null;\n    @serializable() max: DynamicDateControlValue | null;\n    @serializable() min: DynamicDateControlValue | null;\n    @serializable() placeholder: string | null;\n\n    protected constructor(config: DynamicDateControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = config.format || null;\n        this.max = config.max || null;\n        this.min = config.min || null;\n        this.placeholder = config.placeholder || null;\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFileControlModelConfig extends DynamicFormValueControlModelConfig<File | File[]> {\n\n    multiple?: boolean;\n}\n\nexport abstract class DynamicFileControlModel extends DynamicFormValueControlModel<File | File[]> {\n\n    @serializable() multiple: boolean;\n\n    protected constructor(config: DynamicFileControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n    }\n}","import { Observable, isObservable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFormOptionConfig<T> {\n\n    disabled?: boolean;\n    label?: string;\n    value: T;\n}\n\nexport class DynamicFormOption<T> {\n\n    @serializable() disabled: boolean;\n    @serializable() label: string | null;\n    @serializable() value: T;\n\n    constructor(config: DynamicFormOptionConfig<T>) {\n\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\n        this.label = config.label || null;\n        this.value = config.value;\n    }\n\n    get text() {\n        return this.label;\n    }\n\n    set text(text: string | null) {\n        this.label = text;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport interface DynamicOptionControlModelConfig<T> extends DynamicFormValueControlModelConfig<T | T[]> {\n\n    options?: DynamicFormOptionConfig<T>[] | Observable<DynamicFormOptionConfig<T>[]>;\n}\n\nexport abstract class DynamicOptionControlModel<T> extends DynamicFormValueControlModel<T | T[]> {\n\n    @serializable(\"options\") private _options: DynamicFormOption<T>[] = [];\n    options$: Observable<DynamicFormOption<T>[]>;\n\n    protected constructor(config: DynamicOptionControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.options = config.options;\n    }\n\n    private updateOptions$(): void {\n        this.options$ = of(this.options);\n    }\n\n    set options(options: any) {\n\n        if (Array.isArray(options)) {\n\n            this._options = (options as DynamicFormOptionConfig<T>[]).map(optionConfig => {\n                return new DynamicFormOption<T>(optionConfig);\n            });\n\n            this.updateOptions$();\n\n        } else if (isObservable(options)) {\n\n            this.options$ = (options as Observable<DynamicFormOptionConfig<T>[]>).pipe(\n                map(optionsConfig => {\n\n                    let options = optionsConfig.map(optionConfig => new DynamicFormOption<T>(optionConfig));\n\n                    this._options = options;\n\n                    return options;\n                }));\n\n        } else {\n\n            this.updateOptions$();\n        }\n    }\n\n    get options(): any {\n        return this._options;\n    }\n\n    add(optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n        return this.insert(this.options.length, optionConfig);\n    }\n\n    get(index: number): DynamicFormOption<T> {\n        return this.options[index];\n    }\n\n    insert(index: number, optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n\n        let option = new DynamicFormOption(optionConfig);\n\n        this.options.splice(index, 0, option);\n        this.updateOptions$();\n\n        return option;\n    }\n\n    remove(...indices: number[]): void {\n\n        indices.forEach(index => this.options.splice(index, 1));\n        this.updateOptions$();\n    }\n\n    abstract select(...indices: number[]): void;\n}","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_GROUP = \"GROUP\";\n\nexport interface DynamicFormGroupModelConfig extends DynamicFormControlModelConfig {\n\n    group?: DynamicFormModel;\n    legend?: string;\n}\n\nexport class DynamicFormGroupModel extends DynamicFormControlModel {\n\n    @serializable() group: DynamicFormModel = [];\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.group = Array.isArray(config.group) ? config.group : [];\n        this.legend = config.legend || null;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    set(index: number, controlModel: DynamicFormControlModel,): void {\n        this.group[index] = controlModel;\n    }\n\n    add(controlModel: DynamicFormControlModel): void {\n        this.group.push(controlModel);\n    }\n\n    insert(index: number, controlModel: DynamicFormControlModel): void {\n        this.group.splice(index, 0, controlModel);\n    }\n\n    move(index: number, step: number): void {\n        this.group.splice(index + step, 0, ...this.group.splice(index, 1));\n    }\n\n    remove(index: number) {\n        this.group.splice(index, 1);\n    }\n\n    size(): number {\n        return this.group.length;\n    }\n}\n","import { DynamicFormGroupModel, DynamicFormGroupModelConfig } from \"../form-group/dynamic-form-group.model\";\nimport { DynamicCheckboxModel } from \"./dynamic-checkbox.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = \"CHECKBOX_GROUP\";\n\nexport class DynamicCheckboxGroupModel extends DynamicFormGroupModel {\n\n    @serializable() group: DynamicCheckboxModel[];\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n        super(config, layout);\n    }\n\n    check(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = true);\n    }\n\n    uncheck(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = false);\n    }\n\n    checkAll(): void {\n        this.group.forEach(model => model.checked = true);\n    }\n\n    uncheckAll(): void {\n        this.group.forEach(model => model.checked = false);\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = \"COLORPICKER\";\n\nexport interface DynamicColorPickerModelConfig extends DynamicFormValueControlModelConfig<string | object> {\n\n    format?: string;\n    inline?: boolean;\n}\n\nexport class DynamicColorPickerModel extends DynamicFormValueControlModel<string | object> {\n\n    @serializable() format: string | null;\n    @serializable() inline: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;\n\n    constructor(config: DynamicColorPickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = isString(config.format) ? config.format : null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n    }\n}","import {\n    DynamicDateControlModel,\n    DynamicDateControlModelConfig,\n    DynamicDateControlValue\n} from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = \"DATEPICKER\";\n\nexport interface DynamicDatePickerModelConfig extends DynamicDateControlModelConfig {\n\n    autoFocus?: boolean;\n    focusedDate?: DynamicDateControlValue;\n    inline?: boolean;\n    prefix?: string;\n    readOnly?: boolean;\n    suffix?: string;\n    toggleIcon?: string;\n    toggleLabel?: string;\n}\n\nexport class DynamicDatePickerModel extends DynamicDateControlModel {\n\n    @serializable() autoFocus: boolean;\n    @serializable() focusedDate: DynamicDateControlValue | null;\n    @serializable() inline: boolean;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() suffix: string | null;\n    @serializable() toggleIcon: string | null;\n    @serializable() toggleLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;\n\n    constructor(config: DynamicDatePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.focusedDate = config.focusedDate || null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n        this.prefix = config.prefix || null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;\n        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;\n        this.suffix = config.suffix || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = \"EDITOR\";\n\nexport interface DynamicEditorModelConfig extends DynamicInputControlModelConfig<string> {\n}\n\nexport class DynamicEditorModel extends DynamicInputControlModel<string> {\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;\n\n    constructor(config: DynamicEditorModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n    }\n}","import { DynamicFileControlModelConfig, DynamicFileControlModel } from \"../dynamic-file-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = \"FILE_UPLOAD\";\n\nexport interface DynamicFileUploadModelConfig extends DynamicFileControlModelConfig {\n\n    accept?: string[];\n    autoUpload?: boolean;\n    maxSize?: number;\n    minSize?: number;\n    removeUrl?: string;\n    showFileList?: boolean;\n    url?: string;\n}\n\nexport class DynamicFileUploadModel extends DynamicFileControlModel {\n\n    @serializable() accept: string[] | null;\n    @serializable() autoUpload: boolean;\n    @serializable() maxSize: number | null;\n    @serializable() minSize: number | null;\n    @serializable() removeUrl: string | null;\n    @serializable() showFileList: boolean;\n    @serializable() url: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;\n\n    constructor(config: DynamicFileUploadModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = Array.isArray(config.accept) ? config.accept : null;\n        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;\n        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;\n        this.minSize = isNumber(config.minSize) ? config.minSize : null;\n        this.removeUrl = config.removeUrl || null;\n        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;\n        this.url = config.url || null;\n    }\n}","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = \"RADIO_GROUP\";\n\nexport interface DynamicRadioGroupModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    legend?: string;\n}\n\nexport class DynamicRadioGroupModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\n\n    constructor(config: DynamicRadioGroupModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.legend = config.legend || null;\n    }\n\n    select(index: number): void {\n        this.value = this.get(index).value;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RATING = \"RATING\";\n\nexport interface DynamicRatingModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n}\n\nexport class DynamicRatingModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RATING;\n\n    constructor(config: DynamicRatingModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n    }\n}","import { ÉµlooseIdentical as looseIdentical } from \"@angular/core\";\nimport { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isFunction } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\n\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    compareWithFn?: (o1: any, o2: any) => boolean;\n    filterable?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n    prefix?: string;\n    suffix?: string;\n}\n\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\n\n    compareWithFn: (value1: any, value2: any) => boolean;\n    @serializable() filterable: boolean;\n    @serializable() multiple: boolean;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() suffix: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\n\n    constructor(config: DynamicSelectModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;\n        this.filterable = isBoolean(config.filterable) ? config.filterable : false;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n        this.placeholder = config.placeholder || \"\";\n        this.prefix = config.prefix || null;\n        this.suffix = config.suffix || null;\n    }\n\n    select(...indices: number[]): void {\n\n        const value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\n\n        this.value = value;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = \"SLIDER\";\n\nexport interface DynamicSliderModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n    min?: number;\n    step?: number;\n    vertical?: boolean;\n}\n\nexport class DynamicSliderModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n    @serializable() min: number | null;\n    @serializable() step: number | null;\n    @serializable() vertical: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;\n\n    constructor(config: DynamicSliderModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n        this.min = isNumber(config.min) ? config.min : 0;\n        this.step = isNumber(config.step) ? config.step : 1;\n        this.vertical = isBoolean(config.vertical) ? config.vertical : false;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = \"SWITCH\";\n\nexport interface DynamicSwitchModelConfig extends DynamicCheckControlModelConfig {\n\n    offLabel?: string;\n    onLabel?: string;\n}\n\nexport class DynamicSwitchModel extends DynamicCheckControlModel {\n\n    @serializable() offLabel: string | null;\n    @serializable() onLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\n\n    constructor(config: DynamicSwitchModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.offLabel = config.offLabel || null;\n        this.onLabel = config.onLabel || null;\n    }\n}","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = \"TEXTAREA\";\n\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = \"hard\";\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = \"soft\";\n\nexport interface DynamicTextAreaModelConfig extends DynamicInputControlModelConfig<string> {\n\n    cols?: number;\n    rows?: number;\n    wrap?: string;\n}\n\nexport class DynamicTextAreaModel extends DynamicInputControlModel<string> {\n\n    @serializable() cols: number;\n    @serializable() rows: number;\n    @serializable() wrap: string;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;\n\n    constructor(config: DynamicTextAreaModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.cols = isNumber(config.cols) ? config.cols : 20;\n        this.rows = isNumber(config.rows) ? config.rows : 2;\n        this.wrap = config.wrap || DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;\n    }\n}","import { DynamicDateControlModel, DynamicDateControlModelConfig } from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = \"TIMEPICKER\";\n\nexport interface DynamicTimePickerModelConfig extends DynamicDateControlModelConfig {\n\n    meridian?: boolean;\n    showSeconds?: boolean;\n}\n\nexport class DynamicTimePickerModel extends DynamicDateControlModel {\n\n    @serializable() meridian: boolean;\n    @serializable() showSeconds: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;\n\n    constructor(config: DynamicTimePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.meridian = isBoolean(config.meridian) ? config.meridian : false;\n        this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;\n    }\n}","import { InjectionToken } from \"@angular/core\";\nimport { AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\n\nexport type Validator = ValidatorFn | AsyncValidatorFn;\n\nexport type ValidatorFactory = (args: any) => Validator;\n\nexport type ValidatorsToken = Validator[];\n\nexport type ValidatorsMap = Map<string, Validator | ValidatorFactory>;\n\nexport const DYNAMIC_VALIDATORS = new InjectionToken<ValidatorsMap>(\"DYNAMIC_VALIDATORS\");\n","import { Injectable, Inject, Optional } from \"@angular/core\";\nimport {\n    AbstractControl,\n    AsyncValidatorFn,\n    ValidatorFn,\n    Validators,\n    NG_VALIDATORS,\n    NG_ASYNC_VALIDATORS\n} from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicValidatorDescriptor,\n    DynamicValidatorsConfig\n} from \"../model/misc/dynamic-form-control-validation.model\";\nimport { isObject, isString } from \"../utils/core.utils\";\nimport { DYNAMIC_VALIDATORS, Validator, ValidatorFactory, ValidatorsToken } from \"./dynamic-form.validators\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormValidationService {\n\n    constructor(@Optional() @Inject(NG_VALIDATORS) private NG_VALIDATORS: ValidatorFn[],\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private NG_ASYNC_VALIDATORS: AsyncValidatorFn[],\n                @Optional() @Inject(DYNAMIC_VALIDATORS) private DYNAMIC_VALIDATORS: Map<string, Validator | ValidatorFactory>) {}\n\n\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\n                           validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator | never {\n\n        let validatorFn: ValidatorFactory | Validator | undefined;\n\n        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators\n\n            validatorFn = (Validators as any)[validatorName];\n\n        } else { // Custom Validators\n\n            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {\n                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);\n\n            } else if (validatorsToken) {\n                validatorFn = validatorsToken.find(validatorFn => validatorFn.name === validatorName);\n            }\n        }\n\n        if (validatorFn === undefined) { // throw when no validator could be resolved\n            throw new Error(`validator \"${validatorName}\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);\n        }\n\n        if (validatorArgs !== null) {\n            return (validatorFn as ValidatorFactory)(validatorArgs);\n        }\n\n        return validatorFn as Validator;\n    }\n\n\n    private getValidatorFns(validatorsConfig: DynamicValidatorsConfig,\n                            validatorsToken: ValidatorsToken = this.NG_VALIDATORS): Validator[] {\n\n        let validatorFns: Validator[] = [];\n\n        if (isObject(validatorsConfig)) {\n\n            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {\n\n                let validatorConfigValue = (validatorsConfig as DynamicValidatorsConfig)[validatorConfigKey];\n\n                if (this.isValidatorDescriptor(validatorConfigValue)) {\n\n                    let descriptor = validatorConfigValue as DynamicValidatorDescriptor;\n\n                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);\n                }\n\n                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);\n            });\n        }\n\n        return validatorFns;\n    }\n\n\n    private parseErrorMessageConfig(template: string, model: DynamicFormControlModel, error: any = null): string {\n\n        return template.replace(/{{\\s*(.+?)\\s*}}/mg, (_match: string, expression: string) => {\n\n            let propertySource: any = model,\n                propertyName: string = expression;\n\n            if (expression.indexOf(\"validator.\") >= 0 && error) {\n\n                propertySource = error;\n                propertyName = expression.replace(\"validator.\", \"\");\n            }\n\n            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?\n                propertySource[propertyName] : null;\n        });\n    }\n\n\n    getValidator(validatorName: string, validatorArgs: any = null): ValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\n    }\n\n\n    getAsyncValidator(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn;\n    }\n\n\n    getValidators(validatorsConfig: DynamicValidatorsConfig): ValidatorFn[] {\n        return this.getValidatorFns(validatorsConfig) as ValidatorFn[];\n    }\n\n\n    getAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig): AsyncValidatorFn[] {\n        return this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS) as AsyncValidatorFn[];\n    }\n\n\n    updateValidators(validatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                     model: DynamicFormControlModel): void {\n\n        model.validators = validatorsConfig;\n\n        if (validatorsConfig === null) {\n\n            control.clearValidators();\n\n        } else {\n            control.setValidators(this.getValidators(validatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n\n    updateAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                          model: DynamicFormControlModel): void {\n\n        model.asyncValidators = asyncValidatorsConfig;\n\n        if (asyncValidatorsConfig === null) {\n\n            control.clearAsyncValidators();\n\n        } else {\n            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n\n    createErrorMessages(control: AbstractControl, model: DynamicFormControlModel): string[] {\n\n        let messages: string[] = [];\n\n        if (model.hasErrorMessages) {\n\n            let messagesConfig = model.errorMessages as DynamicValidatorsConfig;\n\n            Object.keys(control.errors || {}).forEach(validationErrorKey => {\n\n                let messageKey = validationErrorKey;\n\n                if (validationErrorKey === \"minlength\" || validationErrorKey === \"maxlength\") {\n                    messageKey = messageKey.replace(\"length\", \"Length\");\n                }\n\n                if (messagesConfig.hasOwnProperty(messageKey)) {\n\n                    let validationError = control.getError(validationErrorKey),\n                        messageTemplate = messagesConfig[messageKey] as string;\n\n                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));\n                }\n            });\n        }\n\n        return messages;\n    }\n\n\n    isFormHook(value: any): boolean {\n        return isString(value) && [\"blur\", \"change\", \"submit\"].indexOf(value) !== -1;\n    }\n\n\n    isValidatorDescriptor(value: any): boolean {\n\n        if (isObject(value)) {\n            return value.hasOwnProperty(\"name\") && value.hasOwnProperty(\"args\");\n        }\n\n        return false;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { AbstractControl, FormArray, FormControl, FormGroup } from \"@angular/forms\";\nimport { AbstractControlOptions } from \"@angular/forms\";\nimport { DynamicFormControlModel, FormHooks } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DynamicFormArrayModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DynamicCheckboxGroupModel\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\n    DynamicColorPickerModel\n} from \"../model/colorpicker/dynamic-colorpicker.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DynamicDatePickerModel\n} from \"../model/datepicker/dynamic-datepicker.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DynamicEditorModel } from \"../model/editor/dynamic-editor.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD,\n    DynamicFileUploadModel\n} from \"../model/file-upload/dynamic-file-upload.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel } from \"../model/input/dynamic-input.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DynamicRadioGroupModel\n} from \"../model/radio/dynamic-radio-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_RATING, DynamicRatingModel } from \"../model/rating/dynamic-rating.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel } from \"../model/select/dynamic-select.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel } from \"../model/slider/dynamic-slider.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel } from \"../model/switch/dynamic-switch.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel } from \"../model/textarea/dynamic-textarea.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n    DynamicTimePickerModel\n} from \"../model/timepicker/dynamic-timepicker.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { DynamicFormModel, DynamicUnionFormModel } from \"../model/dynamic-form.model\";\nimport { DynamicPathable } from \"../model/misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\nimport { maskFromString, parseReviver } from \"../utils/json.utils\";\nimport { isString } from \"../utils/core.utils\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormService {\n\n    constructor(private validationService: DynamicFormValidationService) {}\n\n\n    private createAbstractControlOptions(validatorsConfig: DynamicValidatorsConfig | null = null,\n                                         asyncValidatorsConfig: DynamicValidatorsConfig | null = null,\n                                         updateOn: FormHooks | null = null): AbstractControlOptions {\n\n        return {\n\n            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,\n\n            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,\n\n            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : \"change\"\n        };\n    }\n\n\n    createFormArray(formArrayModel: DynamicFormArrayModel): FormArray {\n\n        let controls: AbstractControl[] = [],\n            options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators,\n                formArrayModel.updateOn);\n\n        for (let index = 0; index < formArrayModel.size; index++) {\n\n            let groupModel = formArrayModel.get(index),\n                groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators,\n                    formArrayModel.groupAsyncValidators, formArrayModel.updateOn);\n\n            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));\n        }\n\n        return new FormArray(controls, options);\n    }\n\n\n    createFormGroup(formModel: DynamicFormModel, options: AbstractControlOptions | null = null,\n                    parent: DynamicPathable | null = null): FormGroup {\n\n        let controls: { [controlId: string]: AbstractControl; } = {};\n\n        formModel.forEach(model => {\n\n            model.parent = parent;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n\n                    controls[model.id] = this.createFormArray(model as DynamicFormArrayModel);\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n\n                    let groupModel = model as DynamicFormGroupModel,\n                        groupOptions = this.createAbstractControlOptions(groupModel.validators,\n                            groupModel.asyncValidators, groupModel.updateOn);\n\n                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);\n                    break;\n\n                default:\n\n                    let controlModel = model as DynamicFormValueControlModel<any>,\n                        controlState = {value: controlModel.value, disabled: controlModel.disabled},\n                        controlOptions = this.createAbstractControlOptions(controlModel.validators,\n                            controlModel.asyncValidators, controlModel.updateOn);\n\n                    controls[model.id] = new FormControl(controlState, controlOptions);\n            }\n        });\n\n        return new FormGroup(controls, options);\n    }\n\n\n    getPathSegment(model: DynamicPathable): string {\n        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : (model as DynamicFormControlModel).id;\n    }\n\n\n    getPath(model: DynamicPathable, join: boolean = false): string[] | string {\n\n        let path = [this.getPathSegment(model)],\n            parent = model.parent;\n\n        while (parent) {\n\n            path.unshift(this.getPathSegment(parent));\n            parent = parent.parent;\n        }\n\n        return join ? path.join(\".\") : path;\n    }\n\n\n    addFormGroupControl(formGroup: FormGroup, formModel: DynamicUnionFormModel, ...models: DynamicFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormModel;\n            this.insertFormGroupControl(_formModel.length, formGroup, _formModel, ...models);\n        }\n    }\n\n\n    moveFormGroupControl(index: number, step: number, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formModel.move(index, step);\n\n        } else {\n\n            let _formModel = formModel as DynamicFormModel;\n            _formModel.splice(index + step, 0, ..._formModel.splice(index, 1));\n        }\n    }\n\n\n    insertFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel,\n                           ...models: DynamicFormModel): void {\n\n        let parent = formModel instanceof DynamicFormGroupModel ? formModel : null,\n            controls = this.createFormGroup(models, null, parent).controls;\n\n        Object.keys(controls).forEach((controlName, idx) => {\n\n            let controlModel = models[idx];\n\n            if (formModel instanceof DynamicFormGroupModel) {\n                formModel.insert(index, controlModel);\n\n            } else {\n                (formModel as DynamicFormModel).splice(index, 0, controlModel);\n            }\n\n            formGroup.addControl(controlName, controls[controlName]);\n        });\n    }\n\n\n    removeFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formGroup.removeControl(formModel.get(index).id);\n            formModel.remove(index);\n\n        } else {\n\n            formGroup.removeControl(formModel[index].id);\n            (formModel as DynamicFormModel).splice(index, 1);\n        }\n    }\n\n\n    addFormArrayGroup(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.addGroup();\n\n        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    insertFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let groupModel = formArrayModel.insertGroup(index);\n\n        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n\n    moveFormArrayGroup(index: number, step: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        let newIndex = index + step,\n            moveUp = step >= 0;\n\n        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {\n\n            let movingGroups: AbstractControl[] = [];\n\n            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {\n                movingGroups.push(formArray.at(i));\n            }\n\n            movingGroups.forEach((formControl, idx) => {\n\n                let position;\n\n                if (moveUp) {\n                    position = idx === 0 ? newIndex : index + idx - 1;\n\n                } else {\n                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;\n                }\n\n                formArray.setControl(position, formControl);\n            });\n\n            formArrayModel.moveGroup(index, step);\n\n        } else {\n            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);\n        }\n    }\n\n\n    removeFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.removeAt(index);\n        formArrayModel.removeGroup(index);\n    }\n\n\n    clearFormArray(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.clear();\n        formArrayModel.clear();\n    }\n\n\n    findById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n\n        let result = null,\n            findByIdFn = (id: string, groupModel: DynamicFormModel): void => {\n\n                for (let controlModel of groupModel) {\n\n                    if (controlModel.id === id) {\n                        result = controlModel;\n                        break;\n                    }\n\n                    if (controlModel instanceof DynamicFormGroupModel) {\n                        findByIdFn(id, (controlModel as DynamicFormGroupModel).group);\n                    }\n                }\n            };\n\n        findByIdFn(id, formModel);\n\n        return result;\n    }\n\n\n    findModelById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n        return this.findById(id, formModel);\n    }\n\n\n    findControlByModel(model: DynamicFormControlModel, group: FormGroup): AbstractControl | null {\n        return group.root.get(this.getPath(model, true));\n    }\n\n\n    fromJSON(json: string | object[]): DynamicFormModel | never {\n\n        let formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json,\n            formModel: DynamicFormModel = [];\n\n        formModelJSON.forEach((model: any) => {\n\n            let layout = model.layout || null;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                    let formArrayModel = model as DynamicFormArrayModel;\n\n                    if (Array.isArray(formArrayModel.groups)) {\n\n                        formArrayModel.groups.forEach((groupModel: DynamicFormArrayGroupModel) => {\n                            groupModel.group = this.fromJSON(groupModel.group) as DynamicFormModel;\n                        });\n                    }\n\n                    formArrayModel.groupFactory = () => {\n                        return this.fromJSON(formArrayModel.groupPrototype);\n                    };\n\n                    formModel.push(new DynamicFormArrayModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                    formModel.push(new DynamicCheckboxModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n                    model.group = this.fromJSON(model.group) as DynamicCheckboxModel[];\n                    formModel.push(new DynamicCheckboxGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\n                    formModel.push(new DynamicColorPickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n                    formModel.push(new DynamicDatePickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\n                    formModel.push(new DynamicEditorModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:\n                    model.value = null;\n                    formModel.push(new DynamicFileUploadModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                    model.group = this.fromJSON(model.group);\n                    formModel.push(new DynamicFormGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                    let inputModel = model as DynamicInputModel;\n\n                    if (inputModel.mask !== null) {\n                        if (!(inputModel.mask instanceof Function)) {\n                            inputModel.mask = maskFromString(inputModel.mask as string);\n                        }\n                    }\n\n                    formModel.push(new DynamicInputModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                    formModel.push(new DynamicRadioGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n                    formModel.push(new DynamicRatingModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                    formModel.push(new DynamicSelectModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                    formModel.push(new DynamicSliderModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                    formModel.push(new DynamicSwitchModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                    formModel.push(new DynamicTextAreaModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n                    formModel.push(new DynamicTimePickerModel(model, layout));\n                    break;\n\n                default:\n                    throw new Error(`unknown form control model type defined on JSON object with id \"${model.id}\"`);\n            }\n        });\n\n        return formModel;\n    }\n}\n","import { ComponentRef, Inject, Injectable, InjectionToken, Optional, Type } from \"@angular/core\";\nimport { DynamicFormControl } from \"../component/dynamic-form-control.interface\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { isFunction, isNumber } from \"../utils/core.utils\";\n\nexport type DynamicFormControlRef = ComponentRef<DynamicFormControl>;\n\nexport type DynamicFormControlMapFn = (model: DynamicFormControlModel) => Type<DynamicFormControl> | null;\n\nexport const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken<DynamicFormControlMapFn>(\"DYNAMIC_FORM_CONTROL_MAP_FN\");\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormComponentService {\n\n    private componentRefs: { [key: string]: DynamicFormControlRef | DynamicFormControlRef[] } = {};\n\n    constructor(@Inject(DYNAMIC_FORM_CONTROL_MAP_FN) @Optional() private readonly DYNAMIC_FORM_CONTROL_MAP_FN: any) {\n        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN as DynamicFormControlMapFn;\n    }\n\n    getFormControlRef(modelId: string, index?: number): DynamicFormControlRef | undefined {\n\n        const ref: DynamicFormControlRef | DynamicFormControlRef[] = this.componentRefs[modelId];\n\n        if (isNumber(index)) {\n\n            return Array.isArray(ref) ? ref[index] : undefined;\n\n        } else {\n            return ref as DynamicFormControlRef;\n        }\n    }\n\n    registerFormControlRef(model: DynamicFormControlModel, instance: DynamicFormControlRef, index?: number): void {\n\n        if (isNumber(index)) {\n\n            const arrayRef: DynamicFormControlRef[] = this.componentRefs[model.id] as DynamicFormControlRef[] || [];\n\n            if (Array.isArray(arrayRef)) {\n\n                arrayRef.splice(index, 0, instance);\n                this.componentRefs[model.id] = arrayRef;\n\n            } else {\n                console.warn(`registerFormControlRef is called with index for a non-array form control: ${model.id}`);\n            }\n\n        } else {\n            this.componentRefs[model.id] = instance;\n        }\n\n    }\n\n    unregisterFormControlRef(modelId: string, index?: number): void {\n\n        const componentRef = this.componentRefs[modelId];\n\n        if (isNumber(index)) {\n\n            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {\n                componentRef.splice(index, 1);\n            }\n\n        } else if (componentRef !== undefined) {\n            delete this.componentRefs[modelId];\n        }\n    }\n\n    getCustomComponentType(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;\n    }\n}\n","import { Injectable, QueryList } from \"@angular/core\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutConfig,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport {\n    DynamicTemplateDirective,\n    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT\n} from \"../directive/dynamic-template.directive\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport type DynamicFormLayout = { [id: string]: DynamicFormControlLayout };\n\nexport type DynamicFormControlTemplates = QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormLayoutService {\n\n    findById(id: string, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        if (isObject(formLayout)) {\n\n            for (let key of Object.keys(formLayout)) {\n\n                if (key === id) {\n                    return formLayout[key];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    findByModel(model: DynamicFormControlModel, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        let controlLayout: DynamicFormControlLayout = null;\n\n        if (isObject(formLayout)) {\n\n            for (let key of Object.keys(formLayout)) {\n\n                key.split(\",\").forEach(substring => {\n\n                    const selector = substring.trim();\n\n                    if (selector === model.id || selector === model.type) {\n                        controlLayout = formLayout[key];\n                    }\n                });\n            }\n        }\n\n        return controlLayout;\n    }\n\n    filterTemplatesByModel(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] {\n\n        const filterCallback: (template: DynamicTemplateDirective) => boolean = (template: DynamicTemplateDirective) => {\n            return template.modelId === model.id || template.modelType === model.type;\n        };\n\n        if (templates instanceof QueryList) {\n            return templates.filter(filterCallback);\n\n        } else if (Array.isArray(templates)) {\n            return templates.filter(filterCallback);\n        }\n\n        return [];\n    }\n\n    getAlignedTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates, alignment: DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT): DynamicTemplateDirective | undefined {\n\n        return this.filterTemplatesByModel(model, templates)\n            .find(template => template.as === null && template.align === alignment);\n    }\n\n    /*\n    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {\n        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);\n    }\n    */\n    getStartTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);\n    }\n\n    getEndTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);\n    }\n\n    getClass(layout: DynamicFormControlLayout | null, context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n\n        if (layout !== null && layout.hasOwnProperty(context)) {\n\n            let config = layout[context] as DynamicFormControlLayoutConfig;\n\n            if (config.hasOwnProperty(place)) {\n                return config[place] as string;\n            }\n        }\n\n        return \"\";\n    }\n\n    getElementId(model: DynamicFormControlModel): string {\n\n        let id = model.id, parent = model.parent;\n\n        while (parent !== null) {\n\n            if (parent instanceof DynamicFormArrayGroupModel) {\n\n                id = `${parent.context.id}-${parent.index}-${model.id}`;\n                break;\n            }\n\n            parent = parent.parent;\n        }\n\n        return id;\n    }\n}\n","import { InjectionToken, Injector, ValueProvider } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport const MATCH_DISABLED = \"DISABLED\";\nexport const MATCH_ENABLED = \"ENABLED\";\nexport const MATCH_HIDDEN = \"HIDDEN\";\nexport const MATCH_OPTIONAL = \"OPTIONAL\";\nexport const MATCH_REQUIRED = \"REQUIRED\";\nexport const MATCH_VISIBLE = \"VISIBLE\";\n\nexport const AND_OPERATOR = \"AND\";\nexport const OR_OPERATOR = \"OR\";\n\nexport interface DynamicFormControlMatcher {\n\n    match: string;\n    opposingMatch: string | null;\n\n    onChange(hasMatch: boolean, model: DynamicFormControlModel, control: FormControl, injector: Injector): void;\n}\n\nexport const DYNAMIC_MATCHERS = new InjectionToken<DynamicFormControlMatcher>(\"DYNAMIC_MATCHERS\");\n\nexport const DisabledMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_DISABLED,\n    opposingMatch: MATCH_ENABLED,\n    onChange(hasMatch, model) {\n        model.disabled = hasMatch;\n    }\n};\n\nexport const HiddenMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_HIDDEN,\n    opposingMatch: MATCH_VISIBLE,\n    onChange(hasMatch, model) {\n        model.hidden = hasMatch;\n    }\n};\n\nexport const RequiredMatcher: DynamicFormControlMatcher = {\n\n    match: MATCH_REQUIRED,\n    opposingMatch: MATCH_OPTIONAL,\n    onChange(hasMatch, model, control, injector) {\n\n        let validatorsConfig = null;\n\n        if (hasMatch) {\n\n            validatorsConfig = isObject(model.validators) ? {...model.validators, required: null} : {required: null};\n\n        } else {\n\n            if (isObject(model.validators)) {\n\n                delete model.validators[\"required\"];\n                validatorsConfig = {...model.validators};\n            }\n        }\n\n        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);\n    }\n};\n\nexport const DISABLED_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: DisabledMatcher,\n    multi: true\n};\n\nexport const HIDDEN_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: HiddenMatcher,\n    multi: true\n};\n\nexport const REQUIRED_MATCHER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: RequiredMatcher,\n    multi: true\n};\n\nexport const DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER, HIDDEN_MATCHER, REQUIRED_MATCHER];\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    AND_OPERATOR,\n    DYNAMIC_MATCHERS,\n    DynamicFormControlMatcher,\n    OR_OPERATOR\n} from \"./dynamic-form-relation.matchers\";\nimport { DynamicFormControlRelation, } from \"../model/misc/dynamic-form-control-relation.model\";\nimport { startWith } from \"rxjs/operators\";\nimport { merge, Subscription } from \"rxjs\";\n\nexport type DynamicRelatedFormControls = { [key: string]: FormControl };\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormRelationService {\n\n    constructor(@Optional() @Inject(DYNAMIC_MATCHERS) private DYNAMIC_MATCHERS: DynamicFormControlMatcher[],\n                private injector: Injector) {}\n\n    getRelatedFormControls(model: DynamicFormControlModel, group: FormGroup): DynamicRelatedFormControls {\n\n        const conditionReducer = (controls, condition) => {\n\n            const path = condition.rootPath || condition.id;\n\n            if (!controls.hasOwnProperty(path)) {\n\n                const control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);\n\n                control instanceof FormControl ? controls[path] = control : console.warn(`No related form control with id ${condition.id} could be found`);\n            }\n\n            return controls;\n        };\n\n        const relationReducer = (controls, relation) => relation.when.reduce(conditionReducer, controls);\n\n        return model.relations.reduce(relationReducer, {});\n    }\n\n    findRelationByMatcher(relations: DynamicFormControlRelation[], matcher: DynamicFormControlMatcher): DynamicFormControlRelation | undefined {\n        return relations.find(relation => [matcher.match, matcher.opposingMatch].includes(relation.match));\n    }\n\n    matchesCondition(relation: DynamicFormControlRelation, relatedFormControls: DynamicRelatedFormControls, matcher: DynamicFormControlMatcher): boolean {\n\n        const operator = relation.operator || OR_OPERATOR;\n\n        return relation.when.reduce((hasAlreadyMatched, condition, index) => {\n\n            const path = condition.rootPath || condition.id;\n\n            let relatedFormControl;\n\n            for (let [key, control] of Object.entries(relatedFormControls)) {\n                if (key === path) {\n                    relatedFormControl = control;\n                    break;\n                }\n            }\n\n            if (relatedFormControl && relation.match === matcher.match) {\n\n                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;\n            }\n\n            if (relatedFormControl && relation.match === matcher.opposingMatch) {\n\n                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);\n            }\n\n            return false;\n\n        }, false);\n    }\n\n    subscribeRelations(model: DynamicFormControlModel, group: FormGroup, control: FormControl): Subscription[] {\n\n        const relatedFormControls = this.getRelatedFormControls(model, group), subscriptions: Subscription[] = [];\n\n        Object.values(relatedFormControls).forEach(relatedControl => {\n\n            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));\n            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));\n\n            subscriptions.push(merge(valueChanges, statusChanges).subscribe(() => {\n\n                this.DYNAMIC_MATCHERS.forEach(matcher => {\n\n                    const relation = this.findRelationByMatcher(model.relations, matcher);\n\n                    if (relation !== undefined) {\n\n                        const hasMatch = this.matchesCondition(relation, relatedFormControls, matcher);\n                        matcher.onChange(hasMatch, model, control, this.injector);\n                    }\n                });\n            }));\n        });\n\n        return subscriptions;\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { DynamicIdDirective } from \"./directive/dynamic-id.directive\";\nimport { DynamicListDirective } from \"./directive/dynamic-list.directive\";\nimport { DynamicTemplateDirective } from \"./directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"./service/dynamic-form.service\";\nimport { DynamicFormLayoutService } from \"./service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"./service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"./service/dynamic-form-component.service\";\nimport { DynamicFormRelationService } from \"./service/dynamic-form-relation.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        DynamicIdDirective,\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ],\n    exports: [\n        DynamicIdDirective,\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ]\n})\nexport class DynamicFormsCoreModule {\n\n    /*@deprecated*/\n    static forRoot(): ModuleWithProviders {\n\n        return {\n            ngModule: DynamicFormsCoreModule,\n            providers: [\n                DynamicFormService,\n                DynamicFormLayoutService,\n                DynamicFormValidationService,\n                DynamicFormComponentService,\n                DynamicFormRelationService\n            ]\n        };\n    }\n}\n"]}
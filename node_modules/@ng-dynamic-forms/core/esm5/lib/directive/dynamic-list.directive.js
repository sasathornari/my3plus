/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2 } from "@angular/core";
import { isString } from "../utils/core.utils";
var DynamicListDirective = /** @class */ (function () {
    function DynamicListDirective(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    DynamicListDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isString(this.listId)) {
            this.renderer.setAttribute(this.elementRef.nativeElement, "list", (/** @type {?} */ (this.listId)));
        }
    };
    DynamicListDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[dynamicList]"
                },] }
    ];
    /** @nocollapse */
    DynamicListDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynamicListDirective.propDecorators = {
        listId: [{ type: Input, args: ["dynamicList",] }]
    };
    return DynamicListDirective;
}());
export { DynamicListDirective };
if (false) {
    /** @type {?} */
    DynamicListDirective.prototype.listId;
    /**
     * @type {?}
     * @private
     */
    DynamicListDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DynamicListDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1saXN0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlL2R5bmFtaWMtbGlzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvQztJQU9JLDhCQUFvQixVQUFzQixFQUFVLFFBQW1CO1FBQW5ELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO0lBQUcsQ0FBQzs7OztJQUUzRSw4Q0FBZTs7O0lBQWY7UUFFSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLG1CQUFBLElBQUksQ0FBQyxNQUFNLEVBQVUsQ0FBQyxDQUFDO1NBQzVGO0lBQ0wsQ0FBQzs7Z0JBZEosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO2lCQUM1Qjs7OztnQkFMbUIsVUFBVTtnQkFBUyxTQUFTOzs7eUJBUTNDLEtBQUssU0FBQyxhQUFhOztJQVV4QiwyQkFBQztDQUFBLEFBZkQsSUFlQztTQVpZLG9CQUFvQjs7O0lBRTdCLHNDQUE0Qzs7Ozs7SUFFaEMsMENBQThCOzs7OztJQUFFLHdDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiBcIltkeW5hbWljTGlzdF1cIlxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljTGlzdERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gICAgQElucHV0KFwiZHluYW1pY0xpc3RcIikgbGlzdElkOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHRoaXMubGlzdElkKSkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIFwibGlzdFwiLCB0aGlzLmxpc3RJZCBhcyBzdHJpbmcpO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==
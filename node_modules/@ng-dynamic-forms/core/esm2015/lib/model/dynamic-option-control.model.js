/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isObservable, of } from "rxjs";
import { map } from "rxjs/operators";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable, serialize } from "../decorator/serializable.decorator";
import { isBoolean } from "../utils/core.utils";
/**
 * @record
 * @template T
 */
export function DynamicFormOptionConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicFormOptionConfig.prototype.disabled;
    /** @type {?|undefined} */
    DynamicFormOptionConfig.prototype.label;
    /** @type {?} */
    DynamicFormOptionConfig.prototype.value;
}
/**
 * @template T
 */
export class DynamicFormOption {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.label = config.label || null;
        this.value = config.value;
    }
    /**
     * @return {?}
     */
    get text() {
        return this.label;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    set text(text) {
        this.label = text;
    }
    /**
     * @return {?}
     */
    toJSON() {
        return serialize(this);
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicFormOption.prototype, "disabled", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicFormOption.prototype, "label", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicFormOption.prototype, "value", void 0);
if (false) {
    /** @type {?} */
    DynamicFormOption.prototype.disabled;
    /** @type {?} */
    DynamicFormOption.prototype.label;
    /** @type {?} */
    DynamicFormOption.prototype.value;
}
/**
 * @record
 * @template T
 */
export function DynamicOptionControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicOptionControlModelConfig.prototype.options;
}
/**
 * @abstract
 * @template T
 */
export class DynamicOptionControlModel extends DynamicFormValueControlModel {
    /**
     * @protected
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this._options = [];
        this.options = config.options;
    }
    /**
     * @private
     * @return {?}
     */
    updateOptions$() {
        this.options$ = of(this.options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        if (Array.isArray(options)) {
            this._options = ((/** @type {?} */ (options))).map((/**
             * @param {?} optionConfig
             * @return {?}
             */
            optionConfig => {
                return new DynamicFormOption(optionConfig);
            }));
            this.updateOptions$();
        }
        else if (isObservable(options)) {
            this.options$ = ((/** @type {?} */ (options))).pipe(map((/**
             * @param {?} optionsConfig
             * @return {?}
             */
            optionsConfig => {
                /** @type {?} */
                let options = optionsConfig.map((/**
                 * @param {?} optionConfig
                 * @return {?}
                 */
                optionConfig => new DynamicFormOption(optionConfig)));
                this._options = options;
                return options;
            })));
        }
        else {
            this.updateOptions$();
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @param {?} optionConfig
     * @return {?}
     */
    add(optionConfig) {
        return this.insert(this.options.length, optionConfig);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    get(index) {
        return this.options[index];
    }
    /**
     * @param {?} index
     * @param {?} optionConfig
     * @return {?}
     */
    insert(index, optionConfig) {
        /** @type {?} */
        let option = new DynamicFormOption(optionConfig);
        this.options.splice(index, 0, option);
        this.updateOptions$();
        return option;
    }
    /**
     * @param {...?} indices
     * @return {?}
     */
    remove(...indices) {
        indices.forEach((/**
         * @param {?} index
         * @return {?}
         */
        index => this.options.splice(index, 1)));
        this.updateOptions$();
    }
}
tslib_1.__decorate([
    serializable("options"),
    tslib_1.__metadata("design:type", Array)
], DynamicOptionControlModel.prototype, "_options", void 0);
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicOptionControlModel.prototype._options;
    /** @type {?} */
    DynamicOptionControlModel.prototype.options$;
    /**
     * @abstract
     * @param {...?} indices
     * @return {?}
     */
    DynamicOptionControlModel.prototype.select = function (indices) { };
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicInputControlModel } from "../dynamic-input-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { maskToString } from "../../utils/json.utils";
import { isBoolean, isNumber } from "../../utils/core.utils";
import { isObservable, of } from "rxjs";
import { tap } from "rxjs/operators";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
/**
 * @record
 */
export function DynamicInputModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.accept;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.inputType;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.list;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.mask;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.max;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.min;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.multiple;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.pattern;
    /** @type {?|undefined} */
    DynamicInputModelConfig.prototype.step;
}
export class DynamicInputModel extends DynamicInputControlModel {
    /**
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.files = null;
        this.list$ = null;
        this._list = null;
        this._listId = null;
        this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
        this.accept = config.accept || null;
        this.inputType = config.inputType || DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
        this.mask = config.mask || null;
        this.max = config.max !== undefined ? config.max : null;
        this.min = config.min !== undefined ? config.min : null;
        this.multiple = isBoolean(config.multiple) ? config.multiple : null;
        this.pattern = config.pattern || null;
        this.step = isNumber(config.step) ? config.step : null;
        if (config.list !== undefined) {
            this.list = config.list;
            this._listId = `${this.id}List`;
        }
    }
    /**
     * @return {?}
     */
    get listId() {
        return this._listId;
    }
    /**
     * @return {?}
     */
    get hasList() {
        return isObservable(this.list$);
    }
    /**
     * @param {?} list
     * @return {?}
     */
    set list(list) {
        if (Array.isArray(list)) {
            this._list = list;
            this.list$ = of(this._list);
        }
        else if (isObservable(list)) {
            this.list$ = ((/** @type {?} */ (list))).pipe(tap((/**
             * @param {?} list
             * @return {?}
             */
            list => this._list = list)));
        }
        else {
            this._list = null;
            this.list$ = null;
        }
    }
    /**
     * @return {?}
     */
    toJSON() {
        /** @type {?} */
        let json = super.toJSON();
        if (this.mask !== null) {
            if (this.mask instanceof Function) {
                json.mask = this.mask;
            }
            else {
                json.mask = maskToString(this.mask);
            }
        }
        return json;
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicInputModel.prototype, "accept", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicInputModel.prototype, "inputType", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicInputModel.prototype, "mask", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicInputModel.prototype, "max", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicInputModel.prototype, "min", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Boolean)
], DynamicInputModel.prototype, "multiple", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicInputModel.prototype, "pattern", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Number)
], DynamicInputModel.prototype, "step", void 0);
tslib_1.__decorate([
    serializable("list"),
    tslib_1.__metadata("design:type", Array)
], DynamicInputModel.prototype, "_list", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicInputModel.prototype, "type", void 0);
if (false) {
    /** @type {?} */
    DynamicInputModel.prototype.accept;
    /** @type {?} */
    DynamicInputModel.prototype.inputType;
    /** @type {?} */
    DynamicInputModel.prototype.files;
    /** @type {?} */
    DynamicInputModel.prototype.list$;
    /** @type {?} */
    DynamicInputModel.prototype.mask;
    /** @type {?} */
    DynamicInputModel.prototype.max;
    /** @type {?} */
    DynamicInputModel.prototype.min;
    /** @type {?} */
    DynamicInputModel.prototype.multiple;
    /** @type {?} */
    DynamicInputModel.prototype.pattern;
    /** @type {?} */
    DynamicInputModel.prototype.step;
    /**
     * @type {?}
     * @private
     */
    DynamicInputModel.prototype._list;
    /**
     * @type {?}
     * @private
     */
    DynamicInputModel.prototype._listId;
    /** @type {?} */
    DynamicInputModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable } from "../decorator/serializable.decorator";
import { AUTOCOMPLETE_ON } from "../utils/autofill.utils";
import { isBoolean, isNumber } from "../utils/core.utils";
/**
 * @record
 * @template T
 */
export function DynamicInputControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.autoComplete;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.autoFocus;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.maxLength;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.minLength;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.placeholder;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.prefix;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.readOnly;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.spellCheck;
    /** @type {?|undefined} */
    DynamicInputControlModelConfig.prototype.suffix;
}
/**
 * @abstract
 * @template T
 */
var DynamicInputControlModel = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicInputControlModel, _super);
    function DynamicInputControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.autoComplete = config.autoComplete || AUTOCOMPLETE_ON;
        _this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;
        _this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;
        _this.minLength = isNumber(config.minLength) ? config.minLength : null;
        _this.placeholder = config.placeholder || "";
        _this.prefix = config.prefix || null;
        _this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;
        _this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;
        _this.suffix = config.suffix || null;
        return _this;
    }
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "autoComplete", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicInputControlModel.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Number)
    ], DynamicInputControlModel.prototype, "maxLength", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Number)
    ], DynamicInputControlModel.prototype, "minLength", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "prefix", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicInputControlModel.prototype, "readOnly", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", Boolean)
    ], DynamicInputControlModel.prototype, "spellCheck", void 0);
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicInputControlModel.prototype, "suffix", void 0);
    return DynamicInputControlModel;
}(DynamicFormValueControlModel));
export { DynamicInputControlModel };
if (false) {
    /** @type {?} */
    DynamicInputControlModel.prototype.autoComplete;
    /** @type {?} */
    DynamicInputControlModel.prototype.autoFocus;
    /** @type {?} */
    DynamicInputControlModel.prototype.maxLength;
    /** @type {?} */
    DynamicInputControlModel.prototype.minLength;
    /** @type {?} */
    DynamicInputControlModel.prototype.placeholder;
    /** @type {?} */
    DynamicInputControlModel.prototype.prefix;
    /** @type {?} */
    DynamicInputControlModel.prototype.readOnly;
    /** @type {?} */
    DynamicInputControlModel.prototype.spellCheck;
    /** @type {?} */
    DynamicInputControlModel.prototype.suffix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pbnB1dC1jb250cm9sLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9keW5hbWljLWlucHV0LWNvbnRyb2wubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQXNDLE1BQU0sb0NBQW9DLENBQUM7QUFFdEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7OztBQUUxRCxvREFXQzs7O0lBVEcsc0RBQXNCOztJQUN0QixtREFBb0I7O0lBQ3BCLG1EQUFtQjs7SUFDbkIsbURBQW1COztJQUNuQixxREFBcUI7O0lBQ3JCLGdEQUFnQjs7SUFDaEIsa0RBQW1COztJQUNuQixvREFBcUI7O0lBQ3JCLGdEQUFnQjs7Ozs7O0FBR3BCO0lBQTBELG9EQUErQjtJQVlyRixrQ0FBc0IsTUFBeUMsRUFBRSxNQUFpQztRQUFsRyxZQUVJLGtCQUFNLE1BQU0sRUFBRSxNQUFNLENBQUMsU0FXeEI7UUFURyxLQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLElBQUksZUFBZSxDQUFDO1FBQzNELEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3hFLEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RFLEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RFLEtBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDNUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztRQUNwQyxLQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNyRSxLQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMzRSxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDOztJQUN4QyxDQUFDO0lBdkJlO1FBQWYsWUFBWSxFQUFFOztrRUFBc0I7SUFDckI7UUFBZixZQUFZLEVBQUU7OytEQUFvQjtJQUNuQjtRQUFmLFlBQVksRUFBRTs7K0RBQTBCO0lBQ3pCO1FBQWYsWUFBWSxFQUFFOzsrREFBMEI7SUFDekI7UUFBZixZQUFZLEVBQUU7O2lFQUFxQjtJQUNwQjtRQUFmLFlBQVksRUFBRTs7NERBQXVCO0lBQ3RCO1FBQWYsWUFBWSxFQUFFOzs4REFBbUI7SUFDbEI7UUFBZixZQUFZLEVBQUU7O2dFQUFxQjtJQUNwQjtRQUFmLFlBQVksRUFBRTs7NERBQXVCO0lBZ0IxQywrQkFBQztDQUFBLEFBMUJELENBQTBELDRCQUE0QixHQTBCckY7U0ExQnFCLHdCQUF3Qjs7O0lBRTFDLGdEQUFxQzs7SUFDckMsNkNBQW1DOztJQUNuQyw2Q0FBeUM7O0lBQ3pDLDZDQUF5Qzs7SUFDekMsK0NBQW9DOztJQUNwQywwQ0FBc0M7O0lBQ3RDLDRDQUFrQzs7SUFDbEMsOENBQW9DOztJQUNwQywwQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsLCBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsQ29uZmlnIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLXZhbHVlLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUgfSBmcm9tIFwiLi4vZGVjb3JhdG9yL3NlcmlhbGl6YWJsZS5kZWNvcmF0b3JcIjtcbmltcG9ydCB7IEFVVE9DT01QTEVURV9PTiB9IGZyb20gXCIuLi91dGlscy9hdXRvZmlsbC51dGlsc1wiO1xuaW1wb3J0IHsgaXNCb29sZWFuLCBpc051bWJlciB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY0lucHV0Q29udHJvbE1vZGVsQ29uZmlnPFQ+IGV4dGVuZHMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbENvbmZpZzxUPiB7XG5cbiAgICBhdXRvQ29tcGxldGU/OiBzdHJpbmc7XG4gICAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcbiAgICBtYXhMZW5ndGg/OiBudW1iZXI7XG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIHByZWZpeD86IHN0cmluZztcbiAgICByZWFkT25seT86IGJvb2xlYW47XG4gICAgc3BlbGxDaGVjaz86IGJvb2xlYW47XG4gICAgc3VmZml4Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY0lucHV0Q29udHJvbE1vZGVsPFQ+IGV4dGVuZHMgRHluYW1pY0Zvcm1WYWx1ZUNvbnRyb2xNb2RlbDxUPiB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgYXV0b0NvbXBsZXRlOiBzdHJpbmc7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICBAc2VyaWFsaXphYmxlKCkgbWF4TGVuZ3RoOiBudW1iZXIgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBtaW5MZW5ndGg6IG51bWJlciB8IG51bGw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgQHNlcmlhbGl6YWJsZSgpIHByZWZpeDogc3RyaW5nIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgcmVhZE9ubHk6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHNwZWxsQ2hlY2s6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIHN1ZmZpeDogc3RyaW5nIHwgbnVsbDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNJbnB1dENvbnRyb2xNb2RlbENvbmZpZzxUPiwgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIHRoaXMuYXV0b0NvbXBsZXRlID0gY29uZmlnLmF1dG9Db21wbGV0ZSB8fCBBVVRPQ09NUExFVEVfT047XG4gICAgICAgIHRoaXMuYXV0b0ZvY3VzID0gaXNCb29sZWFuKGNvbmZpZy5hdXRvRm9jdXMpID8gY29uZmlnLmF1dG9Gb2N1cyA6IGZhbHNlO1xuICAgICAgICB0aGlzLm1heExlbmd0aCA9IGlzTnVtYmVyKGNvbmZpZy5tYXhMZW5ndGgpID8gY29uZmlnLm1heExlbmd0aCA6IG51bGw7XG4gICAgICAgIHRoaXMubWluTGVuZ3RoID0gaXNOdW1iZXIoY29uZmlnLm1pbkxlbmd0aCkgPyBjb25maWcubWluTGVuZ3RoIDogbnVsbDtcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IGNvbmZpZy5wbGFjZWhvbGRlciB8fCBcIlwiO1xuICAgICAgICB0aGlzLnByZWZpeCA9IGNvbmZpZy5wcmVmaXggfHwgbnVsbDtcbiAgICAgICAgdGhpcy5yZWFkT25seSA9IGlzQm9vbGVhbihjb25maWcucmVhZE9ubHkpID8gY29uZmlnLnJlYWRPbmx5IDogZmFsc2U7XG4gICAgICAgIHRoaXMuc3BlbGxDaGVjayA9IGlzQm9vbGVhbihjb25maWcuc3BlbGxDaGVjaykgPyBjb25maWcuc3BlbGxDaGVjayA6IGZhbHNlO1xuICAgICAgICB0aGlzLnN1ZmZpeCA9IGNvbmZpZy5zdWZmaXggfHwgbnVsbDtcbiAgICB9XG59Il19
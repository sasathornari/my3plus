/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isString } from "./core.utils";
/**
 * @param {?} mask
 * @return {?}
 */
export function maskToString(mask) {
    if (isString(mask)) {
        return (/** @type {?} */ (mask));
    }
    else if (mask instanceof RegExp) {
        return mask.toString();
    }
    else if (Array.isArray(mask)) {
        return (/** @type {?} */ (mask.map((/**
         * @param {?} value
         * @return {?}
         */
        value => maskToString(value)))));
    }
    return null;
}
/**
 * @param {?} mask
 * @return {?}
 */
export function maskFromString(mask) {
    if (isString(mask)) {
        /** @type {?} */
        let isRegExp = ((/** @type {?} */ (mask))).startsWith("/") && ((/** @type {?} */ (mask))).endsWith("/");
        return isRegExp ? new RegExp(((/** @type {?} */ (mask))).slice(1, mask.length - 1)) : mask;
    }
    else if (Array.isArray(mask)) {
        return (/** @type {?} */ (((/** @type {?} */ (mask))).map((/**
         * @param {?} value
         * @return {?}
         */
        value => maskFromString(value)))));
    }
    return null;
}
/**
 * @param {?} _key
 * @param {?} value
 * @return {?}
 */
export function parseReviver(_key, value) {
    /** @type {?} */
    let regexDateISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|([+\-])([\d|:]*))?$/;
    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi51dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvanNvbi51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7Ozs7QUFFeEMsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUEyQztJQUVwRSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUVoQixPQUFPLG1CQUFBLElBQUksRUFBVSxDQUFDO0tBRXpCO1NBQU0sSUFBSSxJQUFJLFlBQVksTUFBTSxFQUFFO1FBRS9CLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBRTFCO1NBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBRTVCLE9BQU8sbUJBQUEsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFZLENBQUM7S0FDN0Q7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBdUI7SUFFbEQsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7O1lBRVosUUFBUSxHQUFHLENBQUMsbUJBQUEsSUFBSSxFQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFFakYsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsbUJBQUEsSUFBSSxFQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBRW5GO1NBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBRTVCLE9BQU8sbUJBQUEsQ0FBQyxtQkFBQSxJQUFJLEVBQVksQ0FBQyxDQUFDLEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFZLENBQUM7S0FDN0U7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVksRUFBRSxLQUFVOztRQUU3QyxZQUFZLEdBQUcsbUZBQW1GO0lBRXRHLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDakYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSBcIi4vY29yZS51dGlsc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFza1RvU3RyaW5nKG1hc2s6IHN0cmluZyB8IFJlZ0V4cCB8IChzdHJpbmcgfCBSZWdFeHApW10pOiBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bGwge1xuXG4gICAgaWYgKGlzU3RyaW5nKG1hc2spKSB7XG5cbiAgICAgICAgcmV0dXJuIG1hc2sgYXMgc3RyaW5nO1xuXG4gICAgfSBlbHNlIGlmIChtYXNrIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cbiAgICAgICAgcmV0dXJuIG1hc2sudG9TdHJpbmcoKTtcblxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtYXNrKSkge1xuXG4gICAgICAgIHJldHVybiBtYXNrLm1hcCh2YWx1ZSA9PiBtYXNrVG9TdHJpbmcodmFsdWUpKSBhcyBzdHJpbmdbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hc2tGcm9tU3RyaW5nKG1hc2s6IHN0cmluZyB8IHN0cmluZ1tdKTogc3RyaW5nIHwgUmVnRXhwIHwgKHN0cmluZyB8IFJlZ0V4cClbXSB8IG51bGwge1xuXG4gICAgaWYgKGlzU3RyaW5nKG1hc2spKSB7XG5cbiAgICAgICAgbGV0IGlzUmVnRXhwID0gKG1hc2sgYXMgc3RyaW5nKS5zdGFydHNXaXRoKFwiL1wiKSAmJiAobWFzayBhcyBzdHJpbmcpLmVuZHNXaXRoKFwiL1wiKTtcblxuICAgICAgICByZXR1cm4gaXNSZWdFeHAgPyBuZXcgUmVnRXhwKChtYXNrIGFzIHN0cmluZykuc2xpY2UoMSwgbWFzay5sZW5ndGggLSAxKSkgOiBtYXNrO1xuXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1hc2spKSB7XG5cbiAgICAgICAgcmV0dXJuIChtYXNrIGFzIHN0cmluZ1tdKS5tYXAodmFsdWUgPT4gbWFza0Zyb21TdHJpbmcodmFsdWUpKSBhcyBzdHJpbmdbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmV2aXZlcihfa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuXG4gICAgbGV0IHJlZ2V4RGF0ZUlTTyA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlUKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSg/OlxcLlxcZCopKSg/Olp8KFsrXFwtXSkoW1xcZHw6XSopKT8kLztcblxuICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgJiYgcmVnZXhEYXRlSVNPLnRlc3QodmFsdWUpID8gbmV3IERhdGUodmFsdWUpIDogdmFsdWU7XG59XG4iXX0=
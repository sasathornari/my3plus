/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable } from "../decorator/serializable.decorator";
import { isBoolean } from "../utils/core.utils";
/**
 * @record
 */
export function DynamicCheckControlModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicCheckControlModelConfig.prototype.labelPosition;
}
/**
 * @abstract
 */
var DynamicCheckControlModel = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicCheckControlModel, _super);
    function DynamicCheckControlModel(config, layout) {
        var _this = _super.call(this, config, layout) || this;
        _this.labelPosition = config.labelPosition || null;
        _this.checked = isBoolean(_this.value) ? _this.value : false;
        return _this;
    }
    Object.defineProperty(DynamicCheckControlModel.prototype, "checked", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value;
        },
        set: /**
         * @param {?} checked
         * @return {?}
         */
        function (checked) {
            this.value = checked;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicCheckControlModel.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.checked = !this.checked;
    };
    tslib_1.__decorate([
        serializable(),
        tslib_1.__metadata("design:type", String)
    ], DynamicCheckControlModel.prototype, "labelPosition", void 0);
    return DynamicCheckControlModel;
}(DynamicFormValueControlModel));
export { DynamicCheckControlModel };
if (false) {
    /** @type {?} */
    DynamicCheckControlModel.prototype.labelPosition;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jaGVjay1jb250cm9sLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9keW5hbWljLWNoZWNrLWNvbnRyb2wubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQXNDLE1BQU0sb0NBQW9DLENBQUM7QUFFdEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUVoRCxvREFHQzs7O0lBREcsdURBQXVCOzs7OztBQUczQjtJQUF1RCxvREFBcUM7SUFJeEYsa0NBQXNCLE1BQXNDLEVBQUUsTUFBaUM7UUFBL0YsWUFFSSxrQkFBTSxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBSXhCO1FBRkcsS0FBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQztRQUNsRCxLQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7SUFDOUQsQ0FBQztJQUVELHNCQUFJLDZDQUFPOzs7O1FBQVg7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFFRCxVQUFZLE9BQWdCO1lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLENBQUM7OztPQUpBOzs7O0lBTUQseUNBQU07OztJQUFOO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDakMsQ0FBQztJQXBCZTtRQUFmLFlBQVksRUFBRTs7bUVBQThCO0lBcUJqRCwrQkFBQztDQUFBLEFBdkJELENBQXVELDRCQUE0QixHQXVCbEY7U0F2QnFCLHdCQUF3Qjs7O0lBRTFDLGlEQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWwsIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWxDb25maWcgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tdmFsdWUtY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0IH0gZnJvbSBcIi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1sYXlvdXQubW9kZWxcIjtcbmltcG9ydCB7IHNlcmlhbGl6YWJsZSB9IGZyb20gXCIuLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNCb29sZWFuIH0gZnJvbSBcIi4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljQ2hlY2tDb250cm9sTW9kZWxDb25maWcgZXh0ZW5kcyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsQ29uZmlnPGJvb2xlYW4+IHtcblxuICAgIGxhYmVsUG9zaXRpb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEeW5hbWljQ2hlY2tDb250cm9sTW9kZWwgZXh0ZW5kcyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsPGJvb2xlYW4+IHtcblxuICAgIEBzZXJpYWxpemFibGUoKSBsYWJlbFBvc2l0aW9uOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0NoZWNrQ29udHJvbE1vZGVsQ29uZmlnLCBsYXlvdXQ/OiBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQpIHtcblxuICAgICAgICBzdXBlcihjb25maWcsIGxheW91dCk7XG5cbiAgICAgICAgdGhpcy5sYWJlbFBvc2l0aW9uID0gY29uZmlnLmxhYmVsUG9zaXRpb24gfHwgbnVsbDtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gaXNCb29sZWFuKHRoaXMudmFsdWUpID8gdGhpcy52YWx1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGdldCBjaGVja2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgY2hlY2tlZChjaGVja2VkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBjaGVja2VkO1xuICAgIH1cblxuICAgIHRvZ2dsZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional } from "@angular/core";
import { isFunction, isNumber } from "../utils/core.utils";
import * as i0 from "@angular/core";
/** @type {?} */
export var DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken("DYNAMIC_FORM_CONTROL_MAP_FN");
var DynamicFormComponentService = /** @class */ (function () {
    function DynamicFormComponentService(DYNAMIC_FORM_CONTROL_MAP_FN) {
        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN;
        this.componentRefs = {};
        this.DYNAMIC_FORM_CONTROL_MAP_FN = (/** @type {?} */ (DYNAMIC_FORM_CONTROL_MAP_FN));
    }
    /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    DynamicFormComponentService.prototype.getFormControlRef = /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    function (modelId, index) {
        /** @type {?} */
        var ref = this.componentRefs[modelId];
        if (isNumber(index)) {
            return Array.isArray(ref) ? ref[index] : undefined;
        }
        else {
            return (/** @type {?} */ (ref));
        }
    };
    /**
     * @param {?} model
     * @param {?} instance
     * @param {?=} index
     * @return {?}
     */
    DynamicFormComponentService.prototype.registerFormControlRef = /**
     * @param {?} model
     * @param {?} instance
     * @param {?=} index
     * @return {?}
     */
    function (model, instance, index) {
        if (isNumber(index)) {
            /** @type {?} */
            var arrayRef = (/** @type {?} */ (this.componentRefs[model.id])) || [];
            if (Array.isArray(arrayRef)) {
                arrayRef.splice(index, 0, instance);
                this.componentRefs[model.id] = arrayRef;
            }
            else {
                console.warn("registerFormControlRef is called with index for a non-array form control: " + model.id);
            }
        }
        else {
            this.componentRefs[model.id] = instance;
        }
    };
    /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    DynamicFormComponentService.prototype.unregisterFormControlRef = /**
     * @param {?} modelId
     * @param {?=} index
     * @return {?}
     */
    function (modelId, index) {
        /** @type {?} */
        var componentRef = this.componentRefs[modelId];
        if (isNumber(index)) {
            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {
                componentRef.splice(index, 1);
            }
        }
        else if (componentRef !== undefined) {
            delete this.componentRefs[modelId];
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DynamicFormComponentService.prototype.getCustomComponentType = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;
    };
    DynamicFormComponentService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormComponentService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DYNAMIC_FORM_CONTROL_MAP_FN,] }, { type: Optional }] }
    ]; };
    /** @nocollapse */ DynamicFormComponentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormComponentService_Factory() { return new DynamicFormComponentService(i0.ɵɵinject(DYNAMIC_FORM_CONTROL_MAP_FN, 8)); }, token: DynamicFormComponentService, providedIn: "root" });
    return DynamicFormComponentService;
}());
export { DynamicFormComponentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponentService.prototype.componentRefs;
    /**
     * @type {?}
     * @private
     */
    DynamicFormComponentService.prototype.DYNAMIC_FORM_CONTROL_MAP_FN;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbXBvbmVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1jb21wb25lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFHakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBTTNELE1BQU0sS0FBTywyQkFBMkIsR0FBRyxJQUFJLGNBQWMsQ0FBMEIsNkJBQTZCLENBQUM7QUFFckg7SUFPSSxxQ0FBOEUsMkJBQWdDO1FBQWhDLGdDQUEyQixHQUEzQiwyQkFBMkIsQ0FBSztRQUZ0RyxrQkFBYSxHQUF1RSxFQUFFLENBQUM7UUFHM0YsSUFBSSxDQUFDLDJCQUEyQixHQUFHLG1CQUFBLDJCQUEyQixFQUEyQixDQUFDO0lBQzlGLENBQUM7Ozs7OztJQUVELHVEQUFpQjs7Ozs7SUFBakIsVUFBa0IsT0FBZSxFQUFFLEtBQWM7O1lBRXZDLEdBQUcsR0FBb0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFFeEYsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFFakIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztTQUV0RDthQUFNO1lBQ0gsT0FBTyxtQkFBQSxHQUFHLEVBQXlCLENBQUM7U0FDdkM7SUFDTCxDQUFDOzs7Ozs7O0lBRUQsNERBQXNCOzs7Ozs7SUFBdEIsVUFBdUIsS0FBOEIsRUFBRSxRQUErQixFQUFFLEtBQWM7UUFFbEcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7O2dCQUVYLFFBQVEsR0FBNEIsbUJBQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQTJCLElBQUksRUFBRTtZQUV2RyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBRXpCLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO2FBRTNDO2lCQUFNO2dCQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsK0VBQTZFLEtBQUssQ0FBQyxFQUFJLENBQUMsQ0FBQzthQUN6RztTQUVKO2FBQU07WUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7U0FDM0M7SUFFTCxDQUFDOzs7Ozs7SUFFRCw4REFBd0I7Ozs7O0lBQXhCLFVBQXlCLE9BQWUsRUFBRSxLQUFjOztZQUU5QyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFFaEQsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFFakIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2xFLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2pDO1NBRUo7YUFBTSxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCw0REFBc0I7Ozs7SUFBdEIsVUFBdUIsS0FBOEI7UUFDakQsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3pHLENBQUM7O2dCQTlESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dEQUtnQixNQUFNLFNBQUMsMkJBQTJCLGNBQUcsUUFBUTs7O3NDQWxCOUQ7Q0EwRUMsQUEvREQsSUErREM7U0E1RFksMkJBQTJCOzs7Ozs7SUFFcEMsb0RBQStGOzs7OztJQUVuRixrRUFBa0ciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBUeXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbCB9IGZyb20gXCIuLi9jb21wb25lbnQvZHluYW1pYy1mb3JtLWNvbnRyb2wuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB9IGZyb20gXCIuLi9tb2RlbC9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNOdW1iZXIgfSBmcm9tIFwiLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgdHlwZSBEeW5hbWljRm9ybUNvbnRyb2xSZWYgPSBDb21wb25lbnRSZWY8RHluYW1pY0Zvcm1Db250cm9sPjtcblxuZXhwb3J0IHR5cGUgRHluYW1pY0Zvcm1Db250cm9sTWFwRm4gPSAobW9kZWw6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsKSA9PiBUeXBlPER5bmFtaWNGb3JtQ29udHJvbD4gfCBudWxsO1xuXG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfTUFQX0ZOID0gbmV3IEluamVjdGlvblRva2VuPER5bmFtaWNGb3JtQ29udHJvbE1hcEZuPihcIkRZTkFNSUNfRk9STV9DT05UUk9MX01BUF9GTlwiKTtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46IFwicm9vdFwiXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNGb3JtQ29tcG9uZW50U2VydmljZSB7XG5cbiAgICBwcml2YXRlIGNvbXBvbmVudFJlZnM6IHsgW2tleTogc3RyaW5nXTogRHluYW1pY0Zvcm1Db250cm9sUmVmIHwgRHluYW1pY0Zvcm1Db250cm9sUmVmW10gfSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChEWU5BTUlDX0ZPUk1fQ09OVFJPTF9NQVBfRk4pIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgRFlOQU1JQ19GT1JNX0NPTlRST0xfTUFQX0ZOOiBhbnkpIHtcbiAgICAgICAgdGhpcy5EWU5BTUlDX0ZPUk1fQ09OVFJPTF9NQVBfRk4gPSBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9NQVBfRk4gYXMgRHluYW1pY0Zvcm1Db250cm9sTWFwRm47XG4gICAgfVxuXG4gICAgZ2V0Rm9ybUNvbnRyb2xSZWYobW9kZWxJZDogc3RyaW5nLCBpbmRleD86IG51bWJlcik6IER5bmFtaWNGb3JtQ29udHJvbFJlZiB8IHVuZGVmaW5lZCB7XG5cbiAgICAgICAgY29uc3QgcmVmOiBEeW5hbWljRm9ybUNvbnRyb2xSZWYgfCBEeW5hbWljRm9ybUNvbnRyb2xSZWZbXSA9IHRoaXMuY29tcG9uZW50UmVmc1ttb2RlbElkXTtcblxuICAgICAgICBpZiAoaXNOdW1iZXIoaW5kZXgpKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlZikgPyByZWZbaW5kZXhdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVmIGFzIER5bmFtaWNGb3JtQ29udHJvbFJlZjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZ2lzdGVyRm9ybUNvbnRyb2xSZWYobW9kZWw6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsLCBpbnN0YW5jZTogRHluYW1pY0Zvcm1Db250cm9sUmVmLCBpbmRleD86IG51bWJlcik6IHZvaWQge1xuXG4gICAgICAgIGlmIChpc051bWJlcihpbmRleCkpIHtcblxuICAgICAgICAgICAgY29uc3QgYXJyYXlSZWY6IER5bmFtaWNGb3JtQ29udHJvbFJlZltdID0gdGhpcy5jb21wb25lbnRSZWZzW21vZGVsLmlkXSBhcyBEeW5hbWljRm9ybUNvbnRyb2xSZWZbXSB8fCBbXTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXlSZWYpKSB7XG5cbiAgICAgICAgICAgICAgICBhcnJheVJlZi5zcGxpY2UoaW5kZXgsIDAsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZnNbbW9kZWwuaWRdID0gYXJyYXlSZWY7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGByZWdpc3RlckZvcm1Db250cm9sUmVmIGlzIGNhbGxlZCB3aXRoIGluZGV4IGZvciBhIG5vbi1hcnJheSBmb3JtIGNvbnRyb2w6ICR7bW9kZWwuaWR9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmc1ttb2RlbC5pZF0gPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdW5yZWdpc3RlckZvcm1Db250cm9sUmVmKG1vZGVsSWQ6IHN0cmluZywgaW5kZXg/OiBudW1iZXIpOiB2b2lkIHtcblxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLmNvbXBvbmVudFJlZnNbbW9kZWxJZF07XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGluZGV4KSkge1xuXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb21wb25lbnRSZWYpICYmIGNvbXBvbmVudFJlZltpbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudFJlZi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50UmVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbXBvbmVudFJlZnNbbW9kZWxJZF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDdXN0b21Db21wb25lbnRUeXBlKG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IFR5cGU8RHluYW1pY0Zvcm1Db250cm9sPiB8IG51bGwge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbih0aGlzLkRZTkFNSUNfRk9STV9DT05UUk9MX01BUF9GTikgPyB0aGlzLkRZTkFNSUNfRk9STV9DT05UUk9MX01BUF9GTihtb2RlbCkgOiBudWxsO1xuICAgIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DynamicFormControlModel } from "../dynamic-form-control.model";
import { serializable, serialize } from "../../decorator/serializable.decorator";
import { isFunction, isNumber } from "../../utils/core.utils";
export class DynamicFormArrayGroupModel {
    /**
     * @param {?} context
     * @param {?=} group
     * @param {?=} index
     */
    constructor(context, group = [], index = -1) {
        this.$implicit = this;
        this.context = context;
        this.group = group;
        this.index = index;
    }
    /**
     * @return {?}
     */
    get parent() {
        return this.context;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    get(index) {
        return this.group[index];
    }
    /**
     * @return {?}
     */
    toJSON() {
        return serialize(this);
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Array)
], DynamicFormArrayGroupModel.prototype, "group", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Number)
], DynamicFormArrayGroupModel.prototype, "index", void 0);
if (false) {
    /** @type {?} */
    DynamicFormArrayGroupModel.prototype.$implicit;
    /** @type {?} */
    DynamicFormArrayGroupModel.prototype.context;
    /** @type {?} */
    DynamicFormArrayGroupModel.prototype.group;
    /** @type {?} */
    DynamicFormArrayGroupModel.prototype.index;
}
/** @type {?} */
export const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = "ARRAY";
/**
 * @record
 */
export function DynamicFormArrayModelConfig() { }
if (false) {
    /** @type {?|undefined} */
    DynamicFormArrayModelConfig.prototype.groupAsyncValidators;
    /** @type {?|undefined} */
    DynamicFormArrayModelConfig.prototype.groupFactory;
    /** @type {?|undefined} */
    DynamicFormArrayModelConfig.prototype.groupValidators;
    /** @type {?|undefined} */
    DynamicFormArrayModelConfig.prototype.groups;
    /** @type {?|undefined} */
    DynamicFormArrayModelConfig.prototype.initialCount;
}
export class DynamicFormArrayModel extends DynamicFormControlModel {
    /**
     * @param {?} config
     * @param {?=} layout
     */
    constructor(config, layout) {
        super(config, layout);
        this.groups = [];
        // only to recreate model from JSON
        this.type = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;
        if (isFunction(config.groupFactory)) {
            this.groupFactory = config.groupFactory;
        }
        else {
            throw new Error("group factory function must be specified for DynamicFormArrayModel");
        }
        this.groupAsyncValidators = config.groupAsyncValidators || null;
        this.groupPrototype = this.groupFactory();
        this.groupValidators = config.groupValidators || null;
        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;
        if (Array.isArray(config.groups)) {
            config.groups.forEach((/**
             * @param {?} arrayGroup
             * @param {?} index
             * @return {?}
             */
            (arrayGroup, index) => {
                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));
            }));
        }
        else {
            for (let index = 0; index < this.initialCount; index++) {
                this.addGroup();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateGroupIndex() {
        this.groups.forEach((/**
         * @param {?} group
         * @param {?} index
         * @return {?}
         */
        (group, index) => group.index = index));
    }
    /**
     * @return {?}
     */
    get size() {
        return this.groups.length;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    get(index) {
        return this.groups[index];
    }
    /**
     * @return {?}
     */
    addGroup() {
        return this.insertGroup(this.groups.length);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    insertGroup(index) {
        /** @type {?} */
        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());
        this.groups.splice(index, 0, group);
        this.updateGroupIndex();
        return group;
    }
    /**
     * @param {?} index
     * @param {?} step
     * @return {?}
     */
    moveGroup(index, step) {
        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));
        this.updateGroupIndex();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeGroup(index) {
        this.groups.splice(index, 1);
        this.updateGroupIndex();
    }
    /**
     * @return {?}
     */
    clear() {
        this.groups.splice(0);
        this.updateGroupIndex();
    }
}
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicFormArrayModel.prototype, "groupAsyncValidators", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Object)
], DynamicFormArrayModel.prototype, "groupValidators", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Array)
], DynamicFormArrayModel.prototype, "groups", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Number)
], DynamicFormArrayModel.prototype, "initialCount", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", Array)
], DynamicFormArrayModel.prototype, "groupPrototype", void 0);
tslib_1.__decorate([
    serializable(),
    tslib_1.__metadata("design:type", String)
], DynamicFormArrayModel.prototype, "type", void 0);
if (false) {
    /** @type {?} */
    DynamicFormArrayModel.prototype.groupAsyncValidators;
    /** @type {?} */
    DynamicFormArrayModel.prototype.groupFactory;
    /** @type {?} */
    DynamicFormArrayModel.prototype.groupValidators;
    /** @type {?} */
    DynamicFormArrayModel.prototype.groups;
    /** @type {?} */
    DynamicFormArrayModel.prototype.initialCount;
    /** @type {?} */
    DynamicFormArrayModel.prototype.groupPrototype;
    /** @type {?} */
    DynamicFormArrayModel.prototype.type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWFycmF5Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbC9mb3JtLWFycmF5L2R5bmFtaWMtZm9ybS1hcnJheS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBaUMsTUFBTSwrQkFBK0IsQ0FBQztBQUt2RyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7O0lBT25DLFlBQVksT0FBOEIsRUFBRSxRQUEwQixFQUFFLEVBQUUsUUFBZ0IsQ0FBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxHQUFHLENBQUMsS0FBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsTUFBTTtRQUNGLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQXRCbUI7SUFBZixZQUFZLEVBQUU7O3lEQUF5QjtBQUN4QjtJQUFmLFlBQVksRUFBRTs7eURBQWU7OztJQUg5QiwrQ0FBc0M7O0lBQ3RDLDZDQUErQjs7SUFDL0IsMkNBQXdDOztJQUN4QywyQ0FBOEI7OztBQXVCbEMs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QUcsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQWE7UUFFckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztDQUNKO0FBaEZtQjtJQUFmLFlBQVksRUFBRTs7bUVBQXNEO0FBRXJEO0lBQWYsWUFBWSxFQUFFOzs4REFBaUQ7QUFDaEQ7SUFBZixZQUFZLEVBQUU7O3FEQUEyQztBQUMxQztJQUFmLFlBQVksRUFBRTs7MkRBQXNCO0FBRXJCO0lBQWYsWUFBWSxFQUFFOzs2REFBMkM7QUFDMUM7SUFBZixZQUFZLEVBQUU7O21EQUF5RDs7O0lBUHhFLHFEQUFxRTs7SUFDckUsNkNBQXFDOztJQUNyQyxnREFBZ0U7O0lBQ2hFLHVDQUEwRDs7SUFDMUQsNkNBQXFDOztJQUVyQywrQ0FBMEQ7O0lBQzFELHFDQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsLCBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbENvbmZpZyB9IGZyb20gXCIuLi9keW5hbWljLWZvcm0tY29udHJvbC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Nb2RlbCB9IGZyb20gXCIuLi9keW5hbWljLWZvcm0ubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuLi9taXNjL2R5bmFtaWMtZm9ybS1jb250cm9sLWxheW91dC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY1BhdGhhYmxlIH0gZnJvbSBcIi4uL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtcGF0aC5tb2RlbFwiO1xuaW1wb3J0IHsgRHluYW1pY1ZhbGlkYXRvcnNDb25maWcgfSBmcm9tIFwiLi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC12YWxpZGF0aW9uLm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUsIHNlcmlhbGl6ZSB9IGZyb20gXCIuLi8uLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNOdW1iZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWwgaW1wbGVtZW50cyBEeW5hbWljUGF0aGFibGUge1xuXG4gICAgJGltcGxpY2l0OiBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbDtcbiAgICBjb250ZXh0OiBEeW5hbWljRm9ybUFycmF5TW9kZWw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGdyb3VwOiBEeW5hbWljRm9ybU1vZGVsO1xuICAgIEBzZXJpYWxpemFibGUoKSBpbmRleDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogRHluYW1pY0Zvcm1BcnJheU1vZGVsLCBncm91cDogRHluYW1pY0Zvcm1Nb2RlbCA9IFtdLCBpbmRleDogbnVtYmVyID0gLTEpIHtcblxuICAgICAgICB0aGlzLiRpbXBsaWNpdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIH1cblxuICAgIGdldCBwYXJlbnQoKTogRHluYW1pY0Zvcm1BcnJheU1vZGVsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgICB9XG5cbiAgICBnZXQoaW5kZXg6IG51bWJlcik6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBbaW5kZXhdO1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZSh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9UWVBFX0FSUkFZID0gXCJBUlJBWVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNGb3JtQXJyYXlNb2RlbENvbmZpZyBleHRlbmRzIER5bmFtaWNGb3JtQ29udHJvbE1vZGVsQ29uZmlnIHtcblxuICAgIGdyb3VwQXN5bmNWYWxpZGF0b3JzPzogRHluYW1pY1ZhbGlkYXRvcnNDb25maWc7XG4gICAgZ3JvdXBGYWN0b3J5PzogKCkgPT4gRHluYW1pY0Zvcm1Nb2RlbDtcbiAgICBncm91cFZhbGlkYXRvcnM/OiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZztcbiAgICBncm91cHM/OiBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbFtdIHwgbnVsbDtcbiAgICBpbml0aWFsQ291bnQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybUFycmF5TW9kZWwgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgZ3JvdXBBc3luY1ZhbGlkYXRvcnM6IER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnIHwgbnVsbDtcbiAgICBncm91cEZhY3Rvcnk6ICgpID0+IER5bmFtaWNGb3JtTW9kZWw7XG4gICAgQHNlcmlhbGl6YWJsZSgpIGdyb3VwVmFsaWRhdG9yczogRHluYW1pY1ZhbGlkYXRvcnNDb25maWcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBncm91cHM6IER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsW10gPSBbXTtcbiAgICBAc2VyaWFsaXphYmxlKCkgaW5pdGlhbENvdW50OiBudW1iZXI7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgcmVhZG9ubHkgZ3JvdXBQcm90b3R5cGU6IER5bmFtaWNGb3JtTW9kZWw7IC8vIG9ubHkgdG8gcmVjcmVhdGUgbW9kZWwgZnJvbSBKU09OXG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfQVJSQVk7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNGb3JtQXJyYXlNb2RlbENvbmZpZywgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbmZpZy5ncm91cEZhY3RvcnkpKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwRmFjdG9yeSA9IGNvbmZpZy5ncm91cEZhY3Rvcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJncm91cCBmYWN0b3J5IGZ1bmN0aW9uIG11c3QgYmUgc3BlY2lmaWVkIGZvciBEeW5hbWljRm9ybUFycmF5TW9kZWxcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdyb3VwQXN5bmNWYWxpZGF0b3JzID0gY29uZmlnLmdyb3VwQXN5bmNWYWxpZGF0b3JzIHx8IG51bGw7XG4gICAgICAgIHRoaXMuZ3JvdXBQcm90b3R5cGUgPSB0aGlzLmdyb3VwRmFjdG9yeSgpO1xuICAgICAgICB0aGlzLmdyb3VwVmFsaWRhdG9ycyA9IGNvbmZpZy5ncm91cFZhbGlkYXRvcnMgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5pbml0aWFsQ291bnQgPSBpc051bWJlcihjb25maWcuaW5pdGlhbENvdW50KSA/IGNvbmZpZy5pbml0aWFsQ291bnQgOiAxO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy5ncm91cHMpKSB7XG5cbiAgICAgICAgICAgIGNvbmZpZy5ncm91cHMuZm9yRWFjaCgoYXJyYXlHcm91cCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKG5ldyBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbCh0aGlzLCBhcnJheUdyb3VwLmdyb3VwLCBhcnJheUdyb3VwLmluZGV4IHx8IGluZGV4KSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbml0aWFsQ291bnQ7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEdyb3VwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUdyb3VwSW5kZXgoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goKGdyb3VwLCBpbmRleCkgPT4gZ3JvdXAuaW5kZXggPSBpbmRleCk7XG4gICAgfVxuXG4gICAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQoaW5kZXg6IG51bWJlcik6IER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBzW2luZGV4XTtcbiAgICB9XG5cbiAgICBhZGRHcm91cCgpOiBEeW5hbWljRm9ybUFycmF5R3JvdXBNb2RlbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydEdyb3VwKHRoaXMuZ3JvdXBzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgaW5zZXJ0R3JvdXAoaW5kZXg6IG51bWJlcik6IER5bmFtaWNGb3JtQXJyYXlHcm91cE1vZGVsIHtcblxuICAgICAgICBsZXQgZ3JvdXAgPSBuZXcgRHluYW1pY0Zvcm1BcnJheUdyb3VwTW9kZWwodGhpcywgdGhpcy5ncm91cEZhY3RvcnkoKSk7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuc3BsaWNlKGluZGV4LCAwLCBncm91cCk7XG4gICAgICAgIHRoaXMudXBkYXRlR3JvdXBJbmRleCgpO1xuXG4gICAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG5cbiAgICBtb3ZlR3JvdXAoaW5kZXg6IG51bWJlciwgc3RlcDogbnVtYmVyKTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5ncm91cHMuc3BsaWNlKGluZGV4ICsgc3RlcCwgMCwgLi4udGhpcy5ncm91cHMuc3BsaWNlKGluZGV4LCAxKSk7XG4gICAgICAgIHRoaXMudXBkYXRlR3JvdXBJbmRleCgpO1xuICAgIH1cblxuICAgIHJlbW92ZUdyb3VwKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLmdyb3Vwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwSW5kZXgoKTtcbiAgICB9XG5cbiAgICBjbGVhcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ncm91cHMuc3BsaWNlKDApO1xuICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwSW5kZXgoKTtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InjectionToken } from "@angular/core";
import { DynamicFormValidationService } from "./dynamic-form-validation.service";
import { isObject } from "../utils/core.utils";
/** @type {?} */
export var MATCH_DISABLED = "DISABLED";
/** @type {?} */
export var MATCH_ENABLED = "ENABLED";
/** @type {?} */
export var MATCH_HIDDEN = "HIDDEN";
/** @type {?} */
export var MATCH_OPTIONAL = "OPTIONAL";
/** @type {?} */
export var MATCH_REQUIRED = "REQUIRED";
/** @type {?} */
export var MATCH_VISIBLE = "VISIBLE";
/** @type {?} */
export var AND_OPERATOR = "AND";
/** @type {?} */
export var OR_OPERATOR = "OR";
/**
 * @record
 */
export function DynamicFormControlMatcher() { }
if (false) {
    /** @type {?} */
    DynamicFormControlMatcher.prototype.match;
    /** @type {?} */
    DynamicFormControlMatcher.prototype.opposingMatch;
    /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    DynamicFormControlMatcher.prototype.onChange = function (hasMatch, model, control, injector) { };
}
/** @type {?} */
export var DYNAMIC_MATCHERS = new InjectionToken("DYNAMIC_MATCHERS");
/** @type {?} */
export var DisabledMatcher = {
    match: MATCH_DISABLED,
    opposingMatch: MATCH_ENABLED,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    function (hasMatch, model) {
        model.disabled = hasMatch;
    }
};
/** @type {?} */
export var HiddenMatcher = {
    match: MATCH_HIDDEN,
    opposingMatch: MATCH_VISIBLE,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @return {?}
     */
    function (hasMatch, model) {
        model.hidden = hasMatch;
    }
};
/** @type {?} */
export var RequiredMatcher = {
    match: MATCH_REQUIRED,
    opposingMatch: MATCH_OPTIONAL,
    onChange: /**
     * @param {?} hasMatch
     * @param {?} model
     * @param {?} control
     * @param {?} injector
     * @return {?}
     */
    function (hasMatch, model, control, injector) {
        /** @type {?} */
        var validatorsConfig = null;
        if (hasMatch) {
            validatorsConfig = isObject(model.validators) ? tslib_1.__assign({}, model.validators, { required: null }) : { required: null };
        }
        else {
            if (isObject(model.validators)) {
                delete model.validators["required"];
                validatorsConfig = tslib_1.__assign({}, model.validators);
            }
        }
        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);
    }
};
/** @type {?} */
export var DISABLED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: DisabledMatcher,
    multi: true
};
/** @type {?} */
export var HIDDEN_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: HiddenMatcher,
    multi: true
};
/** @type {?} */
export var REQUIRED_MATCHER = {
    provide: DYNAMIC_MATCHERS,
    useValue: RequiredMatcher,
    multi: true
};
/** @type {?} */
export var DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER, HIDDEN_MATCHER, REQUIRED_MATCHER];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXJlbGF0aW9uLm1hdGNoZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWR5bmFtaWMtZm9ybXMvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1yZWxhdGlvbi5tYXRjaGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQTJCLE1BQU0sZUFBZSxDQUFDO0FBR3hFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFFL0MsTUFBTSxLQUFPLGNBQWMsR0FBRyxVQUFVOztBQUN4QyxNQUFNLEtBQU8sYUFBYSxHQUFHLFNBQVM7O0FBQ3RDLE1BQU0sS0FBTyxZQUFZLEdBQUcsUUFBUTs7QUFDcEMsTUFBTSxLQUFPLGNBQWMsR0FBRyxVQUFVOztBQUN4QyxNQUFNLEtBQU8sY0FBYyxHQUFHLFVBQVU7O0FBQ3hDLE1BQU0sS0FBTyxhQUFhLEdBQUcsU0FBUzs7QUFFdEMsTUFBTSxLQUFPLFlBQVksR0FBRyxLQUFLOztBQUNqQyxNQUFNLEtBQU8sV0FBVyxHQUFHLElBQUk7Ozs7QUFFL0IsK0NBTUM7OztJQUpHLDBDQUFjOztJQUNkLGtEQUE2Qjs7Ozs7Ozs7SUFFN0IsaUdBQTRHOzs7QUFHaEgsTUFBTSxLQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUE0QixrQkFBa0IsQ0FBQzs7QUFFakcsTUFBTSxLQUFPLGVBQWUsR0FBOEI7SUFFdEQsS0FBSyxFQUFFLGNBQWM7SUFDckIsYUFBYSxFQUFFLGFBQWE7SUFDNUIsUUFBUTs7Ozs7Y0FBQyxRQUFRLEVBQUUsS0FBSztRQUNwQixLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM5QixDQUFDO0NBQ0o7O0FBRUQsTUFBTSxLQUFPLGFBQWEsR0FBOEI7SUFFcEQsS0FBSyxFQUFFLFlBQVk7SUFDbkIsYUFBYSxFQUFFLGFBQWE7SUFDNUIsUUFBUTs7Ozs7Y0FBQyxRQUFRLEVBQUUsS0FBSztRQUNwQixLQUFLLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0NBQ0o7O0FBRUQsTUFBTSxLQUFPLGVBQWUsR0FBOEI7SUFFdEQsS0FBSyxFQUFFLGNBQWM7SUFDckIsYUFBYSxFQUFFLGNBQWM7SUFDN0IsUUFBUTs7Ozs7OztjQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVE7O1lBRW5DLGdCQUFnQixHQUFHLElBQUk7UUFFM0IsSUFBSSxRQUFRLEVBQUU7WUFFVixnQkFBZ0IsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsc0JBQUssS0FBSyxDQUFDLFVBQVUsSUFBRSxRQUFRLEVBQUUsSUFBSSxJQUFFLENBQUMsQ0FBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUU1RzthQUFNO1lBRUgsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUU1QixPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3BDLGdCQUFnQix3QkFBTyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDNUM7U0FDSjtRQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEcsQ0FBQztDQUNKOztBQUVELE1BQU0sS0FBTyxnQkFBZ0IsR0FBa0I7SUFDM0MsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixRQUFRLEVBQUUsZUFBZTtJQUN6QixLQUFLLEVBQUUsSUFBSTtDQUNkOztBQUVELE1BQU0sS0FBTyxjQUFjLEdBQWtCO0lBQ3pDLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsUUFBUSxFQUFFLGFBQWE7SUFDdkIsS0FBSyxFQUFFLElBQUk7Q0FDZDs7QUFFRCxNQUFNLEtBQU8sZ0JBQWdCLEdBQWtCO0lBQzNDLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsUUFBUSxFQUFFLGVBQWU7SUFDekIsS0FBSyxFQUFFLElBQUk7Q0FDZDs7QUFFRCxNQUFNLEtBQU8seUJBQXlCLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IsIFZhbHVlUHJvdmlkZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsIH0gZnJvbSBcIi4uL21vZGVsL2R5bmFtaWMtZm9ybS1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZVwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgTUFUQ0hfRElTQUJMRUQgPSBcIkRJU0FCTEVEXCI7XG5leHBvcnQgY29uc3QgTUFUQ0hfRU5BQkxFRCA9IFwiRU5BQkxFRFwiO1xuZXhwb3J0IGNvbnN0IE1BVENIX0hJRERFTiA9IFwiSElEREVOXCI7XG5leHBvcnQgY29uc3QgTUFUQ0hfT1BUSU9OQUwgPSBcIk9QVElPTkFMXCI7XG5leHBvcnQgY29uc3QgTUFUQ0hfUkVRVUlSRUQgPSBcIlJFUVVJUkVEXCI7XG5leHBvcnQgY29uc3QgTUFUQ0hfVklTSUJMRSA9IFwiVklTSUJMRVwiO1xuXG5leHBvcnQgY29uc3QgQU5EX09QRVJBVE9SID0gXCJBTkRcIjtcbmV4cG9ydCBjb25zdCBPUl9PUEVSQVRPUiA9IFwiT1JcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyIHtcblxuICAgIG1hdGNoOiBzdHJpbmc7XG4gICAgb3Bwb3NpbmdNYXRjaDogc3RyaW5nIHwgbnVsbDtcblxuICAgIG9uQ2hhbmdlKGhhc01hdGNoOiBib29sZWFuLCBtb2RlbDogRHluYW1pY0Zvcm1Db250cm9sTW9kZWwsIGNvbnRyb2w6IEZvcm1Db250cm9sLCBpbmplY3RvcjogSW5qZWN0b3IpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgRFlOQU1JQ19NQVRDSEVSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEeW5hbWljRm9ybUNvbnRyb2xNYXRjaGVyPihcIkRZTkFNSUNfTUFUQ0hFUlNcIik7XG5cbmV4cG9ydCBjb25zdCBEaXNhYmxlZE1hdGNoZXI6IER5bmFtaWNGb3JtQ29udHJvbE1hdGNoZXIgPSB7XG5cbiAgICBtYXRjaDogTUFUQ0hfRElTQUJMRUQsXG4gICAgb3Bwb3NpbmdNYXRjaDogTUFUQ0hfRU5BQkxFRCxcbiAgICBvbkNoYW5nZShoYXNNYXRjaCwgbW9kZWwpIHtcbiAgICAgICAgbW9kZWwuZGlzYWJsZWQgPSBoYXNNYXRjaDtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgSGlkZGVuTWF0Y2hlcjogRHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlciA9IHtcblxuICAgIG1hdGNoOiBNQVRDSF9ISURERU4sXG4gICAgb3Bwb3NpbmdNYXRjaDogTUFUQ0hfVklTSUJMRSxcbiAgICBvbkNoYW5nZShoYXNNYXRjaCwgbW9kZWwpIHtcbiAgICAgICAgbW9kZWwuaGlkZGVuID0gaGFzTWF0Y2g7XG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IFJlcXVpcmVkTWF0Y2hlcjogRHluYW1pY0Zvcm1Db250cm9sTWF0Y2hlciA9IHtcblxuICAgIG1hdGNoOiBNQVRDSF9SRVFVSVJFRCxcbiAgICBvcHBvc2luZ01hdGNoOiBNQVRDSF9PUFRJT05BTCxcbiAgICBvbkNoYW5nZShoYXNNYXRjaCwgbW9kZWwsIGNvbnRyb2wsIGluamVjdG9yKSB7XG5cbiAgICAgICAgbGV0IHZhbGlkYXRvcnNDb25maWcgPSBudWxsO1xuXG4gICAgICAgIGlmIChoYXNNYXRjaCkge1xuXG4gICAgICAgICAgICB2YWxpZGF0b3JzQ29uZmlnID0gaXNPYmplY3QobW9kZWwudmFsaWRhdG9ycykgPyB7Li4ubW9kZWwudmFsaWRhdG9ycywgcmVxdWlyZWQ6IG51bGx9IDoge3JlcXVpcmVkOiBudWxsfTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3QobW9kZWwudmFsaWRhdG9ycykpIHtcblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBtb2RlbC52YWxpZGF0b3JzW1wicmVxdWlyZWRcIl07XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yc0NvbmZpZyA9IHsuLi5tb2RlbC52YWxpZGF0b3JzfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluamVjdG9yLmdldChEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlKS51cGRhdGVWYWxpZGF0b3JzKHZhbGlkYXRvcnNDb25maWcsIGNvbnRyb2wsIG1vZGVsKTtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgRElTQUJMRURfTUFUQ0hFUjogVmFsdWVQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBEWU5BTUlDX01BVENIRVJTLFxuICAgIHVzZVZhbHVlOiBEaXNhYmxlZE1hdGNoZXIsXG4gICAgbXVsdGk6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBISURERU5fTUFUQ0hFUjogVmFsdWVQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBEWU5BTUlDX01BVENIRVJTLFxuICAgIHVzZVZhbHVlOiBIaWRkZW5NYXRjaGVyLFxuICAgIG11bHRpOiB0cnVlXG59O1xuXG5leHBvcnQgY29uc3QgUkVRVUlSRURfTUFUQ0hFUjogVmFsdWVQcm92aWRlciA9IHtcbiAgICBwcm92aWRlOiBEWU5BTUlDX01BVENIRVJTLFxuICAgIHVzZVZhbHVlOiBSZXF1aXJlZE1hdGNoZXIsXG4gICAgbXVsdGk6IHRydWVcbn07XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX01BVENIRVJfUFJPVklERVJTID0gW0RJU0FCTEVEX01BVENIRVIsIEhJRERFTl9NQVRDSEVSLCBSRVFVSVJFRF9NQVRDSEVSXTtcbiJdfQ==
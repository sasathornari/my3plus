/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Injector, Optional } from "@angular/core";
import { FormControl } from "@angular/forms";
import { AND_OPERATOR, DYNAMIC_MATCHERS, OR_OPERATOR } from "./dynamic-form-relation.matchers";
import { startWith } from "rxjs/operators";
import { merge } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-form-relation.matchers";
export class DynamicFormRelationService {
    /**
     * @param {?} DYNAMIC_MATCHERS
     * @param {?} injector
     */
    constructor(DYNAMIC_MATCHERS, injector) {
        this.DYNAMIC_MATCHERS = DYNAMIC_MATCHERS;
        this.injector = injector;
    }
    /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    getRelatedFormControls(model, group) {
        /** @type {?} */
        const conditionReducer = (/**
         * @param {?} controls
         * @param {?} condition
         * @return {?}
         */
        (controls, condition) => {
            /** @type {?} */
            const path = condition.rootPath || condition.id;
            if (!controls.hasOwnProperty(path)) {
                /** @type {?} */
                const control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);
                control instanceof FormControl ? controls[path] = control : console.warn(`No related form control with id ${condition.id} could be found`);
            }
            return controls;
        });
        /** @type {?} */
        const relationReducer = (/**
         * @param {?} controls
         * @param {?} relation
         * @return {?}
         */
        (controls, relation) => relation.when.reduce(conditionReducer, controls));
        return model.relations.reduce(relationReducer, {});
    }
    /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    findRelationByMatcher(relations, matcher) {
        return relations.find((/**
         * @param {?} relation
         * @return {?}
         */
        relation => [matcher.match, matcher.opposingMatch].includes(relation.match)));
    }
    /**
     * @param {?} relation
     * @param {?} relatedFormControls
     * @param {?} matcher
     * @return {?}
     */
    matchesCondition(relation, relatedFormControls, matcher) {
        /** @type {?} */
        const operator = relation.operator || OR_OPERATOR;
        return relation.when.reduce((/**
         * @param {?} hasAlreadyMatched
         * @param {?} condition
         * @param {?} index
         * @return {?}
         */
        (hasAlreadyMatched, condition, index) => {
            /** @type {?} */
            const path = condition.rootPath || condition.id;
            /** @type {?} */
            let relatedFormControl;
            for (let [key, control] of Object.entries(relatedFormControls)) {
                if (key === path) {
                    relatedFormControl = control;
                    break;
                }
            }
            if (relatedFormControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;
            }
            if (relatedFormControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);
            }
            return false;
        }), false);
    }
    /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    subscribeRelations(model, group, control) {
        /** @type {?} */
        const relatedFormControls = this.getRelatedFormControls(model, group);
        /** @type {?} */
        const subscriptions = [];
        Object.values(relatedFormControls).forEach((/**
         * @param {?} relatedControl
         * @return {?}
         */
        relatedControl => {
            /** @type {?} */
            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));
            /** @type {?} */
            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));
            subscriptions.push(merge(valueChanges, statusChanges).subscribe((/**
             * @return {?}
             */
            () => {
                this.DYNAMIC_MATCHERS.forEach((/**
                 * @param {?} matcher
                 * @return {?}
                 */
                matcher => {
                    /** @type {?} */
                    const relation = this.findRelationByMatcher(model.relations, matcher);
                    if (relation !== undefined) {
                        /** @type {?} */
                        const hasMatch = this.matchesCondition(relation, relatedFormControls, matcher);
                        matcher.onChange(hasMatch, model, control, this.injector);
                    }
                }));
            })));
        }));
        return subscriptions;
    }
}
DynamicFormRelationService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
DynamicFormRelationService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_MATCHERS,] }] },
    { type: Injector }
];
/** @nocollapse */ DynamicFormRelationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormRelationService_Factory() { return new DynamicFormRelationService(i0.ɵɵinject(i1.DYNAMIC_MATCHERS, 8), i0.ɵɵinject(i0.INJECTOR)); }, token: DynamicFormRelationService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.DYNAMIC_MATCHERS;
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,
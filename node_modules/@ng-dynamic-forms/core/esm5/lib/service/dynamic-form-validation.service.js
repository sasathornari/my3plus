/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from "@angular/core";
import { Validators, NG_VALIDATORS, NG_ASYNC_VALIDATORS } from "@angular/forms";
import { isObject, isString } from "../utils/core.utils";
import { DYNAMIC_VALIDATORS } from "./dynamic-form.validators";
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./dynamic-form.validators";
var DynamicFormValidationService = /** @class */ (function () {
    function DynamicFormValidationService(NG_VALIDATORS, NG_ASYNC_VALIDATORS, DYNAMIC_VALIDATORS) {
        this.NG_VALIDATORS = NG_VALIDATORS;
        this.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
        this.DYNAMIC_VALIDATORS = DYNAMIC_VALIDATORS;
    }
    /**
     * @private
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @param {?=} validatorsToken
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidatorFn = /**
     * @private
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @param {?=} validatorsToken
     * @return {?}
     */
    function (validatorName, validatorArgs, validatorsToken) {
        if (validatorArgs === void 0) { validatorArgs = null; }
        if (validatorsToken === void 0) { validatorsToken = this.NG_VALIDATORS; }
        /** @type {?} */
        var validatorFn;
        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators
            validatorFn = ((/** @type {?} */ (Validators)))[validatorName];
        }
        else { // Custom Validators
            if (this.DYNAMIC_VALIDATORS && this.DYNAMIC_VALIDATORS.has(validatorName)) {
                validatorFn = this.DYNAMIC_VALIDATORS.get(validatorName);
            }
            else if (validatorsToken) {
                validatorFn = validatorsToken.find((/**
                 * @param {?} validatorFn
                 * @return {?}
                 */
                function (validatorFn) { return validatorFn.name === validatorName; }));
            }
        }
        if (validatorFn === undefined) { // throw when no validator could be resolved
            throw new Error("validator \"" + validatorName + "\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS");
        }
        if (validatorArgs !== null) {
            return ((/** @type {?} */ (validatorFn)))(validatorArgs);
        }
        return (/** @type {?} */ (validatorFn));
    };
    /**
     * @private
     * @param {?} validatorsConfig
     * @param {?=} validatorsToken
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidatorFns = /**
     * @private
     * @param {?} validatorsConfig
     * @param {?=} validatorsToken
     * @return {?}
     */
    function (validatorsConfig, validatorsToken) {
        var _this = this;
        if (validatorsToken === void 0) { validatorsToken = this.NG_VALIDATORS; }
        /** @type {?} */
        var validatorFns = [];
        if (isObject(validatorsConfig)) {
            validatorFns = Object.keys(validatorsConfig).map((/**
             * @param {?} validatorConfigKey
             * @return {?}
             */
            function (validatorConfigKey) {
                /** @type {?} */
                var validatorConfigValue = ((/** @type {?} */ (validatorsConfig)))[validatorConfigKey];
                if (_this.isValidatorDescriptor(validatorConfigValue)) {
                    /** @type {?} */
                    var descriptor = (/** @type {?} */ (validatorConfigValue));
                    return _this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);
                }
                return _this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);
            }));
        }
        return validatorFns;
    };
    /**
     * @private
     * @param {?} template
     * @param {?} model
     * @param {?=} error
     * @return {?}
     */
    DynamicFormValidationService.prototype.parseErrorMessageConfig = /**
     * @private
     * @param {?} template
     * @param {?} model
     * @param {?=} error
     * @return {?}
     */
    function (template, model, error) {
        if (error === void 0) { error = null; }
        return template.replace(/{{\s*(.+?)\s*}}/mg, (/**
         * @param {?} _match
         * @param {?} expression
         * @return {?}
         */
        function (_match, expression) {
            /** @type {?} */
            var propertySource = model;
            /** @type {?} */
            var propertyName = expression;
            if (expression.indexOf("validator.") >= 0 && error) {
                propertySource = error;
                propertyName = expression.replace("validator.", "");
            }
            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?
                propertySource[propertyName] : null;
        }));
    };
    /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidator = /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    function (validatorName, validatorArgs) {
        if (validatorArgs === void 0) { validatorArgs = null; }
        return (/** @type {?} */ (this.getValidatorFn(validatorName, validatorArgs)));
    };
    /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    DynamicFormValidationService.prototype.getAsyncValidator = /**
     * @param {?} validatorName
     * @param {?=} validatorArgs
     * @return {?}
     */
    function (validatorName, validatorArgs) {
        if (validatorArgs === void 0) { validatorArgs = null; }
        return (/** @type {?} */ (this.getValidatorFn(validatorName, validatorArgs, this.NG_ASYNC_VALIDATORS)));
    };
    /**
     * @param {?} validatorsConfig
     * @return {?}
     */
    DynamicFormValidationService.prototype.getValidators = /**
     * @param {?} validatorsConfig
     * @return {?}
     */
    function (validatorsConfig) {
        return (/** @type {?} */ (this.getValidatorFns(validatorsConfig)));
    };
    /**
     * @param {?} asyncValidatorsConfig
     * @return {?}
     */
    DynamicFormValidationService.prototype.getAsyncValidators = /**
     * @param {?} asyncValidatorsConfig
     * @return {?}
     */
    function (asyncValidatorsConfig) {
        return (/** @type {?} */ (this.getValidatorFns(asyncValidatorsConfig, this.NG_ASYNC_VALIDATORS)));
    };
    /**
     * @param {?} validatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    DynamicFormValidationService.prototype.updateValidators = /**
     * @param {?} validatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    function (validatorsConfig, control, model) {
        model.validators = validatorsConfig;
        if (validatorsConfig === null) {
            control.clearValidators();
        }
        else {
            control.setValidators(this.getValidators(validatorsConfig));
        }
        control.updateValueAndValidity();
    };
    /**
     * @param {?} asyncValidatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    DynamicFormValidationService.prototype.updateAsyncValidators = /**
     * @param {?} asyncValidatorsConfig
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    function (asyncValidatorsConfig, control, model) {
        model.asyncValidators = asyncValidatorsConfig;
        if (asyncValidatorsConfig === null) {
            control.clearAsyncValidators();
        }
        else {
            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));
        }
        control.updateValueAndValidity();
    };
    /**
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    DynamicFormValidationService.prototype.createErrorMessages = /**
     * @param {?} control
     * @param {?} model
     * @return {?}
     */
    function (control, model) {
        var _this = this;
        /** @type {?} */
        var messages = [];
        if (model.hasErrorMessages) {
            /** @type {?} */
            var messagesConfig_1 = (/** @type {?} */ (model.errorMessages));
            Object.keys(control.errors || {}).forEach((/**
             * @param {?} validationErrorKey
             * @return {?}
             */
            function (validationErrorKey) {
                /** @type {?} */
                var messageKey = validationErrorKey;
                if (validationErrorKey === "minlength" || validationErrorKey === "maxlength") {
                    messageKey = messageKey.replace("length", "Length");
                }
                if (messagesConfig_1.hasOwnProperty(messageKey)) {
                    /** @type {?} */
                    var validationError = control.getError(validationErrorKey);
                    /** @type {?} */
                    var messageTemplate = (/** @type {?} */ (messagesConfig_1[messageKey]));
                    messages.push(_this.parseErrorMessageConfig(messageTemplate, model, validationError));
                }
            }));
        }
        return messages;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormValidationService.prototype.isFormHook = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isString(value) && ["blur", "change", "submit"].indexOf(value) !== -1;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DynamicFormValidationService.prototype.isValidatorDescriptor = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (isObject(value)) {
            return value.hasOwnProperty("name") && value.hasOwnProperty("args");
        }
        return false;
    };
    DynamicFormValidationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormValidationService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [NG_VALIDATORS,] }] },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },
        { type: Map, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_VALIDATORS,] }] }
    ]; };
    /** @nocollapse */ DynamicFormValidationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormValidationService_Factory() { return new DynamicFormValidationService(i0.ɵɵinject(i1.NG_VALIDATORS, 8), i0.ɵɵinject(i1.NG_ASYNC_VALIDATORS, 8), i0.ɵɵinject(i2.DYNAMIC_VALIDATORS, 8)); }, token: DynamicFormValidationService, providedIn: "root" });
    return DynamicFormValidationService;
}());
export { DynamicFormValidationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormValidationService.prototype.NG_VALIDATORS;
    /**
     * @type {?}
     * @private
     */
    DynamicFormValidationService.prototype.NG_ASYNC_VALIDATORS;
    /**
     * @type {?}
     * @private
     */
    DynamicFormValidationService.prototype.DYNAMIC_VALIDATORS;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9keW5hbWljLWZvcm0tdmFsaWRhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUlILFVBQVUsRUFDVixhQUFhLEVBQ2IsbUJBQW1CLEVBQ3RCLE1BQU0sZ0JBQWdCLENBQUM7QUFNeEIsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQWdELE1BQU0sMkJBQTJCLENBQUM7Ozs7QUFFN0c7SUFLSSxzQ0FBdUQsYUFBNEIsRUFDdEIsbUJBQXVDLEVBQ3hDLGtCQUE2RDtRQUZsRSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUN0Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQW9CO1FBQ3hDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMkM7SUFBRyxDQUFDOzs7Ozs7OztJQUdySCxxREFBYzs7Ozs7OztJQUF0QixVQUF1QixhQUFxQixFQUFFLGFBQXlCLEVBQ2hELGVBQXFEO1FBRDlCLDhCQUFBLEVBQUEsb0JBQXlCO1FBQ2hELGdDQUFBLEVBQUEsa0JBQW1DLElBQUksQ0FBQyxhQUFhOztZQUVwRSxXQUFxRDtRQUV6RCxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSw4QkFBOEI7WUFFMUUsV0FBVyxHQUFHLENBQUMsbUJBQUEsVUFBVSxFQUFPLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUVwRDthQUFNLEVBQUUsb0JBQW9CO1lBRXpCLElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxrQkFB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Q0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDOzs7OztJQUdELDREQUFxQjs7OztJQUFyQixVQUFzQixLQUFVO1FBRTVCLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7Z0JBdExKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7NENBR2dCLFFBQVEsWUFBSSxNQUFNLFNBQUMsYUFBYTs0Q0FDaEMsUUFBUSxZQUFJLE1BQU0sU0FBQyxtQkFBbUI7Z0JBQzZCLEdBQUcsdUJBQXRFLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCOzs7dUNBeEJ0RDtDQXdNQyxBQXZMRCxJQXVMQztTQXBMWSw0QkFBNEI7Ozs7OztJQUV6QixxREFBdUU7Ozs7O0lBQ3ZFLDJEQUF3Rjs7Ozs7SUFDeEYsMERBQTZHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0Q29udHJvbCxcbiAgICBBc3luY1ZhbGlkYXRvckZuLFxuICAgIFZhbGlkYXRvckZuLFxuICAgIFZhbGlkYXRvcnMsXG4gICAgTkdfVkFMSURBVE9SUyxcbiAgICBOR19BU1lOQ19WQUxJREFUT1JTXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7XG4gICAgRHluYW1pY1ZhbGlkYXRvckRlc2NyaXB0b3IsXG4gICAgRHluYW1pY1ZhbGlkYXRvcnNDb25maWdcbn0gZnJvbSBcIi4uL21vZGVsL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtdmFsaWRhdGlvbi5tb2RlbFwiO1xuaW1wb3J0IHsgaXNPYmplY3QsIGlzU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL2NvcmUudXRpbHNcIjtcbmltcG9ydCB7IERZTkFNSUNfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGYWN0b3J5LCBWYWxpZGF0b3JzVG9rZW4gfSBmcm9tIFwiLi9keW5hbWljLWZvcm0udmFsaWRhdG9yc1wiO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogXCJyb290XCJcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1WYWxpZGF0aW9uU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1ZBTElEQVRPUlMpIHByaXZhdGUgTkdfVkFMSURBVE9SUzogVmFsaWRhdG9yRm5bXSxcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX0FTWU5DX1ZBTElEQVRPUlMpIHByaXZhdGUgTkdfQVNZTkNfVkFMSURBVE9SUzogQXN5bmNWYWxpZGF0b3JGbltdLFxuICAgICAgICAgICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRFlOQU1JQ19WQUxJREFUT1JTKSBwcml2YXRlIERZTkFNSUNfVkFMSURBVE9SUzogTWFwPHN0cmluZywgVmFsaWRhdG9yIHwgVmFsaWRhdG9yRmFjdG9yeT4pIHt9XG5cblxuICAgIHByaXZhdGUgZ2V0VmFsaWRhdG9yRm4odmFsaWRhdG9yTmFtZTogc3RyaW5nLCB2YWxpZGF0b3JBcmdzOiBhbnkgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yc1Rva2VuOiBWYWxpZGF0b3JzVG9rZW4gPSB0aGlzLk5HX1ZBTElEQVRPUlMpOiBWYWxpZGF0b3IgfCBuZXZlciB7XG5cbiAgICAgICAgbGV0IHZhbGlkYXRvckZuOiBWYWxpZGF0b3JGYWN0b3J5IHwgVmFsaWRhdG9yIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChWYWxpZGF0b3JzLmhhc093blByb3BlcnR5KHZhbGlkYXRvck5hbWUpKSB7IC8vIEJ1aWx0LWluIEFuZ3VsYXIgVmFsaWRhdG9yc1xuXG4gICAgICAgICAgICB2YWxpZGF0b3JGbiA9IChWYWxpZGF0b3JzIGFzIGFueSlbdmFsaWRhdG9yTmFtZV07XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gQ3VzdG9tIFZhbGlkYXRvcnNcblxuICAgICAgICAgICAgaWYgKHRoaXMuRFlOQU1JQ19WQUxJREFUT1JTICYmIHRoaXMuRFlOQU1JQ19WQUxJREFUT1JTLmhhcyh2YWxpZGF0b3JOYW1lKSkge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvckZuID0gdGhpcy5EWU5BTUlDX1ZBTElEQVRPUlMuZ2V0KHZhbGlkYXRvck5hbWUpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbGlkYXRvcnNUb2tlbikge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvckZuID0gdmFsaWRhdG9yc1Rva2VuLmZpbmQodmFsaWRhdG9yRm4gPT4gdmFsaWRhdG9yRm4ubmFtZSA9PT0gdmFsaWRhdG9yTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsaWRhdG9yRm4gPT09IHVuZGVmaW5lZCkgeyAvLyB0aHJvdyB3aGVuIG5vIHZhbGlkYXRvciBjb3VsZCBiZSByZXNvbHZlZFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YWxpZGF0b3IgXCIke3ZhbGlkYXRvck5hbWV9XCIgaXMgbm90IHByb3ZpZGVkIHZpYSBOR19WQUxJREFUT1JTLCBOR19BU1lOQ19WQUxJREFUT1JTIG9yIERZTkFNSUNfRk9STV9WQUxJREFUT1JTYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsaWRhdG9yQXJncyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICh2YWxpZGF0b3JGbiBhcyBWYWxpZGF0b3JGYWN0b3J5KSh2YWxpZGF0b3JBcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZGF0b3JGbiBhcyBWYWxpZGF0b3I7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGdldFZhbGlkYXRvckZucyh2YWxpZGF0b3JzQ29uZmlnOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzVG9rZW46IFZhbGlkYXRvcnNUb2tlbiA9IHRoaXMuTkdfVkFMSURBVE9SUyk6IFZhbGlkYXRvcltdIHtcblxuICAgICAgICBsZXQgdmFsaWRhdG9yRm5zOiBWYWxpZGF0b3JbXSA9IFtdO1xuXG4gICAgICAgIGlmIChpc09iamVjdCh2YWxpZGF0b3JzQ29uZmlnKSkge1xuXG4gICAgICAgICAgICB2YWxpZGF0b3JGbnMgPSBPYmplY3Qua2V5cyh2YWxpZGF0b3JzQ29uZmlnKS5tYXAodmFsaWRhdG9yQ29uZmlnS2V5ID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCB2YWxpZGF0b3JDb25maWdWYWx1ZSA9ICh2YWxpZGF0b3JzQ29uZmlnIGFzIER5bmFtaWNWYWxpZGF0b3JzQ29uZmlnKVt2YWxpZGF0b3JDb25maWdLZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZGF0b3JEZXNjcmlwdG9yKHZhbGlkYXRvckNvbmZpZ1ZhbHVlKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjcmlwdG9yID0gdmFsaWRhdG9yQ29uZmlnVmFsdWUgYXMgRHluYW1pY1ZhbGlkYXRvckRlc2NyaXB0b3I7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRhdG9yRm4oZGVzY3JpcHRvci5uYW1lLCBkZXNjcmlwdG9yLmFyZ3MsIHZhbGlkYXRvcnNUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRhdG9yRm4odmFsaWRhdG9yQ29uZmlnS2V5LCB2YWxpZGF0b3JDb25maWdWYWx1ZSwgdmFsaWRhdG9yc1Rva2VuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvckZucztcbiAgICB9XG5cblxuICAgIHByaXZhdGUgcGFyc2VFcnJvck1lc3NhZ2VDb25maWcodGVtcGxhdGU6IHN0cmluZywgbW9kZWw6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsLCBlcnJvcjogYW55ID0gbnVsbCk6IHN0cmluZyB7XG5cbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL3t7XFxzKiguKz8pXFxzKn19L21nLCAoX21hdGNoOiBzdHJpbmcsIGV4cHJlc3Npb246IHN0cmluZykgPT4ge1xuXG4gICAgICAgICAgICBsZXQgcHJvcGVydHlTb3VyY2U6IGFueSA9IG1vZGVsLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogc3RyaW5nID0gZXhwcmVzc2lvbjtcblxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24uaW5kZXhPZihcInZhbGlkYXRvci5cIikgPj0gMCAmJiBlcnJvcikge1xuXG4gICAgICAgICAgICAgICAgcHJvcGVydHlTb3VyY2UgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBleHByZXNzaW9uLnJlcGxhY2UoXCJ2YWxpZGF0b3IuXCIsIFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHlTb3VyY2VbcHJvcGVydHlOYW1lXSAhPT0gbnVsbCAmJiBwcm9wZXJ0eVNvdXJjZVtwcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgIHByb3BlcnR5U291cmNlW3Byb3BlcnR5TmFtZV0gOiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIGdldFZhbGlkYXRvcih2YWxpZGF0b3JOYW1lOiBzdHJpbmcsIHZhbGlkYXRvckFyZ3M6IGFueSA9IG51bGwpOiBWYWxpZGF0b3JGbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbGlkYXRvckZuKHZhbGlkYXRvck5hbWUsIHZhbGlkYXRvckFyZ3MpIGFzIFZhbGlkYXRvckZuO1xuICAgIH1cblxuXG4gICAgZ2V0QXN5bmNWYWxpZGF0b3IodmFsaWRhdG9yTmFtZTogc3RyaW5nLCB2YWxpZGF0b3JBcmdzOiBhbnkgPSBudWxsKTogQXN5bmNWYWxpZGF0b3JGbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbGlkYXRvckZuKHZhbGlkYXRvck5hbWUsIHZhbGlkYXRvckFyZ3MsIHRoaXMuTkdfQVNZTkNfVkFMSURBVE9SUykgYXMgQXN5bmNWYWxpZGF0b3JGbjtcbiAgICB9XG5cblxuICAgIGdldFZhbGlkYXRvcnModmFsaWRhdG9yc0NvbmZpZzogRHluYW1pY1ZhbGlkYXRvcnNDb25maWcpOiBWYWxpZGF0b3JGbltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRhdG9yRm5zKHZhbGlkYXRvcnNDb25maWcpIGFzIFZhbGlkYXRvckZuW107XG4gICAgfVxuXG5cbiAgICBnZXRBc3luY1ZhbGlkYXRvcnMoYXN5bmNWYWxpZGF0b3JzQ29uZmlnOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyk6IEFzeW5jVmFsaWRhdG9yRm5bXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbGlkYXRvckZucyhhc3luY1ZhbGlkYXRvcnNDb25maWcsIHRoaXMuTkdfQVNZTkNfVkFMSURBVE9SUykgYXMgQXN5bmNWYWxpZGF0b3JGbltdO1xuICAgIH1cblxuXG4gICAgdXBkYXRlVmFsaWRhdG9ycyh2YWxpZGF0b3JzQ29uZmlnOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyB8IG51bGwsIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IHZvaWQge1xuXG4gICAgICAgIG1vZGVsLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzQ29uZmlnO1xuXG4gICAgICAgIGlmICh2YWxpZGF0b3JzQ29uZmlnID09PSBudWxsKSB7XG5cbiAgICAgICAgICAgIGNvbnRyb2wuY2xlYXJWYWxpZGF0b3JzKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2wuc2V0VmFsaWRhdG9ycyh0aGlzLmdldFZhbGlkYXRvcnModmFsaWRhdG9yc0NvbmZpZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgfVxuXG5cbiAgICB1cGRhdGVBc3luY1ZhbGlkYXRvcnMoYXN5bmNWYWxpZGF0b3JzQ29uZmlnOiBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZyB8IG51bGwsIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IER5bmFtaWNGb3JtQ29udHJvbE1vZGVsKTogdm9pZCB7XG5cbiAgICAgICAgbW9kZWwuYXN5bmNWYWxpZGF0b3JzID0gYXN5bmNWYWxpZGF0b3JzQ29uZmlnO1xuXG4gICAgICAgIGlmIChhc3luY1ZhbGlkYXRvcnNDb25maWcgPT09IG51bGwpIHtcblxuICAgICAgICAgICAgY29udHJvbC5jbGVhckFzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250cm9sLnNldEFzeW5jVmFsaWRhdG9ycyh0aGlzLmdldEFzeW5jVmFsaWRhdG9ycyhhc3luY1ZhbGlkYXRvcnNDb25maWcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgIH1cblxuXG4gICAgY3JlYXRlRXJyb3JNZXNzYWdlcyhjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IHN0cmluZ1tdIHtcblxuICAgICAgICBsZXQgbWVzc2FnZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICAgICAgaWYgKG1vZGVsLmhhc0Vycm9yTWVzc2FnZXMpIHtcblxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VzQ29uZmlnID0gbW9kZWwuZXJyb3JNZXNzYWdlcyBhcyBEeW5hbWljVmFsaWRhdG9yc0NvbmZpZztcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29udHJvbC5lcnJvcnMgfHwge30pLmZvckVhY2godmFsaWRhdGlvbkVycm9yS2V5ID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5O1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcktleSA9PT0gXCJtaW5sZW5ndGhcIiB8fCB2YWxpZGF0aW9uRXJyb3JLZXkgPT09IFwibWF4bGVuZ3RoXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUtleSA9IG1lc3NhZ2VLZXkucmVwbGFjZShcImxlbmd0aFwiLCBcIkxlbmd0aFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZXNDb25maWcuaGFzT3duUHJvcGVydHkobWVzc2FnZUtleSkpIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsaWRhdGlvbkVycm9yID0gY29udHJvbC5nZXRFcnJvcih2YWxpZGF0aW9uRXJyb3JLZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRlbXBsYXRlID0gbWVzc2FnZXNDb25maWdbbWVzc2FnZUtleV0gYXMgc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2godGhpcy5wYXJzZUVycm9yTWVzc2FnZUNvbmZpZyhtZXNzYWdlVGVtcGxhdGUsIG1vZGVsLCB2YWxpZGF0aW9uRXJyb3IpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9XG5cblxuICAgIGlzRm9ybUhvb2sodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpICYmIFtcImJsdXJcIiwgXCJjaGFuZ2VcIiwgXCJzdWJtaXRcIl0uaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgIH1cblxuXG4gICAgaXNWYWxpZGF0b3JEZXNjcmlwdG9yKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcblxuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpICYmIHZhbHVlLmhhc093blByb3BlcnR5KFwiYXJnc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector, Optional } from "@angular/core";
import { FormControl } from "@angular/forms";
import { AND_OPERATOR, DYNAMIC_MATCHERS, OR_OPERATOR } from "./dynamic-form-relation.matchers";
import { startWith } from "rxjs/operators";
import { merge } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "./dynamic-form-relation.matchers";
var DynamicFormRelationService = /** @class */ (function () {
    function DynamicFormRelationService(DYNAMIC_MATCHERS, injector) {
        this.DYNAMIC_MATCHERS = DYNAMIC_MATCHERS;
        this.injector = injector;
    }
    /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    DynamicFormRelationService.prototype.getRelatedFormControls = /**
     * @param {?} model
     * @param {?} group
     * @return {?}
     */
    function (model, group) {
        /** @type {?} */
        var conditionReducer = (/**
         * @param {?} controls
         * @param {?} condition
         * @return {?}
         */
        function (controls, condition) {
            /** @type {?} */
            var path = condition.rootPath || condition.id;
            if (!controls.hasOwnProperty(path)) {
                /** @type {?} */
                var control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);
                control instanceof FormControl ? controls[path] = control : console.warn("No related form control with id " + condition.id + " could be found");
            }
            return controls;
        });
        /** @type {?} */
        var relationReducer = (/**
         * @param {?} controls
         * @param {?} relation
         * @return {?}
         */
        function (controls, relation) { return relation.when.reduce(conditionReducer, controls); });
        return model.relations.reduce(relationReducer, {});
    };
    /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    DynamicFormRelationService.prototype.findRelationByMatcher = /**
     * @param {?} relations
     * @param {?} matcher
     * @return {?}
     */
    function (relations, matcher) {
        return relations.find((/**
         * @param {?} relation
         * @return {?}
         */
        function (relation) { return [matcher.match, matcher.opposingMatch].includes(relation.match); }));
    };
    /**
     * @param {?} relation
     * @param {?} relatedFormControls
     * @param {?} matcher
     * @return {?}
     */
    DynamicFormRelationService.prototype.matchesCondition = /**
     * @param {?} relation
     * @param {?} relatedFormControls
     * @param {?} matcher
     * @return {?}
     */
    function (relation, relatedFormControls, matcher) {
        /** @type {?} */
        var operator = relation.operator || OR_OPERATOR;
        return relation.when.reduce((/**
         * @param {?} hasAlreadyMatched
         * @param {?} condition
         * @param {?} index
         * @return {?}
         */
        function (hasAlreadyMatched, condition, index) {
            var e_1, _a;
            /** @type {?} */
            var path = condition.rootPath || condition.id;
            /** @type {?} */
            var relatedFormControl;
            try {
                for (var _b = tslib_1.__values(Object.entries(relatedFormControls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = tslib_1.__read(_c.value, 2), key = _d[0], control = _d[1];
                    if (key === path) {
                        relatedFormControl = control;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (relatedFormControl && relation.match === matcher.match) {
                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;
            }
            if (relatedFormControl && relation.match === matcher.opposingMatch) {
                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {
                    return true;
                }
                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {
                    return false;
                }
                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);
            }
            return false;
        }), false);
    };
    /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    DynamicFormRelationService.prototype.subscribeRelations = /**
     * @param {?} model
     * @param {?} group
     * @param {?} control
     * @return {?}
     */
    function (model, group, control) {
        var _this = this;
        /** @type {?} */
        var relatedFormControls = this.getRelatedFormControls(model, group);
        /** @type {?} */
        var subscriptions = [];
        Object.values(relatedFormControls).forEach((/**
         * @param {?} relatedControl
         * @return {?}
         */
        function (relatedControl) {
            /** @type {?} */
            var valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));
            /** @type {?} */
            var statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));
            subscriptions.push(merge(valueChanges, statusChanges).subscribe((/**
             * @return {?}
             */
            function () {
                _this.DYNAMIC_MATCHERS.forEach((/**
                 * @param {?} matcher
                 * @return {?}
                 */
                function (matcher) {
                    /** @type {?} */
                    var relation = _this.findRelationByMatcher(model.relations, matcher);
                    if (relation !== undefined) {
                        /** @type {?} */
                        var hasMatch = _this.matchesCondition(relation, relatedFormControls, matcher);
                        matcher.onChange(hasMatch, model, control, _this.injector);
                    }
                }));
            })));
        }));
        return subscriptions;
    };
    DynamicFormRelationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    DynamicFormRelationService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [DYNAMIC_MATCHERS,] }] },
        { type: Injector }
    ]; };
    /** @nocollapse */ DynamicFormRelationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DynamicFormRelationService_Factory() { return new DynamicFormRelationService(i0.ɵɵinject(i1.DYNAMIC_MATCHERS, 8), i0.ɵɵinject(i0.INJECTOR)); }, token: DynamicFormRelationService, providedIn: "root" });
    return DynamicFormRelationService;
}());
export { DynamicFormRelationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.DYNAMIC_MATCHERS;
    /**
     * @type {?}
     * @private
     */
    DynamicFormRelationService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,